https://github.com/square/moshi/pull/1470	2	\N	2022-01-19 05:25:06	Convert ClassJsonAdapter to kotlin	Ref #1252
https://github.com/sleuthkit/autopsy/pull/4055	29	\N	2018-08-23 19:28:15	3863 remove correlationattribute	
https://github.com/realm/realm-java/pull/5520	2	\N	2017-11-17 10:44:31	Added the and() function in RealmQuery	Added the and() function to `RealmQuery E>`. Basically does nothing, just returns the query object. This can be really helpful if we have a complex query and need to read the query in a more English-like language. Helps in understanding the query better, especially for newcomers, while it doesn't affect the performance either.    Purely added it for syntactic sugar.  Code can now be written as  ```  getRealmObject()      .where(User.class)      .equalTo("username", "john-doe")      .and()      .equalTo("email" , "john@example.com")      .findAll();  ```    First time contributing to a big open source project.....so do let me know how I can improve my commits.
https://github.com/undertow-io/undertow/pull/710	2	\N	2019-02-20 04:18:03	URLDecodingHandler fixes and improvements	Added test cases to prevent future regressions. Break URLDecodingHandler  into smaller jit-friendly methods.
https://github.com/UniversalMediaServer/UniversalMediaServer/pull/1638	3	\N	2019-04-26 03:21:26	Replace all inefficient use of keySet iterator by entrySet iterator	
https://github.com/aaberg/sql2o/pull/286	1	\N	2018-03-20 11:05:40	convert connection blocks to use try with resources	Converted auto closable resources to use try with resources
https://github.com/apache/accumulo/pull/501	9	\N	2018-05-31 19:17:01	Improve some comparators using Java 8	
https://github.com/apache/accumulo/pull/1546	12	\N	2020-03-05 16:22:57	Replace try/finally with try-with-resources.	Implement the try-with-resources construct available in Java 7+ where applicable.
https://github.com/apache/ambari-infra/pull/12	1	\N	2018-10-29 16:03:23	AMBARI-24838 - Infra Manager: zookeper connection string	## What changes were proposed in this pull request?    Infra Manager can not connect to zookeeper if it is installed into a node where there is no zookeeper server instance.  The builder which is used for construct an org.apache.solr.client.solrj.impl.CloudSolrClient instance is deprecated: it does not handle the zookeper connection string fromat which sould be set in the stack code.  ```  zkhost0:port[,zkhost1:port...zkhostn:port][/solr_znode]  ```    ## How was this patch tested?    ITs passed    Manually:  1. Deploy Ambari and a cluster: zookeeper, infra solr, logsearch  2. Deploy Infra manager to a node where no zookeeper server is installed  3. Run archive_service_logs job  4. Check that archive files exists in the specified destination directory    
https://github.com/apache/avro/pull/965	6	\N	2020-10-28 12:40:40	AVRO-2937: Add some missing options in SpecificCompilerTool	### Jira    - https://issues.apache.org/jira/browse/AVRO-2937    ### Description    Currently these are the flags available in java SpecificCompilerTool:      ```java -jar avro-tools-1.10.0.jar compile    [-encoding  outputencoding>] [-string] [-bigDecimal] [-fieldVisibility  visibilityType>] [-templateDir  templateDir>]  ```  This PR adds the following options, which already SpecificCompiler accepts, but they are missing in the tool:    - -noSetters  - -optionalGetters [all_fields | only_nullable_fields]  - -addExtraOptionalGetters    ### Tests    - 4 new tests added in TestSpecificCompilerTool.java
https://github.com/apache/cloudstack/pull/3575	49	\N	2020-01-30 11:39:03	Health check feature for virtual router	We want to support more exhaustive health checks for VRs. This feature helps admins configuring health checks and also expands it's scope. There are two categories of health checks - basic and advanced (more expensive so should be run less frequently). The following checks have been added with a separate script -   1. Services check (as per existing monitorServices.py) - basic check  2. Disk space check against a threshold - basic check  3. CPU usage check against a threshold - basic check  4. Memory usage check against a threshold - basic check  5. Router template and scripts version check - basic  6. Connectivity to the gateways from router - basic  7. DNS config match against MS - advanced check  8. DHCP config match against MS - advanced check  9. HA Proxy config match against MS (internal LB and public LB) - advance check  10. Port forwarding match against MS in iptables. - advance check    Following global configs   were added for configuring health checks:    "router.health.checks.enabled" - If true, router health checks are allowed to be executed and read. If false, all scheduled checks and API calls for on demand checks are disabled. Default is true.    "router.health.checks.basic.interval" - Interval in minutes at which basic router health checks are performed. If set to 0, no tests are scheduled. Default is 3 mins as per the existing monitor services.      "router.health.checks.advanced.interval" - Interval in minutes at which advanced router health checks are performed. If set to 0, no tests are scheduled. Default value is 10 minutes  .     "router.health.checks.config  .refresh.interval" - Interval in minutes at which router health checks config - such as scheduling intervals, excluded checks, etc is updated on virtual routers by the management server. This value should be sufficiently high (like 2x) from the router.health.checks.basic.interval and router.health.checks.advanced.interval so that there is time between new results generation for passed data. Default is 10 mins.      "router.health.checks.results.fetch.interval"  - Interval in minutes at which router health checks results are fetched by management server. On each result fetch, management server evaluates need to recreate VR as per configuration of router.health.checks.failures.to.recreate.vr. This value should be sufficiently high (like 2x) from the router.health.checks.basic.interval and router.health.checks.advanced.interval so that there is time between new results generation and fetch.    "router.health.checks.failures.to.recreate.vr" - Health checks failures defined by this config are the checks that should cause router recreation. If empty the recreate is not attempted for any health check failure. Possible values are comma separated script names from systemvm s /root/health_scripts/ (namely - cpu_usage_check.py, dhcp_check.py, disk_space_check.py, dns_check.py, gateways_check.py, haproxy_check.py, iptables_check.py, memory_usage_check.py, router_version_check.py), connectivity.test or services (namely - loadbalancing.service,  webserver.service,  dhcp.service)    "router.health.checks.to.exclude" - Health checks that should be excluded when executing scheduled checks on the router. This can be a comma separated list of script names placed in the '/root/health_checks/' folder. Currently the following scripts are placed in default systemvm template -  cpu_usage_check.py, disk_space_check.py, gateways_check.py, iptables_check.py, router_version_check.py, dhcp_check.py, dns_check.py, haproxy_check.py, memory_usage_check.py.     "router.health.checks.free.disk.space.threshold" - Free disk space threshold (in MB) on VR below which the check is considered a failure. Default is 100MB.      "router.health.checks.max.cpu.usage.threshold" - Max CPU Usage threshold as % above which check is considered a failure.     "router.health.checks.max.memory.usage.threshold" - Max Memory Usage threshold as % above which check is considered a failure.       API Changes:   * listRouters and listInternalLoadBalancers now optionally takes in a flag includehealthcheckresults (default false) to fetch the last health check results for the router.  * getRouterHealthCheckResults - a new API is added to fetch health check results with an optional flag performfreshchecks to execute checks on demand. This execution is only disabled if "router.health.checks.enabled" is false.  performfreshchecks = true means all data from Management server is sent to the router and fresh checks are executed. If false, we retrieve the previously executed result from router itself.    Additionally the feature looks into any executable script in /root/health_scripts/ directory and adds it's result as json output of the overall health checks config. This allows custom checks to be put in and custom systemvm templates can also support health checks.    UI shows router in alert state if health checks are failure.    The health checks can be manually triggered using new API added in the feature (CLI or UI both support this).  ## Description    - Describe your changes in detail         For new features, provide link to FS, dev ML discussion etc.       In case of bug fix, the expected and actual behaviours, steps to reproduce.         When "Fixes: # id>" is specified, the issue/PR will automatically be closed when this PR gets merged       For addressing multiple issues/PRs, use multiple "Fixes: # id>"       Fixes: #    Fixes: 3270    ## Types of changes    - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [ ] Breaking change (fix or feature that would cause existing functionality to change)  - [x] New feature (non-breaking change which adds functionality)  - [ ] Bug fix (non-breaking change which fixes an issue)  - [ ] Enhancement (improves an existing feature and functionality)  - [ ] Cleanup (Code refactoring and cleanup, that may add test cases)    ## Screenshots (if appropriate):    ## How Has This Been Tested?     Please describe in detail how you tested your changes.       Include details of your testing environment, and the tests you ran to       see how your change affects other areas of the code, etc.    Integration tests, manually, CMK, UI    ![Screenshot from 2019-12-16 15-12-28](https://user-images.githubusercontent.com/43956255/70896650-1cef4180-2017-11ea-804e-140cf23d7d4d.png)  ![Screenshot from 2019-12-16 15-12-34](https://user-images.githubusercontent.com/43956255/70896651-1d87d800-2017-11ea-85a0-33ee21f41f3c.png)  ![Screenshot from 2019-12-16 15-12-44](https://user-images.githubusercontent.com/43956255/70896652-1d87d800-2017-11ea-85a2-ca0c77ff77e6.png)  ![Screenshot from 2019-12-16 15-12-55](https://user-images.githubusercontent.com/43956255/70896653-1d87d800-2017-11ea-9b7d-5bb72a26220d.png)  ![Screenshot from 2019-12-16 15-13-04](https://user-images.githubusercontent.com/43956255/70896655-1e206e80-2017-11ea-93a9-d3b5c8903961.png)    API Changes -   New parameters added to list routers-  ```  (local)  > list routers includehealthcheckresults=true filter=id,healthchecksfailed,healthcheckresults  {    "count": 1,    "router": [      {        "healthcheckresults": [          {            "checkname": "connectivity",            "checktype": "basic",            "details": "Successfully fetched data",            "lastupdated": "2019-12-16T15:14:06+0530",            "success": true          },          {            "checkname": "cpu_usage_check.py",            "checktype": "basic",            "details": "CPU Usage within limits with current at 1.7%",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          },          {            "checkname": "dhcp.service",            "checktype": "basic",            "details": "service is running",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          },          {            "checkname": "dhcp_check.py",            "checktype": "advance",            "details": "All 1 VMs are present in dhcphosts.txt",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "disk_space_check.py",            "checktype": "basic",            "details": "Sufficient free space is 345 MB",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "dns_check.py",            "checktype": "advance",            "details": "All 1 VMs are present in /etc/hosts",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "gateways_check.py",            "checktype": "basic",            "details": "All 1 gateways are reachable via ping",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "haproxy_check.py",            "checktype": "advance",            "details": "No data provided to check, skipping",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "iptables_check.py",            "checktype": "advance",            "details": "No portforwarding rules provided to check, skipping",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "loadbalancing.service",            "checktype": "basic",            "details": "service is running",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          },          {            "checkname": "memory_usage_check.py",            "checktype": "basic",            "details": "Memory Usage within limits with current at 23.704%",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          },          {            "checkname": "router_version_check.py",            "checktype": "basic",            "details": "Template and scripts version match successful",            "lastupdated": "2019-12-16T15:12:41+0530",            "success": true          },          {            "checkname": "ssh.service",            "checktype": "basic",            "details": "service is running",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          },          {            "checkname": "webserver.service",            "checktype": "basic",            "details": "service is running",            "lastupdated": "2019-12-16T15:12:38+0530",            "success": true          }        ],        "healthchecksfailed": false,        "id": "920452d6-7951-4425-ba2c-aecb2ddaaf6b"      }    ]  }  ```  And added new API - getRouterHealthCheckResults-  ```  (local)  > get routerhealthcheckresults routerid="920452d6-7951-4425-ba2c-aecb2ddaaf6b  " performfreshchecks=true   {    "routerhealthchecks": {      "healthchecks": [        {          "checkname": "connectivity.test",          "checktype": "basic",          "details": "Successfully fetched data",          "lastupdated": "2019-12-16T15:19:47+0530",          "success": true        },        {          "checkname": "cpu_usage_check.py",          "checktype": "basic",          "details": "CPU Usage within limits with current at 2.4%",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        },        {          "checkname": "dhcp.service",          "checktype": "basic",          "details": "service is running",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        },        {          "checkname": "dhcp_check.py",          "checktype": "advanced",          "details": "All 1 VMs are present in dhcphosts.txt",          "lastupdated": "2019-12-16T15:19:47+0530",          "success": true        },        {          "checkname": "disk_space_check.py",          "checktype": "basic",          "details": "Sufficient free space is 345 MB",          "lastupdated": "2019-12-16T15:19:46+0530",          "success": true        },        {          "checkname": "dns_check.py",          "checktype": "advanced",          "details": "All 1 VMs are present in /etc/hosts",          "lastupdated": "2019-12-16T15:19:47+0530",          "success": true        },        {          "checkname": "gateways_check.py",          "checktype": "basic",          "details": "All 1 gateways are reachable via ping",          "lastupdated": "2019-12-16T15:19:46+0530",          "success": true        },        {          "checkname": "haproxy_check.py",          "checktype": "advanced",          "details": "No data provided to check, skipping",          "lastupdated": "2019-12-16T15:19:47+0530",          "success": true        },        {          "checkname": "iptables_check.py",          "checktype": "advanced",          "details": "No portforwarding rules provided to check, skipping",          "lastupdated": "2019-12-16T15:19:47+0530",          "success": true        },        {          "checkname": "loadbalancing.service",          "checktype": "basic",          "details": "service is running",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        },        {          "checkname": "memory_usage_check.py",          "checktype": "basic",          "details": "Memory Usage within limits with current at 23.8486%",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        },        {          "checkname": "router_version_check.py",          "checktype": "basic",          "details": "Template and scripts version match successful",          "lastupdated": "2019-12-16T15:19:46+0530",          "success": true        },        {          "checkname": "ssh.service",          "checktype": "basic",          "details": "service is running",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        },        {          "checkname": "webserver.service",          "checktype": "basic",          "details": "service is running",          "lastupdated": "2019-12-16T15:19:43+0530",          "success": true        }      ],      "routerid  ": "920452d6-7951-4425-ba2c-aecb2ddaaf6b"    }  }  ```
https://github.com/apache/curator/pull/262	2	\N	2018-04-12 01:56:43	[CURATOR-460] Timed tolerance for connection suspended leads to simultaneous leaders	
https://github.com/apache/cxf/pull/740	2	\N	2021-02-23 11:06:27	Fix typos "doesnt" -> "doesn't".	
https://github.com/apache/drill/pull/2489	5	\N	2022-03-11 21:23:33	DRILL-8162: Add OpenAPI Specification documentation for Drill's REST API	# [DRILL-8162](https://issues.apache.org/jira/browse/DRILL-8162): Add OpenAPI Specification documentation for Drill's REST API    ## Description    Used Swagger Core to produce an OpenAPI specification for Drill's REST API. One can access it in JSON format by going to `localhost:8047/openapi.json` after starting Drill.   Also, added an HTML script to produce the Swagger UI when one visits `localhost:8047/static/swagger-ui.html`.  Used Swagger annotations to populate the Swagger UI with the relevant information, including links to documentation on [https://drill.apache.org/docs/](https://drill.apache.org/docs/). More information can be added via additional annotations.    ## Documentation    One can visit `localhost:8047/openapi.json` after starting Drill to find an OpenAPI specification for Drill's REST API. One can also visit `localhost:8047/static/swagger-ui.html` after starting Drill to find the Swagger UI, which clearly displays the endpoints for the REST API with their descriptions and/or links to external docs.     ## Testing    Started Drill and visited the links above.
https://github.com/apache/flink/pull/11353	30	\N	2020-04-25 20:30:03	[FLINK-16438][yarn] Make YarnResourceManager starts workers using WorkerResourceSpec requested by SlotManager	## What is the purpose of the change    This PR is one step of FLINK-14106, making `YarnResourceManager` starts workers using `WorkerResourceSpec` requested by `SlotManager`.    This also means `YarnResourceManager` no longer:  - be aware of the default task executor resources  - assumes all workers are identical    This PR is based on #11323.    ## Brief change log  - 5ee2a8ece3eefb4726618ed31a05a2e11737b57a..d7a0626255f2445cfe20dcb7bab1aede3af4b0d7: Commits from previous PR.  - 2f2053259d86240c56ad4498eadae237ab30e979..4e214f940b187704d0599b15380b78094b7ad7a8: Refactoring `YarnResourceManagerTest`, getting rid of using of `Mockito`.  - ef959ec03f964ceb0664388b4b72c8eac5773fbd: Introduce `WorkerSpecContainerResourceAdapter` for converting between Flink `WorkerResourceSpec` and Yarn container `Resource` in `YarnResourceManager`.    - This is to address the problem that resource of containers allocated from Yarn can differs from what were requested.  - 785558f7c2944cb50e57e191a242c5e981ab42b7: `YarnResourceManager` starts workers with resources requested by `SlotManager`.  - 0c5eb8c3d46d2142f9dd64acfaba9d27102ad3f2: Remove unused `TaskExecutorProcessSpec` from `ActiveResourceManager`.    ## Verifying this change    Added test cases in `YarnResourceManagerTest`, for:  - Validating behaviors of `WorkerSpecContainerResourceAdapter`.  - Validating `YarnResourceManager` dealing with workers with different resources.    ## Does this pull request potentially affect one of the following parts:      - Dependencies (does it add or upgrade a dependency): (no)    - The public API, i.e., is any changed class annotated with `@Public(Evolving)`: (no)    - The serializers: (no)    - The runtime per-record code paths (performance sensitive): (no)    - Anything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes)    - The S3 file system connector: (no)    ## Documentation      - Does this pull request introduce a new feature? (no)    - If yes, how is the feature documented? (not applicable)  
https://github.com/apache/flink/pull/16464	8	\N	2021-07-15 09:24:11	[FLINK-21928][clients] JobManager failover should success, when tryin 	## What is the purpose of the change    * https://issues.apache.org/jira/browse/FLINK-21928  * Success in case of DuplicateJobSubmission in application mode for already terminated job.    ## Brief change log    - *DuplicateJobSubmissionException* knows whether duplicate is terminated or running  - Application mode treats DuplicateJobSubmissionException as sucess in HA mode, if duplicate is already terminated     ## Verifying this change    Added new tests for Dispatcher and ApplicationDispatcherBootstrap.    ## Does this pull request potentially affect one of the following parts:      - Anything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn, ZooKeeper: (yes)    ## Documentation      - Does this pull request introduce a new feature? (no)    - If yes, how is the feature documented? (not applicable)  
https://github.com/apache/geode/pull/7124	5	\N	2022-01-11 23:53:57	GEODE-9815: Prefer to remove a redundant copy in the same zone	Just testing the changes against the pipeline at this point.
https://github.com/apache/hudi/pull/2900	2	\N	2021-05-01 11:13:16	[HUDI-1781] Fix Flink streaming reader throws ClassCastException	## *Tips*  - *Thank you very much for contributing to Apache Hudi.*  - *Please review https://hudi.apache.org/contributing.html before opening a pull request.*    ## What is the purpose of the pull request    *Fix Flink streaming reader throws ClassCastException when reading from empty table path*    ## Brief change log      - *Change force cast to if clause*    ## Verify this pull request    This pull request is already covered by existing tests*.    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/ozone/pull/1838	1	\N	2021-01-29 10:08:39	HDDS-4736. Intermittent failure in testExpiredCertificate	## What changes were proposed in this pull request?    - Set the token expiration to a past time.    ## What is the link to the Apache JIRA    https://issues.apache.org/jira/browse/HDDS-4736    ## How was this patch tested?    Manual test.  
https://github.com/apache/shiro/pull/255	1	\N	2020-09-03 19:18:06	[SHIRO-792] Add name to ShiroFilter's @ConditionalOnMissingBean	This PR closes [SHIRO-792](https://issues.apache.org/jira/browse/SHIRO-792). As agreed in the issue discussion, it adds a `name` element to the `@ConditionalOnMissingBean` annotation of `org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration.filterShiroFilterRegistrationBean()`. It also sets the name of the registered filter to `shiroFilter`.    Following this checklist to help us incorporate your contribution quickly and easily:     - [x] Make sure there is a [JIRA issue](https://issues.apache.org/jira/browse/SHIRO) filed          for the change (usually before you start working on it).  Trivial changes like typos do not          require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.   - [x] Each commit in the pull request should have a meaningful subject line and body.   - [x] Format the pull request title like `[SHIRO-XXX] - Fixes bug in SessionManager`,         where you replace `SHIRO-XXX` with the appropriate JIRA issue. Best practice         is to use the JIRA issue title in the pull request title and in the first line of the commit message.   - [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.   - [x] Run `mvn clean install apache-rat:check` to make sure basic checks pass. A more thorough check will be performed on your pull request automatically.   - [x] If you have a group of commits related to the same change, please squash your commits into one and force push your branch using `git rebase -i`. N/A     Trivial changes like typos do not require a JIRA issue (javadoc, comments...).   In this case, just format the pull request title like `(DOC) - Add javadoc in SessionManager`.     If this is your first contribution, you have to read the [Contribution Guidelines](https://github.com/apache/shiro/blob/master/CONTRIBUTING.md)    If your pull request is about ~20 lines of code you don't need to sign an [Individual Contributor License Agreement](https://www.apache.org/licenses/icla.pdf)   if you are unsure please ask on the developers list.    To make clear that you license your contribution under the [Apache License Version 2.0, January 2004](http://www.apache.org/licenses/LICENSE-2.0)  you have to acknowledge this by using the following check-box.     - [x] I hereby declare this contribution to be licenced under the [Apache License Version 2.0, January 2004](http://www.apache.org/licenses/LICENSE-2.0)   - [x] In any other case, please file an [Apache Individual Contributor License Agreement](https://www.apache.org/licenses/icla.pdf).    
https://github.com/apache/storm/pull/3318	20	\N	2020-08-06 14:47:51	[STORM-3670] Separate configurations for daemon metric reporters and topology metrics reporters	  ## What is the purpose of the change    The configuration system on metrics reporters is messy. This PR cleans up configs and separate them as topology worker metrics vs daemon metrics.    ## How was the change tested    1. Add unit tests    2. Tested daemon metric reporters on nimbus with `ConsolePreparableReporter` and `CsvPreparableReporter` to make sure daemon metric reporters still work properly    `CsvPreparableReporter`:  ```  -bash-4.2$ ls -ltrh /home/y/var/storm/csvmetrics/ |tail  -rw-r--r-- 1 xx yy  494 Aug  4 02:01 nimbus:num-uploadChunk-calls.csv  -rw-r--r-- 1 xx yy  494 Aug  4 02:01 nimbus:num-submitTopologyWithOpts-calls.csv  ...  ```  `ConsolePreparableReporter`:  ```  8/4/20 1:49:01 AM ==============================================================  -- Gauges ----------------------------------------------------------------------  MetricsCleaner:purgeTimestamp  value = 0  nimbus:available-cpu-non-negative  value = 400.0  ```    3. Tested worker metric reporters, for example, with this configuration     ```  topology.metrics.reporters:    - class: "org.apache.storm.metrics2.reporters.ConsoleStormReporter"      report.period: 10      report.period.units: "SECONDS"      rate.unit: "SECONDS"      locale: "en-US"    - class: "org.apache.storm.metrics2.reporters.CsvStormReporter"      report.period: 10      report.period.units: "SECONDS"      rate.unit: "SECONDS"      locale: "en-US"      csv.log.dir: "./"  ```  `ConsoleStormReporter`:  ```  2020-08-04 02:33:17.738 c.c.m.ConsoleReporter metrics-console-reporter-1-thread-1 [INFO] -- Counters --------------------------------------------------------------------  2020-08-04 02:33:17.738 c.c.m.ConsoleReporter metrics-console-reporter-1-thread-1 [INFO] storm.worker.wc13-4-1596508362.hostname.count.default.2.6701-acked  2020-08-04 02:33:17.738 c.c.m.ConsoleReporter metrics-console-reporter-1-thread-1 [INFO]              count = 840  ```  `CsvStormReporter`:  ```  -bash-4.2$ sudo ls -l /home/y/var/storm/workers/4d6259dc-ea7c-4048-a44d-be69adceecdd |tail -f  -rw-r----- 1 xx yy   143 Aug  4 02:34 storm.worker.wc13-4-1596508362.hostname.__system.3.6701-receive-queue-sojourn_time_ms.csv  -rw-r----- 1 xx yy   175 Aug  4 02:34 storm.worker.wc13-4-1596508362.hostname.__system.4.6701-receive-queue-arrival_rate_secs.csv  ```  
https://github.com/AxonFramework/AxonFramework/pull/776	6	\N	2019-01-23 13:34:18	Java 8 friendly	Hi.  My first PR on Github. Please be kind :-)    I'd like to help on Reactor integration.  I thought making some minor improvements on the project could help me better understand how it is organized.    Are you interested in that kind of "upgrade". I've only looked at core>commandhandling package so far but i can go on if you like.    Cheers,        
https://github.com/AxonFramework/AxonFramework/pull/966	1	\N	2019-02-21 12:19:02	QuartzDeadlineManager doesn't retry job execution in case of failure	This PR resolves #965
https://github.com/AxonFramework/AxonFramework/pull/969	32	\N	2019-02-15 17:07:17	Allow TrackingEventProcessor segments to be split and merged	First implementation of the split and merge API for the `TrackingEventProcessor`.
https://github.com/AxonFramework/AxonFramework/pull/1250	12	\N	2019-10-23 13:22:38	Heartbeat Implementation Improvements	This PR introduces the axon framework version sent to AxonServer into the ClientIndentification message. The implementation tries to get the version first of all from maven metadata of axon-server-connector jar, and as a fallback from the environment variables. If the version cannot be resolved, it is used an empty string to represent an unknown version.    This PR builds on top of #1237
https://github.com/AxonFramework/AxonFramework/pull/2275	5	\N	2022-07-07 15:40:34	Process events with identical `TrackingToken` together in the `PooledStreamingEventProcessor`	This pull request can be regarded as a follow up for #2067, doing it right this time.  Pull request #2067 introduced an issue where one failing segment (read: `WorkPackage`) somewhere in the middle of the stream would cause the other segments to pick up the last event again.  This was in essence the issue of the `Coordinator`, as it would reset the event stream to the failing segment once it got picked up again.  Due to this, the stream was traversed again, causing the last handled event by all other segments to be scheduled again.  This scenario, followed by the `WorkPackage` accepting an event with an identical token (as introduced in PR #2067) caused duplicate handling of the last event.    This pull request resolves this predicament by very consciously moving into a different processing branch for event scheduling if subsequent events are present with the same token.  The `Coordinator` ensure they're grouped into a collection and provided together.  The `WorkPackage` will in turn group them to process them within the same batch.    The changes are accompanied by unit tests and an integration test to validate the correct process.
https://github.com/azkaban/azkaban/pull/2500	36	\N	2020-04-29 19:44:14	1. Adding More Tests 2. BugFix for SimpleRampPolicy 3. Refine Code	
https://github.com/broadinstitute/picard/pull/1823	5	\N	2022-09-08 14:46:01	Allow explicit index file paths for inputs to CrosscheckFingerprints	### Description    This PR addresses an issue regarding data storage solutions where indexed files can be separated from their indices. CrosscheckFingerprints will now allow for an `INPUT_INDEX_MAP` tsv file with two columns: the first being the list of input files, and the latter being the corresponding index file locations. One can also do the same for the `SECOND_INPUT` arguments using `SECOND_INPUT_INDEX_MAP`.     Some tests have been added to test this functionality. This involved copying some test files into a separate dir from index files which were generated in a different directory. The test generates the `INPUT_INDEX_MAP` file on the fly so as to not rely on any absolute file paths.     Although the tool still runs if an index is not provided, a new warning will be written if providing an index map without mapping each input to an index. If an index file path is typed incorrectly in the map, an error should be thrown by some dependency classes about not being able to import a valid index from the given path.     ----    ### Checklist    #### Content  - [X] Added or modified tests to cover changes and any new functionality  - [X] Edited the README / documentation (if applicable)  - [x] All tests passing on Travis    #### Review  - [x] Final thumbs-up from reviewer  - [x] Rebase, squash and reword as applicable
https://github.com/cgeo/cgeo/pull/7629	69	\N	2019-06-03 18:33:00	use lambda functions for Schedulers.io()	As proposed in https://github.com/cgeo/cgeo/pull/7611#discussion_r285342082 this is a separate PR to make use of lambda functions for `Schedulers.io()`.
https://github.com/checkstyle/checkstyle/pull/8836	4	\N	2020-09-25 13:59:07	Issue #8808: false positive with JavadocTypeCheck @param tags for Records	Issue #8808: false positive with JavadocTypeCheck @param tags for Records    Note that the changes in commit https://github.com/checkstyle/checkstyle/commit/df1ae95a1c114ecfd6402781668639cdd6593457 correspond to the following code:    ```  /** @param x */  class Test {}  ```  ```  /**   * InputJavadocTypeUnusedParamInJavadocForClass.   *   * @param BAD This is bad.   * @param  BAD> This doesn't exist.   * @param   */  public class InputJavadocTypeUnusedParamInJavadocForClass {  }    ```  In both of these cases, the check was adding the angle brackets to the output, assuming that they were for type parameters.  Now that the `@param` tag is overloaded for use with record components, there is no way to know the intent of an unused `@param` tag, so it is best to remove these angle brackets.  In any event, the original behavior of the check wasn't optimal anyway, since we really shouldn't be adding characters that don't exist to output.     Diff Regression projects: https://gist.githubusercontent.com/nmancus1/e3988f8092d919b5cbe70f5359c4d9e8/raw/a0f6f5860f8025c19868061dee6e0e40960b992f/projects-to-test-on.properties    Diff Regression config: https://gist.githubusercontent.com/nmancus1/6e4314ef4f509d6ed5c7e0f59dfc3662/raw/93862649e0dce3fdced263cf3156f96b01ba6a59/JavadocType.xml
https://github.com/checkstyle/checkstyle/pull/8984	4	\N	2020-11-17 18:55:49	Fix EmptyLineSeparator for multiple single type variables on line	Closes #8957    Diff Regression projects: https://gist.githubusercontent.com/strkkk/5eb3b0069ecd438af73bf045c24a855c/raw/d568ee6c30a91e3f721c37b4883ef3264b6203b7/all-projects  Diff Regression config: https://gist.githubusercontent.com/strkkk/bf10f326cacdf50f8cb67f0023cd972b/raw/0dffdf53db3b7cfd7f57c88618fe871f4f779adf/lambda_body.xml
https://github.com/confluentinc/schema-registry/pull/1297	1	\N	2020-01-29 23:08:25	Fixes #1134: Add non-AVRO Int and Long key support	Enables non-avro 8-byte Long and 4-byte Int types for keys using corresponding serializers.    Addresses:    https://github.com/confluentinc/schema-registry/issues/1134  https://issues.apache.org/jira/browse/KAFKA-2526    To enable use cli options like:  --property key.serializer=org.apache.kafka.common.serialization.LongSerializer      -------------------------------------------------------------------------------------------------------  If you find this PR useful, consider supporting it with a $9/mo sponsorship at:  https://github.com/sponsors/rudi-cilibrasi  
https://github.com/eclipse/jkube/pull/1198	2	\N	2022-01-10 11:47:19	feat(gradle-plugin): log informative message when gradle jkube tasks are skipped #1142	## Description  part of https://github.com/eclipse/jkube/issues/1142    ## Type of change    -  What types of changes does your code introduce? Put an `x` in all the boxes that apply      - [ ] Bug fix (non-breaking change which fixes an issue)   - [x] Feature (non-breaking change which adds functionality)   - [ ] Breaking change (fix or feature that would cause existing functionality to change   - [ ] Chore (non-breaking change which doesn't affect codebase;     test, version modification, documentation, etc.)    ## Checklist   - [x] I have read the [contributing guidelines](https://www.eclipse.org/jkube/contributing)   - [x] I signed-off my commit with a user that has signed the [Eclipse Contributor Agreement](https://www.eclipse.org/legal/ECA.php)   - [ ] I Added [CHANGELOG](../CHANGELOG.md) entry   - [x] I have implemented unit tests to cover my changes   - [ ] I have updated the [documentation](../kubernetes-maven-plugin/doc) accordingly   - [ ] No new bugs, code smells, etc. in [SonarCloud](https://sonarcloud.io/dashboard?id=jkubeio_jkube) report   - [ ] I tested my code in Kubernetes   - [ ] I tested my code in OpenShift        Integration tests (https://github.com/jkubeio/jkube-integration-tests)  Please check integration tests and provide/improve tests if necessary.    Open your PR in Draft mode and verify all of the applicable Checklist items before marking your issue as ready   
https://github.com/ehcache/ehcache3/pull/2174	38	\N	2017-12-14 15:13:17	Add write and connection timeouts to the API	Some thoughts:  - Should we add convenience methods taking the builder in parameter instead of `Timeouts`?  - We are now using ChronoUnit and TimeUnit in our API. I think some will disappear because of #2166  - I've tried to keep deprecated methods to keep compatibility. Do we need to in this case?  - I'm not a big fan of mutative as a naming. We use write timeout in general. It's not as accurate but more classic and prettier. WDYT?
https://github.com/elastic/elasticsearch/pull/33933	2	\N	2018-10-01 18:49:09	Disallow "enabled" attribute change for types in mapping update (#33566)	This commit adds a check for `enabled` attribute change for types when a `RestPutMappingAction` is received. A `MappingException` is thrown when such a change is detected.    Change are prevented in both ways: `false` to `true` and `true` to `false`.    Here is a sample cURL output:    ```  {    "error": {      "root_cause": [        {          "type": "mapper_exception",          "reason": "Can't update attribute for type [type1.foo.enabled] in index mapping"        }      ],      "type": "mapper_exception",      "reason": "Can't update attribute for type [type1.foo.enabled] in index mapping"    },    "status": 500  }  ```    Tests are not part of this commit, they will be developed after design validation.
https://github.com/elastic/elasticsearch/pull/34184	15	\N	2019-01-07 16:12:59	Separate out validation of groups of settings	This pull request allows a setting to be validated against target settings to ensure runtime dependencies are met (e.g. disk watermarks `low`, `high` and `flood_stage`).    This pull request also includes a fix to not update settings when no value has changed.
https://github.com/forcedotcom/SalesforceMobileSDK-Android/pull/2319	3	\N	2022-05-25 23:51:52	Fixing last error to be the same as in 10.0	
https://github.com/gdg-x/frisbee/pull/647	5	\N	2016-09-21 23:19:30	Endless Scrolling	Add 'Endless Scrolling' to the GDG Events Fragment on the Main Activity. 
https://github.com/geoserver/geoserver/pull/5969	5	\N	2022-06-20 07:48:43	[GEOS-10548] GeoFence layer group handling is inconsistent	[![GEOS-10548](https://badgen.net/badge/JIRA/GEOS-10548/0052CC)](https://osgeo-org.atlassian.net/browse/GEOS-10548)   PR-BADGE: PLEASE DO NOT REMOVE THIS COMMENT      Include a few sentences describing the overall goals for this Pull Request          Please help our volunteers reviewing this PR by completing the following items.   Ask in a comment if you have troubles with any of them.      This pr fix GeoFence behaviour when dealing with layer groups. This code changes allow the following handling:  When a LayerGroup is requested:    * a limit applied to the layer groups (allowed area or grant type) will be applied to all the contained layers.  * if the access rule a contained layer is denying the access to the layer for the user requesting group, the layer will not be present in the output.  * if the access rule of the layer has limits on its own, they will be merged in a restrictive way (intersection) with the one of the layer group if both the limits have been defined for the same role.  * if the access rule of the layer has limits on its own, they will be merged in a permissive way (union) with the one of the layer group if both the limits have been defined for the different roles.    When a layer contained in one or more layer group is directly accessed in the context of a WMS request, the following rules apply:    * If any of the layer groups containing the requested resource has mode **SINGLE** no limits eventually defined for any of the layer groups will be applied.    * If all the layer groups containing the requested resource have mode **OPAQUE**, the layer will not be visible.    * If all the layer groups containing the resource has mode different from **SINGLE** and **OPAQUE**, the layer groups limits will be applied and merged with the one defined for the resource if present. For each layer group, the limits will be merged in a restrictive way with the ones defined for the resource if the rule was defined for the same role. On the contrary the limits will be merged with an enlargement logic, if coming from rules defined for different roles.    # Checklist    - [x] I have read the [contribution guidelines](https://github.com/geoserver/geoserver/blob/main/CONTRIBUTING.md).  - [x] I have sent a [Contribution Licence Agreement](https://docs.geoserver.org/latest/en/developer/policies/committing.html) (not required for small changes, e.g., fixing typos in documentation).  - [x] First PR targets the `main` branch (backports managed later; ignore for branch specific issues).  - [x] All the build checks are green ([see automated QA checks](https://docs.geoserver.org/latest/en/developer/qa-guide/index.html)).    For core and extension modules:    - [x] New unit tests have been added covering the changes.  - [x] [Documentation](https://github.com/geoserver/geoserver/tree/main/doc/en/user/source) has been updated (if change is visible to end users).  - [ ] The [REST API docs](https://github.com/geoserver/geoserver/tree/main/doc/en/api/1.0.0) have been updated (when changing configuration objects or the REST controllers).  - [x] There is an issue in the [GeoServer Jira](https://osgeo-org.atlassian.net/browse/GEOS/summary) (except for changes that do not affect administrators or end users in any way).  - [x] Commit message(s) must be in the form ``[GEOS-XYZWV] Title of the Jira ticket``.  - [x] Bug fixes and small new features are presented as a single commit.  - [x] Each commit has a single objective (if there are multiple commits, each has a separate JIRA ticket describing its goal).      Submitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or not applicable. 
https://github.com/gradle/gradle/pull/14636	7	\N	2020-09-29 14:19:15	Rename method for clarity	Renamed `DependendencySubstitutions.hasRules` to `.rulesMayAddProjectDependency`,  since this better reflects the method intent. Hopefully this will add a little  clarity to this often misunderstood area of functionality.  
https://github.com/gradle/gradle/pull/15043	36	\N	2020-11-13 10:59:07	Snapshot visitor improvements	
https://github.com/gradle/gradle/pull/22047	21	\N	2022-09-20 11:13:50	Improve and document UnitOfWork	Followup to https://github.com/gradle/gradle/pull/22025.  Replacement of botched https://github.com/gradle/gradle/pull/22034.    Some name changes for better understandability and some additional Javadocs.
https://github.com/Graylog2/graylog2-server/pull/12514	16	\N	2022-04-27 06:11:36	Map query tokens to subqueries	The lucene query parser doesn't provide any connection between parsed (sub)queries and tokens used. This PR adds such a connection, which is later used to map key and value tokens, used for validation highlighting in queries.       ## Motivation and Context  Fixes https://github.com/Graylog2/graylog-plugin-enterprise/issues/3491    ## How Has This Been Tested?  It's refactoring, relies on existing tests covering the functionality.    ## Screenshots (if appropriate):    For the query `timestamp:$param$ OR $param$ AND something` the assignments are:    ```  Query timestamp:param(TermQuery) contains following tokens: timestamp,:,$param$,OR  Query _default_:param(TermQuery) contains following tokens: $param$,AND  Query _default_:something(TermQuery) contains following tokens: something  ```  and after substitution (param=aaaa):    ```  Query timestamp:aaaa(TermQuery) contains following tokens: timestamp,:,aaaa,OR  Query _default_:aaaa(TermQuery) contains following tokens: aaaa,AND  Query _default_:something(TermQuery) contains following tokens: something,  ```    Note that due to the (not ideal) integration with existing lucene query parser, the tokens contain also AND/OR operators. This isn't problematic now for our usage, just wanted to mention that it's known and expected now.    ![image](https://user-images.githubusercontent.com/4102775/165037714-ffcc17bc-4a63-4981-85ba-e2c7473ce97c.png)      ## Types of changes    - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [x] Bug fix (non-breaking change which fixes an issue)  - [ ] New feature (non-breaking change which adds functionality)  - [x] Refactoring (non-breaking change)  - [ ] Breaking change (fix or feature that would cause existing functionality to change)    ## Checklist:    - Go over all the following points, and put an `x` in all the boxes that apply.      - If you're unsure about any of these, don't hesitate to ask. We're here to help!    - [x] My code follows the code style of this project.  - [ ] My change requires a change to the documentation.  - [ ] I have updated the documentation accordingly.  - [x] I have read the **CONTRIBUTING** document.  - [ ] I have added tests to cover my changes.    
https://github.com/Graylog2/graylog2-server/pull/13954	2	\N	2022-11-16 11:21:33	Check if field is present in document when aggregating.	## Description    - Describe your changes in detail      ## Motivation and Context    - Why is this change required? What problem does it solve?      - If it fixes an open issue, please link to the issue here.      This PR is fixing an issue with the scripted terms aggregation we are generating. When multiple indices are involved, one (or more) might lack the field mapping for one (or more) of the pivot fields involved. This results in an exception like this one:    ```  Elasticsearch exception [type=illegal_argument_exception, reason=No field found for [took_ms_int] in mapping with types []]  ```    This PR is now adding a check (`doc.containsKey('field')`) for the field presence in the current document to avoid this.    /nocl  ## How Has This Been Tested?    - Please describe in detail how you tested your changes.      - Include details of your testing environment, and the tests you ran to      - see how your change affects other areas of the code, etc.      ## Screenshots (if appropriate):    ## Types of changes    - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [x] Bug fix (non-breaking change which fixes an issue)  - [ ] New feature (non-breaking change which adds functionality)  - [ ] Refactoring (non-breaking change)  - [ ] Breaking change (fix or feature that would cause existing functionality to change)    ## Checklist:    - Go over all the following points, and put an `x` in all the boxes that apply.      - If you're unsure about any of these, don't hesitate to ask. We're here to help!    - [x] My code follows the code style of this project.  - [ ] My change requires a change to the documentation.  - [ ] I have updated the documentation accordingly.  - [x] I have read the **CONTRIBUTING** document.  - [ ] I have added tests to cover my changes.
https://github.com/grpc/grpc-java/pull/4594	1	\N	2018-06-29 16:49:24	util: Improve RoundRobinLoadBalancer scalability with stickiness	- Rework stickiness picker logic to be non-blocking  - Stash `Subchannel` ref in an attribute rather than dedicated map    Possibly controversial:  - Stash constant/immutable `PickResult` in `Subchannel` attribute to avoid identical allocation on every rpc
https://github.com/grpc/grpc-java/pull/4607	2	\N	2018-09-12 22:06:46	Remove redundant SubchannelPicker refreshes in RoundRobinLoadBalancer	The "active" list and corresponding circular index used by `RoundRobinLoadBalancer`'s picker is currently refreshed via a call to `helper.updateBalancingState()` after _any_ change to a Subchannel's state or the resolved address groups, regardless of whether that change actually results in a change to the contents of the list.    In fact it appears that the _majority_ of Picker refreshes may be no-ops - for example any time a new EAG is discovered while there are already active Subchannels, its new Subchannel is added in `IDLE` state followed by an immediate Picker refresh which will be unnecessary because the list only contains `READY` Subchannels. A similar pattern occurs during Subchannel removal/shutdown.    These avoidable perturbations to the load distribution may be exacerbating the behaviour described in https://github.com/grpc/grpc-java/pull/4462.    This PR makes changes to ensure this doesn't happen, and includes:  - Making it so that a Subchannel exists in the `subchannels` map if and only if its state is not `SHUTDOWN`. This also facilitates a simplification to the stickiness picker logic where list containment no longer needs to be checked when (re)registering a stickiness value.  - Adding an `EmptyPicker` class, since the picker parameters and logic are disjoint from the non-empty case
https://github.com/grpc/grpc-java/pull/8326	2	\N	2021-07-15 02:37:25	xds: add hint of fault injection to injected failures	
https://github.com/grpc/grpc-java/pull/9390	2	\N	2022-07-21 18:41:03	rls: Change AdaptiveThrottler to use Ticker instead of TimeProvider	Ticker is based on System.nanoTime, so isn't affected by updates to the system clock like TimeProvider is.    Fixes #9048 
https://github.com/HubSpot/jinjava/pull/285	2	\N	2019-05-03 12:34:00	Use constants for token start/end symbols	I forgot to include this change in my previous PR: https://github.com/HubSpot/jinjava/pull/282
https://github.com/iluwatar/java-design-patterns/pull/589	1	\N	2017-06-14 17:19:44	Refactored the Functional Interface to the Specialized Primitive Functional Interface 	Hello,    I am a graduate student at Oregon State University and as a part of my research and subject CS562 Applied Software Engineering project (Study and Refactoring of Functional Interface in Java), I have done refactoring of the functional interface namely:    > BiFunction Integer,Integer,Integer>   IntBinaryOperator    My project and research deals with the boxing and unboxing of Wrapper Class and the primitive data-types. I want to know that whether the open source community is ready to accept these micro-optimizing refactoring or not.    Thank you,  Harsh Thakor
https://github.com/iluwatar/java-design-patterns/pull/1475	9	\N	2020-08-05 14:59:52	Use enums instead os switch blocks	Its better to use enums instead of switch  blocks which makes the code longer and difficult  to maintain as and when new state appears.    Instead of using switch cases to decide the weathertype  we can initialize enums with the weathertype description  and use that description to print in the logs.  
https://github.com/jenkinsci/git-plugin/pull/931	9	\N	2020-08-25 02:19:58	[GSoC-2020] Git Repository Size Estimation	## GitToolChooser    **Description**: This class aims to add the functionality of recommending a git implementation on the basis of the size of a repository which has a strong correlation to the performance of git fetch (from Performance Benchmarks).    We have two heuristics to calculate the size of a git repository:  - Using cached .git dir to estimate the size of a repository  - Providing an extension point which upon implementation can use APIs exposed by git service providers like Github, GitLab etc to fetch `size` of repo.    **How are we doing this?**  - The class can instantiate using a constructor which checks if cache exists and calculates the size if it does. Else, it checks if we have an implementation(s) for the extension point provided by the class.  - Currently, the GitToolChooser is planning to be supported by the Github branch source plugin, Gitlab branch source plugin and the Gitea branch source plugin.    **Assumptions**:   - We believe that the implementers of the extension point have the user credentials in order to query size of a repository on the basis of its URL.  - We are instantiating `GitToolChooser` using an instance of `AbstractGitSCMSource`just as the `GitSCMTelescope` does.   - This scope of usage of this API is not limited to the AbstractGitSCMSource, it can be used in other places provided we have the repository url.    **Architecture Diagram**   img width="829" alt="Screenshot 2020-07-29 at 1 47 41 AM" src="https://user-images.githubusercontent.com/31189405/88717186-c4039200-d13d-11ea-9321-98b4b7266156.png">      ## Checklist    - [x] I have read the [CONTRIBUTING](https://github.com/jenkinsci/git-plugin/blob/master/CONTRIBUTING.adoc) doc  - [ ] I have referenced the Jira issue related to my changes in one or more commit messages  - [x] I have added tests that verify my changes  - [x] Unit tests pass locally with my changes  - [x] I have added documentation as necessary  - [ ] No Javadoc warnings were introduced with my changes  - [ ] No spotbugs warnings were introduced with my changes  - [ ] Documentation in README has been updated as necessary  - [ ] Online help has been added and reviewed for any new or modified fields  - [ ] I have interactively tested my changes  - [ ] Any dependent changes have been merged and published in upstream modules (like git-client-plugin)    ## Types of changes    - [ ] Dependency or infrastructure update  - [ ] Bug fix (non-breaking change which fixes an issue)  - [x] New feature (non-breaking change which adds functionality)  - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)    ## Further comments    To avoid issues with the existing functionality of the plugin, we have used the exact same logic to resolve git tool before making a recommendation as is provided by `GitUtils.resolveGitTool`.
https://github.com/jenkinsci/google-compute-engine-plugin/pull/60	12	\N	2019-04-17 19:49:28	Parallelized Integration Tests	Since my previous PR #55 I've created test classes for all of the expensive integration tests. Here are some things in particular to note:    1. I removed parallel method execution from the integration tests for the following reasons:      - When running the tests in parallel, the logging output that ends up in the failsafe-reports directory is mostly empty (i.e. the only thing in the output.txt file for multiple tests is "Stopping Jenkins"). Disabling parallel methods makes these much more complete.      - The test methods are still independent of each other otherwise.       - With the way most setup is in the @BeforeClass init method for each IT, there is very little to be gained in time saved by running these actual test methods in parallel.  2. Testing that the snapshot was created is the longest process to test, and brings the amount of time to execute the tests on my system from ~2 minutes to ~3 minutes.  3. Now that it's basically empty, I converted the ComputeEngineCloudIT to the ComputeClientIT with just one test and re-enabled that test.  4. There are probably ways to consolidate some of the repeated setup logic in each class but I haven't pursued this yet.  5. These changes don't cover the windows integration tests. I think this is already too big of a PR, and I'd rather make that a separate change.  
https://github.com/jenkinsci/google-kubernetes-engine-plugin/pull/12	6	\N	2019-02-21 18:54:53	[Incremental] JENKINS-55523: Make Cluster Name a dropdown and autofill available cluster.	I'm glad I finished #11 before this because that made this change a lot less complicated, especially when it comes to testing.    With how it works now, the happy path is that the user chooses a credential, which causes the default project id to be chosen automatically, which causes the first available zone to be chosen automatically. It doesn't seem to filter this down to zones where the user has resources at the moment, but if the user then selects the correct zone, the first available cluster name is selected.    Assigned myself to the TODO for verification which will come in the next PR.
https://github.com/kermitt2/grobid/pull/558	4	\N	2020-04-08 19:19:28	avoid OutOfBoundException when the output from delft is truncated	This patch makes grobid more robust when the delft sequences are truncated to a size lower than the input. If this happens, the output labels are defaulted to ` other>`.    See discussion on https://github.com/kermitt2/delft/pull/97 
https://github.com/MinecraftForge/MinecraftForge/pull/3805	2	\N	2017-04-07 23:59:21	Add Item.canDestroyBlocksInCreative() to override vanilla sword hardcode	As title tells, vanilla sword can't destroy blocks when player is in creative gamemode, and this feature is hardcoded. Would be nice to have it for custom items like ones which should interact with entities via both RMB and LMB without accidentally damaging the blocks in _any_ gamemode.     My real example: a train mod, where player wants to couple two trains. To do so player has to left-click rolling stock entities with a prybar item. While accidental miss in survival is not very critical, accidental miss in creative often leads to breaking the surrounding blocks (including tracks, which are huge structures) which is very frustrating for players. 
https://github.com/mongodb/mongo-java-driver/pull/818	2	\N	2021-11-10 14:53:32	Update and test server selection logic for $out/$merge aggregation pipelines	JAVA-4380
https://github.com/mongodb/mongo-java-driver/pull/1010	2	\N	2022-10-13 18:43:17	Prioritize electionId over setVersion on 6.0+ servers	JAVA-4707
https://github.com/MovingBlocks/Terasology/pull/2646	3	\N	2016-12-07 19:30:30	Added tests for RowLayout and CardLayout	   Thanks for submitting a pull request for Terasology! :-)  Please fill in some brief details below about the PR.  If it contains source code please make sure to run Checkstyle on it first  If you add unit tests we'll love you forever!      ### Contains    3 tests for RowLayout that test the 3 main scenarios:     - when all the widgets have relative widths specified  - when no widgets have relative widths specified  - when some widgets have relative widths specified    ### How to Test  Run RowLayoutTest.java. All tests should pass!    ### Outstanding issues before merging    I've made sure to comment on most parts of the code so that it's easier to understand. Do take a look and see if the tests are ok since this is my first time writing unit tests.    P.S. Unit testing isn't as bad as everyone says  Gives you a good understanding of the class.    
https://github.com/MovingBlocks/Terasology/pull/4584	1	\N	2021-04-23 17:13:08	refactor(CreateWorldEntity): aggressive refactoring	I tried to review #4531, but I could not wrap my head around where data was coming and going in CreateWorldEntity, so I put it through the wringer.    This was _mostly_ pure refactors, even if I did stop making a commit for each one. But there is one significant twist:    Instead of applying settings from Config to the WorldConfigurator _and_ the worldEntity in one pass,    it sets things in the WorldConfigurator and _then_ uses the values from the WorldConfigurator on the worldEntity.    that makes sense, right? is there someplace else that does anything similar? that is, hopefully something is using those WorldConfigurator properties?
https://github.com/neo4j/neo4j/pull/8135	10	\N	2016-10-17 08:09:25	Fixes a race condition creating input groups in importer	Now that input may be processed in parallel, different groups of inputs which have different groups may request to create new groups concurrently. Groups class wasn't thread safe since there was previously no requirement for it.  This commit makes Groups#getOrCreate call synchronized to handle concurrent invocation. It's typically invoked quite rarely so the locking nature of it is fine.  cl [tools] Fixed a race condition in `neoj4-import` with ID groups which would have some correct relationships considered invalid and logged into bad.log instead 
https://github.com/neo4j/neo4j/pull/8571	5	\N	2017-01-06 01:02:22	GBPTree - Backwards seek for SeekCursor	Introduce backwards seek in SeekCursor. This makes it possible to scan index built on top of GBPTree in descending order.    **Why is this so complicated?**    *General*  To allow for lock free concurrency control the GBPTree agree to only move keys between nodes in 'forward' direction, from left to right. This means when we do normal forward seek we never risk having keys moved 'passed' us and therefore we can always be sure that we never miss any keys when traversing the leaf nodes or end up in the middle of the range when traversing down the internal nodes.  This assumption, of course, does not hold when seeking backwards.    There are two complicated cases where we risk missing keys.  Case 1 - Split in current node  Case 2 - Split in next node while seeker is moving to that node    **Case 1 - Split in current node**  *Forward seek*  Here, the seeker is seeking forward and has read `K0, K1, K2` and is about to read `K3`.  Then `K4` is suddenly inserted and a split happens.  Seeker will now wake up and find that he is now outside the range of `(previously returned key, end of range)`. But he knows that he can continue to read forward until he hits the previously returned key, which is `K2` and then continue to return the next key, `K3`.  ```  FORWARD      Seeker->         v    [K0 K1 K2 K3]        Seeker->         v    [K0 K1 __ __] ->[K2 K3 K4 __]  ```    *Backward seek*  Here, the seeking is seeking backwards and has only read `K3` and is about to read `K2`.  Again, `K4` is inserted, causing the same split as above.  Seeker now wakes up and find that the next key he can return is `K1`. What he do not see is that `K2` has been moved to the previous sibling and so, because he can not find the previously returned key, `K3`, in the current node and because the next to return, `K1`, is located to the far right in the current node he need to jump back to the previous sibling to find where to start again.  ```  BACKWARD        -Seeker            v    [K0 K1 K2 K3]          -Seeker (WRONG)            v    [K0 K1 __ __] ->[K2 K3 K4 __]                    -Seeker (RIGHT)                      v    [K0 K1 __ __] ->[K2 K3 K4 __]  ```    **Case 2 - Split in next node while seeker is moving to that node**  *Forward seek*  Seeker has read `K0, K1` on node 1  and has just moved to right sibling, node 2.  Now, `K6` is inserted and a split  happens in node 2, right sibling of node 1.  Seeker wakes up and continues to read on node 2. Everything is fine.  ```  FORWARD                    Seeker->                       v    1:[K0 K1 __ __] ->2:[K2 K3 K4 K5]                      Seeker->                       v    1:[K0 K1 __ __] ->2:[K2 K3 __ __] ->3:[K4 K5 K6 __]  ```  *Backward seek*  Seeker has read `K4, K5` and has just moved to left sibling, node 1.  Insert `K6`, split in node 2. Note that keys are move to node 3, passed our seeker.  Seeker wakes up and see `K1` as next key but misses `K3` and `K2`.  ```  BACKWARD                         --Seeker                              v                    1:[K0 K1 K2 K3] ->2:[K4 K5 __ __]            -Seeker              v    1:[K0 K1 __ __] ->3:[K2 K3 K4 __] ->2:[K5 K6 __ __]  ```  To guard for this, seeker 'scout' next sibling before moving there and read first key that he expect to see, `K3` in this case. By using a linked cursor to 'scout' we create a consistent read over the node gap. If there us suddenly another key when he goes there he knows that he could have missed some keys and he needs to go back until he find the place where he left off, `K4`.
https://github.com/neo4j/neo4j/pull/8804	11	\N	2017-03-07 07:22:52	Fixes issue with lonely check point in log file during recovery	LatestCheckPointFinderTest didn't test what it claimed to test and so this issue  slipped through the cracks. This whole test class have been simplified and its  use of mocking heavily reduced. Issue was this:    Given an older log file with some transaction in and a newer log file with only  a check point in, targeting an entry in the older log file ->  LatestCheckPointFinder would report that there were no transactions after  the last check point, while in fact there were. This would result in all those  transactions to not be recovered on that startup.    This commit also adds more detailed logging on finding last checkpoint at startup,  this to better be able to reason about recovery issues by reading debug.log.
https://github.com/neo4j/neo4j/pull/9317	7	\N	2017-05-17 06:35:59	Avoid accumulation of index updates during recovery	Do not collect index updates during recovery since that can cause OOM.  Use iterators instead to iterate over required updates.
https://github.com/neo4j/neo4j/pull/9953	74	\N	2017-09-04 18:34:54	Proper index recovery	This commit changes the way recovery works, with the main driving force to  have index updates be replayed as they were during normal transaction  application before the crash or otherwise unclean shutdown.    Previously index recovery was special and worked by recording which nodes  that were changed in recovered transaction followed by a complete reindex  of those nodes in all existing indexes. Besides the downside of requiring  special recovery code it also put on the index the requirement of being able  to efficiently delete index entries about a certain node id, i.e. to be able to  efficiently do lookups on node id. This worked in the Lucene case, but doesn't  work for the native number index, which only keys on the property values.    Index recovery worked this way because the act of producing index updates  from a transaction in many cases requires reading data from the store.  It would be incorrect and often impossible to read from the store while it was  recovering.    Now this has changed so that indexes participate in and see normal index updates  during recovery. The enabler for this is to first do a reverse recovery where  all the "before" versions of all transactions since the last checkpoint are  applied in reverse order onto the neostore only. This takes the store back in  time to how it looked at the checkpoint and into a consistent state.  From there a forward recovery is performed where indexes participate as they  would in normal transaction application.    Interesting to note is that the changes, and with some additional changes,  has made recovery both faster, due to:    - The previous reindexing in the end was rather slow.  - LockService was used when applying recovered transactions, to no benefit.    ... and less memory consuming, due to:    - Lowering of recovery transaction queue size from 10k   100, where there    was no observed performance benefit having the queue so large. The amount    of memory required to hold 10k large transactions could be gigabytes.  - Memory efficient implementation of reverse transaction cursor.    So recovery is now more straight forward, faster and more memory efficient.  And above all, it works nicely with our native schema indexes.
https://github.com/neo4j/neo4j/pull/10119	42	\N	2017-10-03 22:11:32	Report recovery progress	Allow recovery to report ongoing progress, so users can have indication  of how much work is already done and how much left for recovery to restore  database and make it available for new transactions again.
https://github.com/neo4j/neo4j/pull/10413	73	\N	2017-11-17 07:52:52	Value and order capabilities for schema indexes	Builds on top of https://github.com/neo4j/neo4j/pull/10279    Introduce infrastructure to be able to get exact values and defined result order from index queries.    Implementation of capabilities is limited to single property number indexes and only ascending order.
https://github.com/neo4j/neo4j/pull/10912	9	\N	2018-02-15 10:56:52	Improve performace of SpaceFillingCurve queries.	This is based on #10702. Only commits including and after b68857562c92aa4ab3a1d82a85de666cc403cd87 should be reviewed here.    This restricts the depth an index query in allowed to go into the SpaceFillingCurve, depending on the ratio of area covered by the indey and area included in the search query. It also includes different configurations to twist that behavior. These are currently used for micro-benchmarks. We should proceed to use them for fullstack-benchmarks as soon is this is merged.
https://github.com/neo4j/neo4j/pull/11221	50	\N	2018-03-16 19:45:10	Temporal acceptance tests	This pull request contains mostly acceptance test refactoring and additions, testing both spatial and temporal indexing capabilities. Some minor bugs were detected and fixed, and others cardified. In particular, we ran into a bug with the spatial index which was deemed to hard to solve here, or possibly we are just missing something.     In the final commit we decided to completely refactor how `NodeIndexSeekPipe` execute index seeks, because this was to us very hard to understand. All logic around this is now encapsulated in the new trait `NodeIndexSeeker`, which directly creates the kernel API `IndexQuery` that is used to perform the index seeks. This is possible because we are new versioning cypher on the logical plan.    ~~Builds on temporal index IV (#11181), first commit is `split spatial index test classes into separate files`.~~
https://github.com/neo4j/neo4j/pull/11248	17	\N	2018-03-21 15:01:31	Manage resource iterators explicitly	Knowledge about iterators' inherent resources must not leak outside  relevant scope.  Responsibility of managing such resources also must be  explicit, not hidden as an implicit "instanceof" check in the totally  irrelevant part of code.
https://github.com/neo4j/neo4j/pull/11575	20	\N	2018-04-19 15:46:48	3.4 Fix Cluster Overview edge-cases	Fixes a bug reported by team drivers where if a a cluster goes read-only then the cluster overview is never updated and still reflects the last known leader. This is because previously, changes to the state which the Overview depends upon in the discovery service were only allowed by the current leader. This has now been changed so that if there are no leaders an update can be made regardless.
https://github.com/neo4j/neo4j/pull/11623	38	\N	2018-05-17 10:05:16	Fusion layer instantiates parts lazily	Instead of always instantiating eagerly. E.g. an IndexReader would previously  instantiate sub-readers for lucene, number, string, spatial and temporal  even if it would only need one of those. Likewise they would all be closed  afterwards. This proved to be an unnecessary overhead.
https://github.com/netty/netty/pull/8497	2	\N	2018-11-13 19:56:10	Fix ref-counting when CompositeByteBuf is used with retainedSlice()	Motivation:    `ByteBuf.retainedSlice()` and similar methods produce sliced buffers with an independent refcount to the buffer that they wrap.      One of the optimizations in 10539f4dc738c48e8d63c46b72ca32906d7f40ec was to use a ref to the unwrapped buffer object for added slices, but this did not take into account the above special case when later releasing.    Thanks to @rkapsi for discovering this via #8495.    Modifications:    Since a reference to the slice is still kept in the `Component` class, just changed `Component.freeIfNecessary()` to release the slice in preference to the unwrapped buf.    Also added a unit test which reproduces the bug.    Result:    Fixes #8495
https://github.com/netty/netty/pull/8598	2	\N	2018-11-29 18:45:53	Reduce http2 buffer slicing	Motivation    `DefaultHttp2FrameReader` currently does a fair amount of "intermediate" slicing which can be avoided.    Modifications    Avoid slicing the input buffer in `DefaultHttp2FrameReader` until necessary. In one instance this also means retainedSlice can be used instead (which may also avoid allocating).    Results    Less allocations when using http2. I will aim to write a benchmark when I get a chance, I'm not sure that any of the existing ones cover this. Anecdotally (possibly meaningless :)), there are more than 11k fewer slices done when running the codec-http2 unit tests, and more than 4k of the remaining slices done now use retainedSlice.
https://github.com/OpenHFT/Chronicle-Queue/pull/1249	3	\N	2022-11-23 09:56:58	Queue enterprise348	
https://github.com/OpenRefine/OpenRefine/pull/2893	12	\N	2020-07-14 18:12:46	Reused Constraint IDs and Parameter PIDs	Reused the hardcoded constraint & parameter IDs from the scrutinizer classes into the test classes respectively.
https://github.com/apache/accumulo/pull/188	26	clarity	2016-11-29 14:26:11	ACCUMULO-4525: Replace meaningless method names	While trying to learn the internals of Accumulo, I found a lot of the method names in Test to be confusing. I think Tests are an under utilized learning tool for newcomers. Many method names in Test were clearly chosen for brevity rather than clarity which I think is a bad habit that doesn't help new Accumulo developers.    This PR is for 2.0 (branch with the most changes). I have similar changes for 1.7 and 1.8 branches. Tests should be the same functionally but I wanted other devs to see the changes and get their opinions. 
https://github.com/apache/commons-lang/pull/418	1	clarity	2019-04-24 12:25:29	Changing switch statement to if/else statement for greater clarity	Switch statement with only 2 branches seems unnecessary unless future additions are planned. If not, converting to if/else seems clearer.
https://github.com/apache/jena/pull/1171	4	clarity	2022-01-23 22:38:29	JENA-2257: Include query string in URI limit test	Renaming and tidy up to increase clarity.  
https://github.com/eclipse/jetty.project/pull/3310	28	clarity	2019-02-04 21:40:19	Issue #3298 - WebSocket UpgradeRequests and CompletableFutures	#3298     - Renamed some of the UpgradeRequest classes for clarity    - Fixed bug where `@OnWebSocketFrame` annotation required a Core WebSocket Frame instead of a jetty API frame.    - Fix problems with the jetty-websocket-tests module pom.xml    - The JettyClientUpgradeRequest no longer uses the combination of the onOpenFuture (completed in the FrameHandler onOpen) and the futureSession (completed at end of upgrade), and instead it just uses the future passed to the FrameHandler.     br>    ### Refactor of WebSocket UpgradeRequest class names:   hr>    **core**  ```  org.eclipse.jetty.websocket.core.client      UpgradeRequest -> ClientUpgradeRequest   ```    **javax**  ```  org.eclipse.jetty.websocket.javax.client      DelegatedClientUpgradeRequest  -> DelegatedJavaxClientUpgradeRequest       DelegatedClientUpgradeResponse  -> DelegatedJavaxClientUpgradeResponse      ClientUpgradeRequestImpl -> JavaxClientUpgradeRequest     org.eclipse.jetty.websocket.javax.server.internal      UpgradeRequestAdapter -> DelegatedJavaxServletUpgradeRequest  ```    **jetty**  ```  org.eclipse.jetty.websocket.client.impl      DelegatedClientUpgradeRequest -> DelegatedJettyClientUpgradeRequest       DelegatedClientUpgradeResponse -> DelegatedJettyClientUpgradeResponse       ClientUpgradeRequestImpl -> JettyClientUpgradeRequest    org.eclipse.jetty.websocket.server.internal      UpgradeRequestAdapter -> DelegatedJettyServletUpgradeRequest  ```
https://github.com/eclipse/jetty.project/pull/6258	5	clarity	2021-05-12 08:19:11	Fixes #6254 - Total timeout not enforced for queued requests.	Fixed logic in HttpDestination.RequestTimeouts, where now a timeout  is scheduled only when the expiration time is less than the existing one.  Various code cleanups.  Renamed HttpDestination.TimeoutTask to RequestTimeouts for clarity.  Improved javadocs, code comments and logging.    Signed-off-by: Simone Bordet  simone.bordet@gmail.com>  (cherry picked from commit 5f23689aa7f44c0660ba2ad92c7c6a15d7c4af15)  (cherry picked from commit da50e06b640d448d42e642c842cf9bc647797a49)  (cherry picked from commit 88ac10439a8b5ec1c34aaab4ccbf0f590aee33f8)
https://github.com/eclipse/jetty.project/pull/6753	1	clarity	2021-09-10 00:08:42	Issue  #6752 DefaultSessionCache more extensible using ConcurrentMap	DefaultSessionCache is designed to be extended, by virtue of its protected session map. Subclasses can set their own map instance instead. However the session map is specified as ConcurrentHashMap, when it only needs to be ConcurrentMap.  Changed data type to ConcurrentMap to allow for wider options for subclasses, such as those wanted to use Caffeine's asMap() method which returns ConcurrentMap.  Although changing to even more relaxed Map would work, that does not provide as much clarity that the map will be used concurrently - therefore used ConcurrentMap instead.    Resolves #6752     Signed-off-by: Padraic Renaghan  padraic@renaghan.com>
https://github.com/grpc/grpc-java/pull/7756	1	clarity	2020-12-23 21:08:02	api: Improve code clarity by using Arrays.copyOf()	As noticed by a linter
https://github.com/grpc/grpc-java/pull/9025	1	clarity	2022-04-04 14:19:54	xds: Improve code clarity by removing Unnecessary fully qualified names and using Immutable interface types.	1. Unnecessary fully qualified names  Currently in XdsCredentialsRegistry, the child classes are referred by  their fully qualified names i.e.  'io.grpc.xds.internal.GoogleDefaultXdsCredentialsProvider' instead of  importing GoogleDefaultXdsCredentialsProvider and just using  GoogleDefaultXdsCredentialsProvider.class.    2. Use immutable interfaces instead of the generic collection interface     i.e. ImmutableMap instead of just Map in the unit tests.    These improvements are related to changes made in #8924.    @ejona86 
https://github.com/hazelcast/hazelcast/pull/21413	4	clarity	2022-05-13 13:54:50	Rename method and classes for better clarity	 ter system    **Reasoning:**  Some class or method names are not clear to eyes and this makes code reading harder, encountered this during investigations of https://github.com/hazelcast/hazelcast/issues/20220
https://github.com/linkedin/rest.li/pull/417	2	clarity	2020-09-22 23:32:58	Optimize schema parsing by reusing ParseResult instances	This is meant to replace PR #416     PR #376 made schema parsing deterministic in part by sorting parser  results. When using `DataSchemaParser` to parse data schemas from multiple  sources, a separate `ParseResult` instance is constructed for each source  then ultimately combined into a new singular instance. This introduced a  performance regression when parsing from many sources due to unnecessary  sorting. This change fixes that by allowing `FileFormatDataSchemaParser`  to reuse the root instance rather than constructing a new one.    Also adds more comments for clarity.
https://github.com/MinecraftForge/MinecraftForge/pull/5235	2	clarity	2018-11-15 21:52:46	Fix defaulted registries returning null keys	Aims to better match the behaviour of `NamespacedDefaultedWrapper` to the vanilla `RegistryNamespacedDefaultedByKey` it is replacing.    In particular, the implementation of `getNameForObject` is not consistent with the original:  ```java  @Nonnull  public K getNameForObject(V value)  {      K k = (K)super.getNameForObject(value);      return (K)(k == null ? this.defaultValueKey : k);  }  ```    The default key should be returned for a failed lookup if available, not null.    (`getRandomObject` shouldn't overrun, so that change is mostly just for clarity and matching the parent class)
https://github.com/Netflix/zuul/pull/764	11	clarity	2020-04-09 01:53:04	zuul-core: re-implement Headers with an array 	This change has some performance improvements.  Since headers are usually small, using an array is typically faster than the ListMultimap that we use now.    Key changes:    * Headers now use ArrayLists of keys, values, and the original names.  This avoids the high memory allocation and slowness of ArrayListMultimap.  Both Netty and gRPC use linear time datastructures for their headers.       * This also allows making special accessor methods because we have control of the implementation.  * HeaderNames no longer try to intern their strings.  Interning is very slow, involves JNI and bring memory usage up.  This is noticeable on profiling.  * get() method is now getFirst and getAll for clarity.  This allows picking better performance if only one is wanted.  * Immutable headers are not longer a thing.  It was not widely used, and it's difficult to support.  * Added docs and testing for all the methods.  This makes it more clear what the code should do.  * HeaderNames are not allocated per access.   This is very expensive, since it involves synchronizing on the HeaderNameCache.      I have included Benchmarks below cherry-picking from my other PR.   Numbers are better for adding headers, setting headers and iterating over them.  They are slightly worse for getting headers, since a  List is returned.  I think this is a good apples-to apples comparison, but I expect that we will stop using the getAll accessor once this change is in, bringing the perf in range.      ```  BEFORE      Benchmark                                                                           (count)  (nameLength)  Mode  Cnt     Score      Error   Units  HeadersBenchmark.AddHeaders.addHeaders_headerName                                         0            10  avgt    5    13.178      0.351   ns/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate                          0            10  avgt    5  5778.258    142.837  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate.norm                     0            10  avgt    5   120.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space                 0            10  avgt    5  5729.596    662.448  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space.norm            0            10  avgt    5   118.979     11.782    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space             0            10  avgt    5     0.158      0.144  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space.norm        0            10  avgt    5     0.003      0.003    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.count                               0            10  avgt    5    77.000             counts  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.time                                0            10  avgt    5    47.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_headerName                                         1            10  avgt    5    60.872      2.131   ns/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate                          1            10  avgt    5  3669.285    127.481  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate.norm                     1            10  avgt    5   352.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space                 1            10  avgt    5  3685.199    659.552  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space.norm            1            10  avgt    5   353.490     58.044    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space             1            10  avgt    5     0.154      0.134  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space.norm        1            10  avgt    5     0.015      0.013    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.count                               1            10  avgt    5    74.000             counts  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.time                                1            10  avgt    5    47.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_headerName                                         5            10  avgt    5   222.472      5.596   ns/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate                          5            10  avgt    5  2009.810     55.884  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate.norm                     5            10  avgt    5   704.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space                 5            10  avgt    5  2008.276    179.376  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space.norm            5            10  avgt    5   703.458     58.447    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space             5            10  avgt    5     0.170      0.192  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space.norm        5            10  avgt    5     0.060      0.066    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.count                               5            10  avgt    5    75.000             counts  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.time                                5            10  avgt    5    47.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_headerName                                        10            10  avgt    5   421.710     14.271   ns/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate                         10            10  avgt    5  1722.183     65.786  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate.norm                    10            10  avgt    5  1144.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space                10            10  avgt    5  1710.637    374.629  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space.norm           10            10  avgt    5  1136.275    241.343    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space            10            10  avgt    5     0.162      0.105  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space.norm       10            10  avgt    5     0.107      0.067    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.count                              10            10  avgt    5    74.000             counts  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.time                               10            10  avgt    5    46.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_headerName                                        30            10  avgt    5  1295.250      8.772   ns/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate                         30            10  avgt    5  1557.763     15.510  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.alloc.rate.norm                    30            10  avgt    5  3176.001      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space                30            10  avgt    5  1567.201    250.967  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Eden_Space.norm           30            10  avgt    5  3195.180    504.337    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space            30            10  avgt    5     0.195      0.229  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.churn.PS_Survivor_Space.norm       30            10  avgt    5     0.398      0.470    B/op  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.count                              30            10  avgt    5    73.000             counts  HeadersBenchmark.AddHeaders.addHeaders_headerName: gc.time                               30            10  avgt    5    46.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_string                                             0            10  avgt    5    13.165      0.977   ns/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate                              0            10  avgt    5  5790.782    439.398  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate.norm                         0            10  avgt    5   120.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space                     0            10  avgt    5  5711.296   1067.689  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space.norm                0            10  avgt    5   118.302     13.808    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space                 0            10  avgt    5     0.137      0.191  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space.norm            0            10  avgt    5     0.003      0.004    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.count                                   0            10  avgt    5    75.000             counts  HeadersBenchmark.AddHeaders.addHeaders_string: gc.time                                    0            10  avgt    5    46.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_string                                             1            10  avgt    5   239.974      3.108   ns/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate                              1            10  avgt    5   994.694     11.430  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate.norm                         1            10  avgt    5   376.000      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space                     1            10  avgt    5  1001.661     62.977  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space.norm                1            10  avgt    5   378.627     21.534    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space                 1            10  avgt    5     0.141      0.087  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space.norm            1            10  avgt    5     0.053      0.033    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.count                                   1            10  avgt    5    75.000             counts  HeadersBenchmark.AddHeaders.addHeaders_string: gc.time                                    1            10  avgt    5    47.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_string                                             5            10  avgt    5  1182.916     60.146   ns/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate                              5            10  avgt    5   442.468     23.490  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate.norm                         5            10  avgt    5   824.001      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space                     5            10  avgt    5   439.803     55.825  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space.norm                5            10  avgt    5   818.921     73.927    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space                 5            10  avgt    5     0.158      0.145  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space.norm            5            10  avgt    5     0.294      0.265    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.count                                   5            10  avgt    5    71.000             counts  HeadersBenchmark.AddHeaders.addHeaders_string: gc.time                                    5            10  avgt    5    44.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_string                                            10            10  avgt    5  2306.242     49.923   ns/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate                             10            10  avgt    5   380.798      8.531  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate.norm                        10            10  avgt    5  1384.001      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space                    10            10  avgt    5   379.161     24.429  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space.norm               10            10  avgt    5  1378.149    108.699    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space                10            10  avgt    5     0.137      0.121  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space.norm           10            10  avgt    5     0.498      0.453    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.count                                  10            10  avgt    5    68.000             counts  HeadersBenchmark.AddHeaders.addHeaders_string: gc.time                                   10            10  avgt    5    43.000                 ms  HeadersBenchmark.AddHeaders.addHeaders_string                                            30            10  avgt    5  7093.121     54.902   ns/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate                             30            10  avgt    5   349.157      1.994  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.alloc.rate.norm                        30            10  avgt    5  3896.003      0.001    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space                    30            10  avgt    5   350.932     54.669  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Eden_Space.norm               30            10  avgt    5  3915.724    599.573    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space                30            10  avgt    5     0.170      0.117  MB/sec  HeadersBenchmark.AddHeaders.addHeaders_string: gc.churn.PS_Survivor_Space.norm           30            10  avgt    5     1.901      1.313    B/op  HeadersBenchmark.AddHeaders.addHeaders_string: gc.count                                  30            10  avgt    5    61.000             counts  HeadersBenchmark.AddHeaders.addHeaders_string: gc.time                                   30            10  avgt    5    39.000                 ms  HeadersBenchmark.GetSetHeaders.entries                                                    1            10  avgt    5   121.077      8.737   ns/op  HeadersBenchmark.GetSetHeaders.entries: gc.alloc.rate                                     1            10  avgt    5  2559.024    182.661  MB/sec  HeadersBenchmark.GetSetHeaders.entries: gc.alloc.rate.norm                                1            10  avgt    5   488.000      0.001    B/op  HeadersBenchmark.GetSetHeaders.entries: gc.churn.PS_Eden_Space                            1            10  avgt    5  2548.130    237.599  MB/sec  HeadersBenchmark.GetSetHeaders.entries: gc.churn.PS_Eden_Space.norm                       1            10  avgt    5   485.901     21.870    B/op  HeadersBenchmark.GetSetHeaders.entries: gc.churn.PS_Survivor_Space                        1            10  avgt    5     0.145      0.150  MB/sec  HeadersBenchmark.GetSetHeaders.entries: gc.churn.PS_Survivor_Space.norm                   1            10  avgt    5     0.028      0.028    B/op  HeadersBenchmark.GetSetHeaders.entries: gc.count                                          1 
https://github.com/netty/netty/pull/9538	1	clarity	2019-09-05 07:12:17	Replace synchronized blocks + assert with synchronized method	Reduce verbosity and more idiomatic use of keyword. Also rename the method to better describe what it's for.    Motivation:    Following up on discussion with @normanmaurer with suggestion to improve code clarity.    Modification:    Method is synchronized, no need for assert or verbose sync blocks around calls.  
https://github.com/netty/netty/pull/11220	1	clarity	2021-05-04 05:32:17	Decrease visibility of `Http2FrameCodecBuilder` default ctor to `protected`	Motivation:    `Http2FrameCodecBuilder` defines static factory methods `forClient()`  and `forServer()` that should be used to create a new instance.  The default ctor is useful only when users need to override behavior  of the existing builder. Those users should define another way to create  an instance.    Modifications:    - Decrease visibility of `Http2FrameCodecBuilder` default ctor from  `public` to `protected`;  - Add javadoc to clarity responsibilities;    Result:    Users of `Http2FrameCodecBuilder` are not confused why  `new Http2FrameCodecBuilder().build()` works for the server-side, but  does not work for the client-side.    Follow-up for #11195.
https://github.com/rstudio/rstudio/pull/6318	1	clarity	2020-02-26 20:29:22	Remove DocDisplay debug highlighting from manual spellcheck	Fixes #6298     This was something I added to give the manual spellchecking a little extra visual clarity but it's currently unreliable and not necessary so I'm removing it.
https://github.com/UniversalMediaServer/UniversalMediaServer/pull/3577	83	clarity	2022-11-06 22:58:17	Confs	**UMS :**  -  refactor `configuration` into `umsConfiguration` for clarity    **BaseConfiguration:**  - created class that is base class for `UmsConfiguration` and `DeviceConfiguration`.    **UmsConfiguration :**  - extends `BaseConfiguration`  - remove extends `RendererConfiguration` as it has nothing to do with it.    **ConnectedRenderers**  - created class that handle all the connected renderers arrays.  - it will need to move found upnp renderers arrays on it one day (not urgent).    **Renderer :**  - renderer is now a fully found renderer device.  - it's not anymore the base class for `RendererConfiguration` what is nonsense.  - `RendererConfiguration` was confusing between a renderer device or only a renderer conf.  - now have non settings things from `RendererConfiguration` / `DeviceConfiguration` on itself.    **RendererConfiguration :**  - extends `BaseConfiguration`  -  moved `getConfigurationAsJsonString()` to the `SettingsApiServlet`    **DeviceConfiguration : -> RendererDeviceConfiguration**  -  refactored to `RendererDeviceConfiguration`.  -  now use the provided `umsConfiguration` instead of extending `UmsConfiguration`.  -  extends `RendererConfiguration` as it should.  -  moved statics `RendererConfiguration` specific to device (old `deviceConfs`) to `RendererConfigurations` (devices conf are RendererConfiguration with id).  -  moved non setting things to `Renderer` class.  -  moved renderers inet ->uuid (old `XREF`) to `ConnectedRenderers`.
https://github.com/RPTools/maptool/pull/2141	58	clean up	2020-08-03 12:23:39	more cleanups	For the exception throws removals, it looks at first blush that removing them would do harm, but they are either unchecked or the called methods deal with them in try/catch blocks.    Work on #2135      Reviewable:start    ---  This change is [ img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/rptools/maptool/2141)     Reviewable:end    
https://github.com/apache/pinot/pull/7294	2	clean up	2021-08-19 22:03:44	cleanup segment preprocessor a bit to make next RP smaller	## Description  Break down large method to smaller ones to be more readable and reduce the scope of variables with similar names.    ## Upgrade Notes  Does this PR prevent a zero down-time upgrade? (Assume upgrade order: Controller, Broker, Server, Minion)  * [ ] Yes (Please label as ** code>backward-incompat /code>**, and complete the section below on Release Notes)    Does this PR fix a zero-downtime upgrade introduced earlier?  * [ ] Yes (Please label this as ** code>backward-incompat /code>**, and complete the section below on Release Notes)    Does this PR otherwise need attention when creating release notes? Things to consider:  - New configuration options  - Deprecation of configurations  - Signature changes to public methods/interfaces  - New plugins added or old plugins removed  * [ ] Yes (Please label this PR as ** code>release-notes /code>** and complete the section on Release Notes)  ## Release Notes     If you have tagged this as either backward-incompat or release-notes,  you MUST add text here that you would like to see appear in release notes of the  next release.         If you have a series of commits adding or enabling a feature, then  add this section only in final commit that marks the feature completed.  Refer to earlier release notes to see examples of text.     ## Documentation     If you have introduced a new feature or configuration, please add it to the documentation as well.  See https://docs.pinot.apache.org/developers/developers-and-contributors/update-document     
https://github.com/JabRef/jabref/pull/2765	309	clean up	2017-04-21 21:55:52	Clean up checkstyle warnings	Clean up checkstyle warnings   Add checkstyle suppression for gen  
https://github.com/eclipse/jetty.project/pull/6133	1	comprehensible	2021-04-05 22:51:50	Changed exception check by JUnit API usage	**Problem:**  The Exception Handling test smell occurs when the test outcome is manually determined through pass or fail method calls, dependent on the production method throwing an exception generally inside a try/catch block. This refactoring proposal aims to make the exception catching a responsibility of the test framework which is already provided by its API. Also, without using try/catch blocks, tests can be more straightforward and possibly more comprehensible and maintainable.    **Solution:**  We propose using JUnit's exception handling to automatically pass/fail the test instead of writing custom exception handling code. In this particular case, we added the possibly throwable object to test method signature and removed the redundant fail method call and message.    **Result:**  _Before:_  ``` java  try       {            Syntax.requireValidRFC2616Token(token, "Test Based");            fail("RFC2616 Token [" + token + "] Should have thrown " + IllegalArgumentException.class.getName());        }        catch (IllegalArgumentException e)        {             assertThat("Testing Bad RFC2616 Token [" + token + "]", e.getMessage(),             allOf(containsString("Test Based"),             containsString("RFC2616")));         }  ```    _After:_  ``` java  Throwable e = assertThrows(IllegalArgumentException.class,                      () -> Syntax.requireValidRFC2616Token(token, "Test Based"));  assertThat("Testing Bad RFC2616 Token [" + token + "]", e.getMessage(),                      allOf(containsString("Test Based"),                      containsString("RFC2616")));  ```
https://github.com/apache/accumulo/pull/1271	1	easier to read	2019-07-16 19:01:08	Fix #483	Refactor Compression.java in order to remove duplicate code and  restructure the class to make it easier to read overall.
https://github.com/apache/accumulo/pull/2250	1	easier to read	2021-08-31 12:04:00	Clarify some code in CompactionService	* Split up some single lines of code to make it easier to read  * Add a comment
https://github.com/apache/roller/pull/105	44	easier to read	2021-10-23 18:16:15	Small Code Optimizations + Dependency Updates	a set of refactorings for better performance or more concise / easier to read code + minor version dependency updates    most of it was done by using the jackpot code inspection rules found here:  https://github.com/mbien/jackpot-inspections
https://github.com/crate/crate/pull/10685	1	easier to read	2020-10-21 13:05:35	Reorder methods in BlobStoreRepository to match ES upstream	## Summary of the changes / Why this improves CrateDB  Makes it easier to read the diff between ES and ours and should help reduce the conflicts we get when applying further ES patches.   ## Checklist   - [x] Added an entry in `CHANGES.txt` for user facing changes  - [x] Updated documentation & `sql_features` table for user facing changes  - [x] Touched code is covered by tests  - [x] [CLA](https://crate.io/community/contribute/cla/) is signed  - [x] This does not contain breaking changes, or if it does:     - It is released within a major release     - It is recorded in ``CHANGES.txt``     - It was marked as deprecated in an earlier release if possible     - You've thought about the consequences and other components are adapted       (E.g. AdminUI)
https://github.com/crate/crate/pull/11011	1	easier to read	2021-02-09 12:36:33	Move method in RecoverySourceHandler to mirror upstream order	## Summary of the changes / Why this improves CrateDB  To make a diff against the upstream version of the file easier to read. Should also help prevent conflicts when backporting patches.  ## Checklist   - [x] Added an entry in `CHANGES.txt` for user facing changes  - [x] Updated documentation & `sql_features` table for user facing changes  - [x] Touched code is covered by tests  - [x] [CLA](https://crate.io/community/contribute/cla/) is signed  - [x] This does not contain breaking changes, or if it does:     - It is released within a major release     - It is recorded in ``CHANGES.txt``     - It was marked as deprecated in an earlier release if possible     - You've thought about the consequences and other components are adapted       (E.g. AdminUI)
https://github.com/eclipse/jetty.project/pull/5230	2	easier to read	2020-09-04 07:16:44	Issue #5201 - simplify the QueuedThreadPool dump	**Issue #5201**    Make the format of each thread dump more consistent, and simplify the code to make it easier to read and understand.    Both the standard and detailed dumps have the information of `id`, `name`, `state` and `priority`,     Then either if method is known we add one of `{IDLE, RESERVED, SELECTING, ACCEPTING}`, otherwise we add just the first line of the stacktrace for the standard dump, or the full stack trace for the detailed dump.
https://github.com/graphhopper/graphhopper/pull/1219	12	easier to read	2017-11-17 06:50:02	Remove duplicated points at ViaPoints and add getLength to Instructions	This PR fixes #1216 and also addresses parts of #1138.    This PR removes the duplicated point at ViaInstructions. Due to that we could also improve the Instructions and added the `getLength` method to the Instruction, which makes the code easier to read and is a step towards making instructions more similar to PathDetails.
https://github.com/grpc/grpc-java/pull/3430	1	easier to read	2017-09-01 22:32:08	core: name more anonymous classes in ServerImpl	This makes it much easier to read stack traces since the name of the  event is in the frame.
https://github.com/grpc/grpc-java/pull/9666	3	easier to read	2022-11-03 17:48:53	xds: Fake control plane test setup code to Rules	This extracts the startup and shutdown code for the control and data plane server to separate JUnit rules, which allows this logic to be reused in other tests in a simple manner. Also makes the test easier to read with the boiler plate init code removed.
https://github.com/HubSpot/jinjava/pull/528	1	easier to read	2020-11-10 22:03:53	Simply JinjavaConfig construction	The JinjavaConfig constructor had too many parameters. This replaces that constructor with one that just takes in a `Builder`. It is both easier to read and it doesn't violate checkstyle (which throws a style violation after 20+ parameters).    Also, many of the values in that constructor are the default values in the Builder class so they can be omitted, which removes a fair bit of duplicate code.
https://github.com/iluwatar/java-design-patterns/pull/2108	1	easier to read	2022-10-22 17:38:49	Adding lombok to step-builder pattern	This PR adds lombok to the step-builder pattern, making the code cleaner and easier to read/maintain    Closes https://github.com/iluwatar/java-design-patterns/issues/2107
https://github.com/mockito/mockito/pull/1231	1	easier to read	2017-10-28 10:42:36	InvocationsPrinter string concatination	Replace string concatination inside an append call with a chained `append` calls to make the code a tad easier to read, so the reader isn't left wondering why some of the concatinations are done with `append`s and some with the `+` operator.  
https://github.com/rabbitmq/rabbitmq-java-client/pull/443	11	easier to read	2019-02-13 08:30:41	Spelling	## Proposed Changes    Generated by https://github.com/jsoref/spelling `f`; to maintain your repo, please consider `fchurn`    There are a number of benefits of using correct spelling, one is that it makes it easier to read, another is that it makes it easier to search/cross reference, another is that it reduces ambiguity/confusion.    ## Types of Changes    What types of changes does your code introduce to this project?  _Put an `x` in the boxes that apply_    - [ ] Bugfix (non-breaking change which fixes issue #NNNN)  - [ ] New feature (non-breaking change which adds functionality)  - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)  - [ ] Documentation (correction or otherwise)  - [ ] Cosmetics (whitespace, appearance)    ## Checklist    _Put an `x` in the boxes that apply. You can also fill these out after creating  the PR. If you're unsure about any of them, don't hesitate to ask on the  mailing list. We're here to help! This is simply a reminder of what we are  going to look for before merging your code._    - [x] I have read the `CONTRIBUTING.md` document  - [x] I have signed the CA (see https://cla.pivotal.io/sign/rabbitmq)  - [ ] All tests pass locally with my changes  - [ ] I have added tests that prove my fix is effective or that my feature works  - [ ] I have added necessary documentation (if appropriate)  - [ ] Any dependent changes have been merged and published in related repositories    ## Further Comments    I'm not claiming to be an erlang expert/user (we're investigating using RabbitMQ for a system, and I like to test the waters of projects to get a sense of how healthy they are with small changes). I haven't yet set up an erlang environment. So I haven't run the tests yet (I can, and understand that the contribution guide encourages me to do so).
https://github.com/resteasy/resteasy/pull/1930	12	easier to read	2019-03-15 17:16:30	[RESTEASY-1991] response builder built response (#1835)	* [RESTEASY-1991] Exception removed from BuiltResponse readEntity and code added for the task.  BuiltResponseEntityNotBacked created to support existing exception throwing scenarios.  ClientFilterResponseBuilderTest created to test code change.    * Update ClientResponse.java    I changed "    " (four spaces) to "   " (three spaces), and the diff is *much* easier to read.
url	number_java_files	keyword	merged at	pr_title	pr_body
https://github.com/data-integrations/google-cloud/pull/667	13	legibility	2021-06-03 00:06:07	Restuctured code for easier maintainability and legibility.	
https://github.com/elastic/elasticsearch/pull/48452	4	legibility	2019-10-25 10:38:31	Improve SAML tests resiliency to auto-formatting	The SAML tests have large XML documents within which various parameters  are replaced. At present, if these test are auto-formatted, the XML  documents get strung out over many, many lines, and are basically  illegible.    Fix this by using named placeholders for variables, and indent the  multiline XML documents.    The tests in `SamlSpMetadataBuilderTests` deserve a special mention,  because they include a number of certificates in Base64. I extracted  these into variables, for additional legibility.
https://github.com/JanusGraph/janusgraph/pull/788	23	legibility	2017-12-03 10:06:28	Make long constants end in L for legibility	Fixes #787    Signed-off-by: Alexander Patrikalakis  amcp@amazon.co.jp>    -----    Thank you for contributing to JanusGraph!    In order to streamline the review of the contribution we ask you  to ensure the following steps have been taken:    ### For all changes:  - [x] Is there an issue associated with this PR? Is it referenced in the commit message?  - [x] Does your PR body contain #xyz where xyz is the issue number you are trying to resolve?  - [x] Has your PR been rebased against the latest commit within the target branch (typically `master`)?  - [x] Is your initial contribution a single, squashed commit?    ### For code changes:  - [ ] Have you written and/or updated unit tests to verify your changes?  - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?  - [ ] If applicable, have you updated the LICENSE.txt file, including the main LICENSE.txt file in the root of this repository?  - [ ] If applicable, have you updated the NOTICE.txt file, including the main NOTICE.txt file found in the root of this repository?    ### For documentation related changes:  - [ ] Have you ensured that format looks appropriate for the output in which it is rendered?  - [ ] If this PR is a documentation-only change, have you added a `[skip ci]`    tag to the first line of your commit message to avoid spending CPU cycles in    Travis CI when no code, tests, or build configuration are modified?    ### Note:  Please ensure that once the PR is submitted, you check Travis CI for build issues and submit an update to your PR as soon as possible.    
https://github.com/trinodb/trino/pull/1651	1	legibility	2019-10-03 13:18:16	Improve numbers legibility in CLI	Blue turns out to be not legible e.g. on certain Macs in Iterm2 with  "Dark background" color preset.
https://github.com/RedRoverSchool/JenkinsQA_Java_2025_spring/pull/230	1	readability	2025-03-21 19:58:01	improve code readability	
https://github.com/reposense/RepoSense/pull/417	2	readability	2018-12-19 16:28:04	Console output: fix grammar and improve readability #200	Fixes #200 
https://github.com/quarkus-qe/quarkus-test-suite/pull/493	9	readability	2022-01-21 14:42:11	[2.2] Rename some customer cases test names in order to improve readability	backport: #492
https://github.com/RPTools/maptool/pull/2144	81	readability	2020-08-04 13:42:09	minor perf, readability improvements	Also some bugfixes     Reviewable:start   --- This change is [ img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/rptools/maptool/2144)    Reviewable:end   
https://github.com/rstudio/rstudio/pull/1529	3	readability	2017-09-26 23:52:28	Lambda-ify some terminal code to get a feel for it	Converted some terminal anonymous classes to lambdas to get a feel for the syntax.    One thing I noticed, breakpoints in Chrome debugger get trickier with the more compact syntax. For example, put breakpoints on each of these lines in TerminalPane.java, inside `sendToTerminal` function:    ```     activateTerminal(() -> { // breakpoint one        ensureTerminal(text); // breakpoint two        Scheduler.get().scheduleDeferred(() -> suppressAutoFocus_ = false); // bp three     });  ```  The first will fire when the app is starting up (the containing function `sendToTerminal` **doesn't** execute during startup).    When you do the UI action to trigger a call to `sendToTerminal`, the second breakpoint fires as expected, when `activateTerminal` invokes the passed callback lambda. Note that the first breakpoint does not fire again, so you can't stop at the actual activateTerminal invocation.    Then the third breakpoint fires as the scheduleDeferred lambda is created, but there's no way to set a breakpoint on the callback that I can find (the `suppressAutoFocus_ = false;` part). That could be annoying in some situations. If you wrap the line, putting that code on a separate line, then you can set a breakpoint on it, but that definitely takes away from the compactness gains from using the lambda here.    Figure we'll get a feel for this as we go along, and come up with some best-practices to balance the nifty syntax with debug-ability and readability.  
https://github.com/RumbleDB/rumble/pull/486	4	readability	2020-02-27 15:31:56	Improve readability of forClause schema generation from tuples	ForClauseLocalToRowClosure is renamed to ForClausedLocalTupleToRowClosure (clarity for additions to coming with RumbleML)    Removed redundancy of schema generation for each tuple.    Removed wildcard imports from Functions.java . @ghislainfourny as far as I know, eclipse permits at most 99 imports from a single file until it switches to wildcards. This number can be configured up to 999 in IntelliJ. So every time you optimize imports with your IDE for the Functions.java file, wildcards might come back.  
https://github.com/runelite/runelite/pull/2714	2	readability	2018-05-19 17:44:21	Friend notes plugin: Add documentation and increase code readability	Did some light maintenance as I was documenting this class. See the commit diffs one-by-one.
https://github.com/seqeralabs/tower-cli/pull/486	22	readability	2025-02-03 18:55:39	Rename "Data studios" to "studios" + other small readability standarisation	Small fixes post verification of: https://seqera.atlassian.net/browse/PLAT-583    Fix sort of the `tw studio checkpoints` command (the list is already sorted from the backend, so just using the given sort instead of doing any sorting on the cli side, which is slightly broken).    ```  /tw studios checkpoints -w data-studios/data-studios -n studio-ef6b      Checkpoints at Studio studio-ef6b at [data-studios / data-studios] workspace:         ID  | Name                   | Author         | Date Created                  | Date Saved      -----+------------------------+----------------+-------------------------------+-------------------------------       333 | studio-ef6b_1738341636 | georgi-hristov | Fri, 31 Jan 2025 16:40:36 GMT | Fri, 31 Jan 2025 17:59:29 GMT       195 | studio-ef6b_1738229371 | georgi-hristov | Thu, 30 Jan 2025 09:29:31 GMT | Thu, 30 Jan 2025 09:34:33 GMT       194 | studio-ef6b_1738068546 | georgi-hristov | Tue, 28 Jan 2025 12:49:06 GMT | Tue, 28 Jan 2025 14:05:07 GMT       193 | studio-ef6b_1738068297 | georgi-hristov | Tue, 28 Jan 2025 12:44:57 GMT | Tue, 28 Jan 2025 12:48:42 GMT       192 | studio-ef6b_1738067452 | georgi-hristov | Tue, 28 Jan 2025 12:30:52 GMT | Tue, 28 Jan 2025 12:36:13 GMT       191 | studio-ef6b_1738062560 | georgi-hristov | Tue, 28 Jan 2025 11:09:20 GMT | Tue, 28 Jan 2025 11:56:53 GMT       190 | studio-ef6b_1738061352 | georgi-hristov | Tue, 28 Jan 2025 10:49:12 GMT | Tue, 28 Jan 2025 10:56:07 GMT       187 | studio-ef6b_1737997605 | georgi-hristov | Mon, 27 Jan 2025 17:06:45 GMT | Mon, 27 Jan 2025 17:09:32 GMT  ```    ```  ./tw studios checkpoints -w data-studios/data-studios -n studio-c3f6      Checkpoints at Studio studio-c3f6 at [data-studios / data-studios] workspace:         ID  | Name                   | Author         | Date Created                 | Date Saved      -----+------------------------+----------------+------------------------------+------------------------------       344 | studio-c3f6_1738606010 | georgi-hristov | Mon, 3 Feb 2025 18:06:50 GMT | never       343 | studio-c3f6_1738605260 | georgi-hristov | Mon, 3 Feb 2025 17:54:20 GMT | Mon, 3 Feb 2025 18:06:35 GMT  ```
https://github.com/seqeralabs/tower-cli/pull/488	3	readability	2025-02-05 11:16:38	Format the description of a studio to remove line breaks to increase readability	Noticed while doing some testing that for Studios where the description had a line break or was too long, it resulted in the table output being formatted wrong - this PR sanitises the description a bit to avoid badly formatted output and improve readability.    Before:  ```  ./tw studios list -w data-studios/data-studios     Studios at [data-studios / data-studios] workspace:         ID       | Name                      | Description                                                              | User               | Status      ----------+---------------------------+--------------------------------------------------------------------------+--------------------+-------------       abec0e2c | studio-c9f5               | test mount    Started from studio jboxman-test-012725b                     | jason-boxman       | STOPPED       5dc53d96 | my_name_with_underscore   | NA                                                                       | endre-sukosd       | STOPPED       93cf086d | studio-c3f6               | NA                                                                       | georgi-hristov     | ERRORED       aa3ab09d | my-fresh-studio           | NA                                                                       | georgi-hristov     | ERRORED  ```    After:  ```  ./tw studios list -w data-studios/data-studios    Studios at [data-studios / data-studios] workspace:         ID       | Name                      | Description                                                              | User               | Status      ----------+---------------------------+--------------------------------------------------------------------------+--------------------+-------------       abec0e2c | studio-c9f5               | test mount Started from studio jboxman-test-012725b                      | jason-boxman       | STOPPED       5dc53d96 | my_name_with_underscore   | NA                                                                       | endre-sukosd       | STOPPED       93cf086d | studio-c3f6               | NA                                                                       | georgi-hristov     | ERRORED       aa3ab09d | my-fresh-studio           | NA                                                                       | georgi-hristov     | ERRORED       77677145 | gost-refactor-jupyter     | NA                                                                       | weronika-sosnowska | STOPPED  ```  In line with how it is presented on the Frontend as well:   img width="485" alt="image" src="https://github.com/user-attachments/assets/1151aa40-abd7-402e-b126-318fcc7cb40c" />    Studio with long description capped:  ```  Studios at [data-studios / data-studios] workspace:         ID       | Name                      | Description                                                                                             | User               | Status      ----------+---------------------------+---------------------------------------------------------------------------------------------------------+--------------------+-------------       8dbe08fa | studio-33a2               | Lorem ipsum odor amet, consectetuer adipiscing elit. Est lacinia proin habitasse suspendisse nascetu... | georgi-hristov     | RUNNING       abec0e2c | studio-c9f5               | test mount Started from studio jboxman-test-012725b                                                     | jason-boxman       | STOPPED       5dc53d96 | my_name_with_underscore   | NA                                                                                                      | endre-sukosd       | STOPPED       93cf086d | studio-c3f6               | NA                                                                                                      | georgi-hristov     | ERRORED  ```
https://github.com/sermant-io/Sermant/pull/1673	12	readability	2024-11-22 08:27:51	Optimize code and improve readability	**What type of PR is this?**    Refactor    **What this PR does / why we need it?**    Some parts of the code have issues with logic consistency and readability.    **Which issue(s) this PR fixes **    Fixes #1672    **Does this PR introduce a user-facing change?**    No       Follow this checklist to help us incorporate your contribution quickly and easily:      ## Checklist  - [x] Make sure there is a [GitHub_issue](https://github.com/sermant-io/Sermant/issues) related with this PR before you start working on it.  - [x] Make sure you have squashed your change to one single commit.  - [ ] GitHub Actions works fine in this PR.  
https://github.com/ShaftHQ/SHAFT_ENGINE/pull/1345	1	readability	2023-10-25 19:46:57	Enhance the Execution summary report readability	Added info icons to be displayed when hovering on to describe some not very clear to the stakeholders information.  ![image](https://github.com/ShaftHQ/SHAFT_ENGINE/assets/46620378/3eae430d-a186-4d93-925e-841dac0725fc)  
https://github.com/ShaftHQ/SHAFT_ENGINE/pull/1711	1	readability	2024-08-24 17:36:49	enhance allure properties readability	
https://github.com/siddhi-io/siddhi/pull/852	14	readability	2018-07-02 11:11:46	A few refactorings to improve code readability.	- `PostStateProcessor#setNextEveryStatePerProcessor` -> `PostStateProcessor#setNextEveryStatePreProcessor`  - `StreamPostStateProcessor#nextStatePerProcessor` -> `StreamPostStateProcessor#nextStatePreProcessor`  - `StreamPostStateProcessor#nextEveryStatePerProcessor` -> `StreamPostStateProcessor#nextEveryStatePreProcessor`
https://github.com/slackapi/java-slack-sdk/pull/1025	5	readability	2022-07-19 00:39:31	Improved readability of tests	Improved the readability of newly created test to:    -  facilitate the understanding of http status codes in tests  - ensure that content types and other web standards are maintained    I don't know if we want to implement this for every test in the library, maybe someone can comment on this?    ### Category (place an `x` in each of the `[ ]`)    * [x] **bolt** (Bolt for Java)  * [x] **bolt-{sub modules}** (Bolt for Java - optional modules)  * [ ] **slack-api-client** (Slack API Clients)  * [ ] **slack-api-model** (Slack API Data Models)  * [ ] **slack-api-*-kotlin-extension** (Kotlin Extensions for Slack API Clients)  * [ ] **slack-app-backend** (The primitive layer of Bolt for Java)    ## Requirements    Please read the [Contributing guidelines](https://github.com/slackapi/java-slack-sdk/blob/main/.github/contributing.md) and [Code of Conduct](https://slackhq.github.io/code-of-conduct) before creating this issue or pull request. By submitting, you are agreeing to the those rules.  
https://github.com/snowflakedb/snowflake-jdbc/pull/963	1	readability	2022-10-31 22:17:01	Improve readability of SnowflakeDatabaseMetaData.getColumn() argument 	 s in debug log.    # Overview    Add missing comma that decrease readability of SnowflakeDatabaseMetaData.getColumn()    ## External contributors - please answer these questions before submitting a pull request. Thanks!    Please answer these questions before submitting your pull requests. Thanks!    1. What GitHub issue is this PR adressing? Make sure that there is an accompanying issue to your PR.       Fixes #962      2. Fill out the following pre-review checklist:       - [ ] I am adding a new automated test(s) to verify correctness of my new code     - [ ] I am adding new logging messages     - [x] _I am editing a logging messages_     - [ ] I am modyfying authorization mechanisms     - [ ] I am adding new credentials     - [ ] I am modyfying OCSP code     - [ ] I am adding a new dependency    3. Please describe how your code solves the related issue.    The missing comma was added.    ## Pre-review checklist  - [ ] This change has passed precommit  - [ ] I have reviewed code coverage report for my PR in  ([Sonarqube](https://sonarqube.int.snowflakecomputing.com/project/branches?id=snowflake-jdbc))    
https://github.com/snowflakedb/snowflake-kafka-connector/pull/303	1	readability	2021-05-06 00:08:50	Add comments to cleaner code for better readability	No Functional Change  https://snowflakecomputing.atlassian.net/browse/SNOW-219520
https://github.com/SonarSource/sonar-scanner-jenkins/pull/149	3	readability	2020-08-07 13:17:20	SONARJNKNS-321 - Improve human readability of Quality Gate status	
https://github.com/SonarSource/sonar-scanner-maven/pull/279	1	readability	2025-03-17 14:46:17	SCANMAVEN-271 Fix readability issues in ProxyTest	[SCANMAVEN-271](https://sonarsource.atlassian.net/browse/SCANMAVEN-271)    [SCANMAVEN-271]: https://sonarsource.atlassian.net/browse/SCANMAVEN-271?atlOrigin=eyJpIjoiNWRkNTljNzYxNjVmNDY3MDlhMDU5Y2ZhYzA5YTRkZjUiLCJwIjoiZ2l0aHViLWNvbS1KU1cifQ
https://github.com/SORMAS-Foundation/SORMAS-Project/pull/11142	4	readability	2022-12-14 08:29:26	#3429 Improve readability of long captions for buttons	    If you've never submitted a pull request to the SORMAS repository before or this is your first time using this template, please read the Contributing guidelines (https://github.com/hzi-braunschweig/SORMAS-Project/blob/development/docs/CONTRIBUTING.md) for an explanation of our guidelines regarding pull requests. You don't have to remove this comment or from your pull request as it will automatically be hidden.    Please specify the number of the issue this pull request is related to after the #.     Fixes #3429
https://github.com/spinnaker/fiat/pull/475	1	readability	2019-09-26 19:30:40	fix(error): Test various access denied scenarios and improve readability	Small improvement to readability ("service account" instead of "serviceaccount") and additional tests.
https://github.com/spring-cloud/spring-cloud-netflix/pull/1686	8	readability	2017-02-16 17:48:49	Refactoring for better readability. 	- Polishing imports  - Removing hostname & port from TestRestTemplate-calls  - Substituting @Value("${local.server.port}") with @LocalServerPort
https://github.com/spring-projects/spring-amqp/pull/2859	12	readability	2024-10-16 13:57:57	Improve condition for more readability	I read code in package `org.springframework.amqp.core` and I think some codebase conditions are too complex and we can make it simple for readability purpose.    That's why I create draft PR and I wonder whether I can continue to do this, at least in package `org.springframework.amqp.core`. Please let me know your thoughts
https://github.com/square/moshi/pull/245	1	readability	2017-02-02 14:10:46	Fix isPlatformType	createFieldBindings should not take the allowed platform types into  account.    Uh, so this isn't effectively a problem, and I'm nitpicking my change and improving readability. Figured I'd post here, anyway!    https://github.com/NightlyNexus/moshi/blob/e43252582ab74fe578a15591a683d5e5582d1a40/moshi/src/main/java/com/squareup/moshi/ClassJsonAdapter.java#L83 should not create bindings for private fields of these allowed platform types.  This isn't effectively a problem because the StandardJsonAdapters factory is installed first, and a lot of other things would break before this could ever be a problem.
https://github.com/StarRocks/starrocks/pull/25490	12	readability	2023-06-19 07:32:12	[Enhancement] improve the readability for parser error msg	Previously, our parser did not provide enough info for user how to change the input clause when encountering incorrect input. When handling tokens that do not conform to the rules, Antlr records expecting tokens. However, the expecting tokens include all possible tokens, which leads to excessive information and can even mislead the user. To address this, we compare the customer's input with the expected input and return the top 5 most similar expected words by comparing their [jaroWinklerDistance](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance) .  For example:  ```  CREATE TABLE IF NOT EXISTS timetest (    `v1` int(11) NOT NULL,    `v2` int(11) NOT NULL,    `v3` int(11) NOT NULL  ENGINE=OLAPDUPLICATE KEY(`v1`)  DISTRIBUTED BY HASH(`v1`) BUCKETS 10  PROPERTIES (   "replication_num" = "1"  );    # the create table clause misses a ')' before the 'ENGINE', now the error message is:  Getting syntax error at line 5, column 1. Detail message: Unexpected input 'ENGINE', the most similar input is {',', ')'}    select , from tbl    # the select clause misses a identifier in the select list  Getting syntax error at line 1, column 7. Detail message: Unexpected input ',', the most similar input is {a legal identifier}.  ```    ## What type of PR is this:  - [ ] BugFix  - [ ] Feature  - [x] Enhancement  - [ ] Refactor  - [ ] UT  - [ ] Doc  - [ ] Tool    ## Checklist:  - [x] I have added test cases for my bug fix or my new feature  - [ ] This pr will affect users' behaviors  - [ ] This pr needs user documentation (for new or modified features or behaviors)    - [ ] I have added documentation for my new feature or new function    ## Bugfix cherry-pick branch check:  - [x] I have checked the version labels which the pr will be auto-backported to the target branch    - [x] 3.1    - [ ] 3.0    - [ ] 2.5    - [ ] 2.4  
https://github.com/StarRocks/starrocks/pull/25640	12	readability	2023-06-20 05:21:27	[Enhancement] improve the readability for parser error msg (backport #25490)	backport #25490
https://github.com/strimzi/strimzi-kafka-operator/pull/11343	1	readability	2025-04-14 10:48:58	Refactor CaReconcilerTest to improve readability	### Type of change    _Select the type of your PR_    - Refactoring    ### Description    Refactor the CaReconcilerTest class to improve readability.  This existing class is hard to follow since there are so many assertThat calls and many variables with similar names like clientsCaCertData, clientsCaKeyData, clusterCaCertData, clusterCaKeyData.  This PR pulls out the common asserts that check the certificate files and key files are all present and not null.  It also removes some variables that are only used once, again to improve readability.    Finally it removes the checks that compare the Ca truststore file as a whole. These checks are only passing   because in the Ca class in some cases we reuse the data directly, rather than instantiating a new hashmap.  The tests don't need to check the whether it is the exact same file, and in `testExpiredCertsGetRemovedAuto` we   actually wouldn't expect the file to be the same.  Since there are already checks that the correct cert is present in the truststore, the asserts that compare the whole file can be removed.    ### Checklist    _Please go through this checklist and make sure all applicable tasks have been done_    - [ ] Write tests  - [ ] Make sure all tests pass  - [ ] Update documentation  - [ ] Check RBAC rights for Kubernetes / OpenShift roles  - [ ] Try your changes from Pod inside your Kubernetes and OpenShift cluster, not just locally  - [ ] Reference relevant issue(s) and close them after merging  - [ ] Update CHANGELOG.md  - [ ] Supply screenshots for visual changes, such as Grafana dashboards    
https://github.com/stripe/stripe-android/pull/4337	1	readability	2021-11-02 21:02:05	[shared network stack] - Remove payment specific logic from `StripeRequest`	# Summary     Simple summary of what was changed.      Ready `StripeRequest` to be shared with non-payment modules    * Replace plain Int/String values for constants for readability  * Clean up `StripeRequest`: the following payment specifc logics are pushed down to its 4 subclasses `ApiRequest`, `AnalyticsRequest`, `FileUploadRequest` and `FraudDetectionDataRequest`   * `compatcParams` - used to convert Map String, ?> into `?param1=value1$param2=value2` for `GET` requests, the logic is moved to `QueryStringFactory`   * `url` calculation - determine `https://api.a.b/endpoint1` or `https://api.a.b/endpoint1?p1=v1&p2=v2`, pushed to subclasses   * `contentType` - this was used to determine additional HTTP header for POST request, logic moved to `RequestHeadersFactory`   * `body`/`bodyBytes` - this is overriden for writing the body of a POST, pushed to subclasses, only leave a #writePostBody interface   * For a glimpse of the content of the 4 subclasses, please refer to [this](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=375544053939147790920210&h2=Content-of-different-subtypes-) section  * Update corresponding tests    # Follow up    1. The 4 sub types have their corresponding Executors with similar functions(`ApiRequestExecutor`, `AnalyticsRequestExecutor` and FraudDetectionDataRequestExecutor), combine them all into one class `StripeNetworkClient` (See this [section](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=412537738470059573914198&h2=Combined-implementation) for details) - complete [milestone 1](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=938966298853180484357471&h2=M1:-Reimplement-the-network-st)    2. Create `stripe-core` module, move `StripeNetworkClient`, `StripeRequest`, `AnalyticsRequest` and `StripeResponse` into it - complete [milestone 2](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=731976117585995524854629&h2=M2:-Create-stripe-core-and-mov)    3. Let `cardverification` depend on `stripe-core` and use the network stack (see [this](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=725394779989561959740962&h2=Migration-from-Bouncer) section for details) - complete [milestone 3](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs#:uid=144309744753895447281876&h2=M3:-Migrate-to-the-same-networ)    # Motivation     Why are you making this change? If it's for fixing a bug, if possible, please include a code snippet or example project that demonstrates the issue.    Please see details in [this](https://paper.dropbox.com/doc/Combining-Payment-Bouncers-network-stack--BVKnlZ7TgmXNs~AoX3Do70RVAg-fim9iEtIR9gRGrhQZPACs) internal doc          # Testing     How was the code tested? Be as specific as possible.    - [x] Added tests  - [x] Modified tests  - [x] Manually verified  
https://github.com/sublinks/sublinks-api/pull/259	8	readability	2024-03-04 15:44:09	Implement PaginationControllerUtils for better code readability	This commit adds the PaginationControllerUtils, which manages pagination-related aspects in various kinds of "get" requests. This utility class effectively addresses the issue of null or inappropriate page or limit values by providing a default value. It enhances the readability of the code by implementing more easily understandable methods, and also secures value boundaries to prevent potential errors.    closes #253 
https://github.com/sublinks/sublinks-api/pull/417	1	readability	2024-06-08 22:04:03	Refactor CommentService for improved readability	The changes include breaking down longer lines of codes into multiple lines to improve code readability. This includes method calls and error handling. Also, an update has been added to increment the children count when a comment is created under another comment.
https://github.com/SweetRazory/WaystonesPlus/pull/9	16	readability	2023-07-06 05:45:06	Refactor and Improve Code Readability (Deleted extra lines, modified if-else statements)	  This commit brings multiple stylistic changes across various modules meant to improve code readability and maintainability. Unnecessary blank lines through files are removed along with extraneous comment lines. In addition, excessive nesting through conditional statements (if-else) are refactored to reduce complexity and improve readability, as a part of which early returns are introduced where suitable. Additional logging messages are also introduced to give more detailed diagnostics for potential issues. No functional changes were introduced in this commit.    That was generated by an AI. Pretty accurate!
https://github.com/tahminator/codebloom/pull/59	5	readability	2025-01-24 05:20:59	Refactored a couple things to improve readability. Also, added userna 	 me info the submission payload.
https://github.com/tchiotludo/akhq/pull/2051	7	readability	2025-03-14 21:31:22	fix(masking): Various performance, functional, and readability fixes for JSON-based masking	Several fixes here:  1) I realised after further usage and some extensive testing in more complex scenarios that JSON Arrays weren't handled correctly - they were always either masked at the whole field level (on Mask By Default mode), or left unmasked (on Show By Default mode). Now, the same settings that apply now also apply to nested objects inside arrays, or if the array contains primitives, the higher level array will apply. So for example, given:    ```  address.firstLine  ```    this will now apply to both:    ```  {    "address": {        "firstLine": "value"    }  }  ```  and now also to all the `firstLine` values in an array type, too (this was not working correctly previously):  ```  {    "address": [      {        "firstLine": "value"      },      {        "firstLine": "someOtherValue"      }    ]  }  ```    Primitives will be handled as expected as well, where a filter like:    ```  address.values  ```    would now result that the following object:    ```  {      "address": {        "values": [ "one", "two", "three" ]      }  }  ```    will correctly look like:    ```  {      "address": {        "values": [ "xxxx", "xxxx", "xxxx" ]      }  }  ```    instead of the current:    ```  {      "address": {        "values": "xxxx"      }  }  ```  which is currently losing the format, as well as non-sensitive information such as array length.    2) Some readability improvements & fixes, also updating tests to be uniform, so the exact same test code is not repeated. Now the `JsonMaskerTest` interface defines the core tests the input and output, with the `ShowByDefault` and `MaskByDefault` tests implementing the interface (with their own backing `application.yml` which makes them fit the test criteria) and have their own specific tests written in the class only    3) Small performance improvements, including defining the topic -> filtering keys in the constructor rather than constantly re-evaluating     4) Remove the phrase "Please contact akhq administrator" which is likely to cause confusion and bring people here, when the issue isn't AKHQ but that a record has not fulfilled the criteria for masking
https://github.com/TEAMMATES/teammates/pull/8258	2	readability	2018-01-28 08:40:49	StringHelper: Use functional programming to improve code readability #7838	Fixes #7838    **Outline of Solution**       Tell us how you solved the issue.    I refactored methods to use Java 8's streams API to improve readability. I left some functions untouched because I felt refactoring them would not improve the code quality or I wasn't sure how to refactor them to use streams. Examples of those methods are [`csvToHtmlTable`](https://github.com/darrenwee/teammates/blob/84b3b649d5ac723acf1b2d079ff9e35cd15f75bd/src/main/java/teammates/common/util/StringHelper.java#L332) and [`byteArrayToHexString`](https://github.com/darrenwee/teammates/blob/84b3b649d5ac723acf1b2d079ff9e35cd15f75bd/src/main/java/teammates/common/util/StringHelper.java#L307).    I see #8257 was also filed two hours ago. I posted in #7838 that I would take the issue. Possible to merge the two together?    (sorry for the delay, I'm on vacation and don't have consistent access to my laptop)
https://github.com/TeamNewPipe/NewPipe/pull/7562	9	readability	2021-12-23 22:54:29	Small improvements to code quality and readability	   Hey there. Thank you so much for improving NewPipe, and filling out the details. Having roughly the same layout helps everyone considerably :)     #### What is it?  - [ ] Bugfix (user facing)  - [ ] Feature (user facing)  - [x] Codebase improvement (dev facing)  - [ ] Meta improvement to the project (dev facing)    #### Description of the changes in your PR  - Make `PlayerHolder.bound` private   - Introduce constants for some Strings that indicate no data in `Tab` class  - Add annotations to methods and parameters.  - Replace Jetbrains' `@NotNull` with Androidx' `@NonNull` annotatiation.  - Make class variables static if possible.  - Use constants for some Strings.  - Simplify if conditions.    #### APK testing      Use a new, meaningfully named branch. The name is used as a suffix for the app ID to allow installing and testing multiple versions of NewPipe, e.g. "commentfix", if your PR implements a bugfix for comments. (No names like "patch-0" and "feature-1".)        Remove the following line if you directly link the APK created by the CI pipeline. Directly linking is preferred if you need to let users test.   The APK can be found by going to the "Checks" tab below the title. On the left pane, click on "CI", scroll down to "artifacts" and click "app" to download the zip file which contains the debug APK of this PR.    #### Due diligence  - [x] I read the [contribution guidelines](https://github.com/TeamNewPipe/NewPipe/blob/HEAD/.github/CONTRIBUTING.md).  
https://github.com/testcontainers/testcontainers-java/pull/6625	5	readability	2023-02-16 04:49:41	Ensure readability of MySQL and MariaDB config override	Fixes #914, fixes #4952, supersedes (and heavily based on) #5401.    Most credits to @driverpt!
https://github.com/testng-team/testng/pull/1861	1	readability	2018-07-13 03:55:09	Refactoring ClassHelper for readability.	Also removed getEnclosingClass() which is now  available in JDK itself.    Fixes # .    ### Did you remember to?    - [ ] Add test case(s)  - [ ] Update `CHANGES.txt`    We encourage pull requests that:    * Add new features to TestNG (or)  * Fix bugs in TestNG    If your pull request involves fixing SonarQube issues then we would suggest that you please discuss this with the   [TestNG-dev](https://groups.google.com/forum/#!forum/testng-dev) before you spend time working on it.  
https://github.com/TheAlgorithms/Java/pull/4663	13	readability	2023-10-11 11:59:56	Improved code readability and code quality	+ Fixed typos in several files to improve readability and grammar  + Implemented methods to increase efficiency of algorithms        Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review          For completed items, change [ ] to [x]      - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  
https://github.com/TheAlgorithms/Java/pull/4835	1	readability	2023-10-19 19:02:28	Fixed typo error for better readability	    Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review     Fixed typo error in ColorContrastRatio  Fixes #4717     - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  - [x] All new code is formatted with `clang-format -i --style=file path/to/your/file.java`
https://github.com/TheAlgorithms/Java/pull/4914	1	readability	2023-10-30 22:18:05	Enhance code density and readability	    Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review       Optimized power calculation algorithm for efficiency and add comments for improved readability. Also added Wikipedia link for the mathematical explanation of the algorithm.       For completed items, change [ ] to [x]      - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  - [x] All new code is formatted with `clang-format -i --style=file path/to/your/file.java`
https://github.com/TheAlgorithms/Java/pull/5498	1	readability	2024-10-02 13:55:57	Improve comments & readability in `ClimbingStairs.java`	    Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review       The comment improvements for the `ClimbingStairs` class enhance clarity and adherence to Java documentation standards. The initial comment succinctly explains the problem and provides a detailed example of climbing combinations for five steps. The method-level comment for `numberOfWays` clearly outlines its purpose, input parameters, and return values, including special cases for `n = 0` and `n = 1`. Inline comments within the method further clarify variable roles and loop logic, resulting in more readable and maintainable code.       For completed items, change [ ] to [x]      - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  - [x] All new code is formatted with `clang-format -i --style=file path/to/your/file.java`
https://github.com/TheAlgorithms/Java/pull/5523	2	readability	2024-10-05 12:43:42	Enhance comments & improve readability in `LongestCommonSubsequence.java`	    Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review          For completed items, change [ ] to [x]      - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  - [x] All new code is formatted with `clang-format -i --style=file path/to/your/file.java`
https://github.com/TheAlgorithms/Java/pull/5526	2	readability	2024-10-05 09:47:53	Improve `TrieImp.java` comments, add unit tests and enhance readability	    Thank you for your contribution!  In order to reduce the number of notifications sent to the maintainers, please:  - create your PR as draft, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests#draft-pull-requests,  - make sure that all of the CI checks pass,  - mark your PR as ready for review, cf. https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/changing-the-stage-of-a-pull-request#marking-a-pull-request-as-ready-for-review          For completed items, change [ ] to [x]      - [x] I have read [CONTRIBUTING.md](https://github.com/TheAlgorithms/Java/blob/master/CONTRIBUTING.md).  - [x] This pull request is all my own work -- I have not plagiarized it.  - [x] All filenames are in PascalCase.  - [x] All functions and variable names follow Java naming conventions.  - [x] All new algorithms have a URL in their comments that points to Wikipedia or other similar explanations.  - [x] All new code is formatted with `clang-format -i --style=file path/to/your/file.java`
https://github.com/TNG/ArchUnit/pull/369	4	readability	2021-05-24 11:26:49	Improve Cycle Violation Report Readability	There was more code duplication in my changes than I'd hoped there to be, but without more time diving into how the integration tests work, I'm unsure if there is a slicker way to do it.    With this PR, cycle output is now:    ```  Cycle detected: Slice onedependency ->                   Slice thirtydependencies ->                   Slice threedependencies ->                   Slice onedependency      1. Dependencies of Slice onedependency          - Field  com.tngtech.archunit.library.dependencies.testexamples.cyclewithunbalanceddependencies.onedependency.OneDependency.dependency1> has type  com.tngtech.archunit.library.dependencies.testexamples.cyclewithunbalanceddependencies.thirtydependencies.ThirtyDependencies> in (OneDependency.java:0)      2. Dependencies of Slice thirtydependencies          - Field  com.tngtech.archunit.library.dependencies.testexamples.cyclewithunbalanceddependencies.thirtydependencies.ThirtyDependencies.dependency10> has type  com.tngtech.archunit.library.dependencies.testexamples.cyclewithunbalanceddependencies.threedependencies.ThreeDependencies> in (ThirtyDependencies.java:0)          - Field  com.tngtech.archunit.library.dependencies ...  ```
https://github.com/tokiwa-software/fuzion/pull/783	1	readability	2022-12-13 15:09:42	ast: isSpecialWrtArgs, improve comment readability	
https://github.com/tokiwa-software/fuzion/pull/2610	5	readability	2024-03-04 12:41:41	fe: attempt to improve readability of code of `Impl`	    Please describe your changes here, explain what effect this PR will have and how  this is achieved.  Refer to the # of the issue this PR addresses.  Make  sure the tests run successfully using `make run_tests`.       - [x] I have read and accept the [Tokiwa Software Fuzion Contributor Agreement](https://github.com/tokiwa-software/fuzion/blob/main/CONTRIBUTOR_LICENSE_AGREEMENT.md).  
https://github.com/TownyAdvanced/SiegeWar/pull/295	1	readability	2021-06-26 11:17:28	Config file readability improvements	#### Description:   - Config file readability improvements.  - No functional changes.  - Mostly just adding section headers for existing sections.    ____  #### New Nodes/Commands/ConfigOptions:   N/A    ____  #### Relevant Issue ticket:  N/A    ____  - [x] I have tested this pull request for defects on a server.     By making this pull request, I represent that I have the right to waive copyright and related rights to my contribution, and agree that all copyright and related rights in my contributions are waived, and I acknowledge that the TownyAdvanced organization has the copyright to use and modify my contribution under the SiegeWar [License](https://github.com/TownyAdvanced/SiegeWar/blob/master/LICENSE.md) for perpetuity.  
https://github.com/trinodb/trino/pull/371	3	readability	2019-03-05 11:04:19	Refactor test code for readability	* extract `queryTypeSelectionCriteria` method  * reorder methods so that helper methods are last  * merge `testInvalidQueryTypeConfiguration`, `testNonExistentGroup` with    other `testInvalid` test cases
https://github.com/quelea-projection/Quelea/pull/489	1	readability	2021-10-09 22:25:05	Replaced magic constant on CreateTimerPanel with a specific variable for readability	
https://github.com/trinodb/trino/pull/6047	10	readability	2020-11-24 11:04:33	Improve readability of product tests execution logs	This PR modifies how different information is displayed while running product tests. Here are the examples:    * List of containers that are created during the environment startup:    ```  +---------------+-------------------+---------------------------+---------+----------------------------------------------------------------------------+  |     container |              name |                     image | startup |                                                                      ports |  +---------------+-------------------+---------------------------+---------+----------------------------------------------------------------------------+  |         tests |         ptl-tests |  prestodev/centos6-oj8:34 |  7.77ms |                                                                            |  | presto-master | ptl-presto-master | prestodev/centos7-oj11:34 |  44.02s |                                                                       8080 |  | hadoop-master | ptl-hadoop-master |  prestodev/hdp2.6-hive:34 |  22.89s | 1180, 8020, 8042, 8088, 9000, 9083, 9864, 9870, 10000, 19888, 50070, 50075 |  +---------------+-------------------+---------------------------+---------+----------------------------------------------------------------------------+  ```    * List of test runs in a suite:    ```  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  |                                                 environment |             groups | excluded groups |                                              tests | excluded tests |  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  |                                               multinode-tls |              smoke |     skip_on_cdh |                                                    |                |  |                                                             |                cli |         iceberg |                                                    |                |  |                                                             |           group-by |                 |                                                    |                |  |                                                             |               join |                 |                                                    |                |  |                                                             |                tls |                 |                                                    |                |  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  |                                      multinode-tls-kerberos |                cli |     skip_on_cdh |                                                    |                |  |                                                             |           group-by |         iceberg |                                                    |                |  |                                                             |               join |                 |                                                    |                |  |                                                             |                tls |                 |                                                    |                |  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  | singlenode-kerberos-hdfs-impersonation-with-wire-encryption |    storage_formats |     skip_on_cdh |                                                    |                |  |                                                             |                cli |         iceberg |                                                    |                |  |                                                             | hdfs_impersonation |                 |                                                    |                |  |                                                             |      authorization |                 |                                                    |                |  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  | singlenode-kerberos-hdfs-impersonation-with-data-protection |                    |     skip_on_cdh | TestHiveStorageFormats.testOrcTableCreatedInPresto |                |  |                                                             |                    |         iceberg |                TestHiveCreateTable.testCreateTable |                |  +-------------------------------------------------------------+--------------------+-----------------+----------------------------------------------------+----------------+  ```    * Suite results:    ```  +----------------------------------+------------+-------------+----------------+---------+---------+--------------------------+  |                               id |      suite | environment |         config |  status | elapsed |                    error |  +----------------------------------+------------+-------------+----------------+---------+---------+--------------------------+  | 86c31ba456914714acb8d4b3f795876e | suite-test |  singlenode | config-default | SUCCESS |   1.39m |                        - |  | 65254e18fad84b84bb68d16847b1119e | suite-test |   multinode | config-default |  FAILED |   1.60m | Tests exited with code 1 |  +----------------------------------+------------+-------------+----------------+---------+---------+--------------------------+  ```    The `suite run id` was changed from a numeric index to a random UUID. I've added a marker in the suite execution that allows to quickly find where the suite started and finished.
https://github.com/trinodb/trino/pull/9958	2	readability	2021-11-17 12:30:32	Use more functional style to improve code readability	
https://github.com/trinodb/trino/pull/13941	266	readability	2022-09-05 14:20:03	Leverage Optional.orElseThrow to increase code readability	Use of `Optional.orElseThrow` allows to verify the optional is not empty  before assigning to a variable. This subsequently removes need for  `Optional.get()` calls.      --------------  please ignore this section    - [ ] a checkbox  - [ ] another checkbox  
https://github.com/trinodb/trino/pull/15908	3	readability	2023-02-01 12:27:06	Break long ci.yml condition for readability	
https://github.com/trinodb/trino/pull/17206	5	readability	2023-04-25 01:51:55	Improve code readability with QueryTracker#hasQuery	## Description    Add a method to QueryTracker to test if query is still within history without need to allocate new Optional each time.        Provide details that would help an engineer who is unfamiliar with this part of the code.    ## Additional context and related issues       Mark the appropriate option with an (x). Propose a release note if you can.    ## Release notes    (x) This is not user-visible or docs only and no release notes are required.  ( ) Release notes are required, please propose a release note for me.  ( ) Release notes are required, with the following suggested text:    
https://github.com/typetools/checker-framework/pull/3918	5	readability	2020-11-23 17:06:40	Change boolean to enum for readability; fixes #3390	Fixes #3390
https://github.com/quickfix-j/quickfixj/pull/347	3	readability	2021-09-26 22:41:02	Add methods to `FieldMap` API to make it usable in for-each loop	FieldMap already provides iterator() to inspect all fields, however does not implement Iterable - and so can't be used in for-each loop. This PR adds Iterable interface, as well as groupKeys() which exposes group keys as Iterable.  The motivation for the change is that in some cases it is useful to traverse message as a tree of key-value pairs - e.g. when visualising message structure in UI, or transforming it to another intermediate representation. Being able to iterate in a more idiomatic Collection-like way improves readability of such code.    I was thinking about marking iterator() and groupKeyIterator() as deprecated - I don't see any advantages of those methods over Iterable. In the end decided to not do this for the first cut, but they can be eventually retired.
https://github.com/undertow-io/undertow/pull/850	1	readability	2020-09-11 08:28:10	[UNDERTOW-1779] Mark several fields of Http2Channel as final	No impact, this simply marks an immutable field final for  readability.
https://github.com/randoop/randoop/pull/1026	4	readability	2022-03-21 19:50:45	Undo refactorings in deb125dab8 that hurt readability	
https://github.com/redhat-developer/intellij-tekton/pull/383	2	readability	2021-03-12 12:56:38	refactor: extracted methods in StartAction for improved maintability	extracted smaller methods to improved readability/maintainability (simplifies #331)
https://github.com/Unleash/unleash-client-java/pull/130	3	readability	2021-03-16 13:53:37	chore: Use getOrDefault instead of Optional.ofNullable.orElse to aid in readability	No functional change here. Just making code easier to read/reason about
https://github.com/usnistgov/metaschema-java/pull/240	1	readability	2023-10-20 14:24:49	Refactor Metapath CST range tests for readability	# Committer Notes    This change was discussed and agreed upon while pairing for an unrelated issue in #239, so I am pointing this PR directly to develop to be merged in separately.    ### All Submissions:    - [x] Have you followed the guidelines in our [Contributing](https://github.com/usnistgov/metaschema/blob/master/CONTRIBUTING.md) document?  - [x] Have you checked to ensure there aren't other open [Pull Requests](https://github.com/usnistgov/metaschema/pulls) for the same update/change?  - [x] Have you squashed any non-relevant commits and commit messages? \\[[instructions](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History)\\]  - [x] Do all automated CI/CD checks pass?    ### Changes to Core Features:    - [x] Have you added an explanation of what your changes do and why you'd like us to include them?  - ~Have you written new tests for your core changes, as applicable?~ This is a change to an existing test.  - ~Have you included examples of how to use your new feature(s)?~  - ~Have you updated all website](https://pages.nist.gov/metaschema) and readme documentation affected by the changes you made? Changes to the website can be made in the website/content directory of your branch.~  
https://github.com/virtualcell/vcell/pull/164	3	readability	2022-07-18 14:17:14	Cli readability	minor reorganization to reduce static variables and clarify flow of control for Omex exporting.
https://github.com/vividus-framework/vividus/pull/1374	7	readability	2021-01-21 15:32:14	[bdd-engine] Improve readability of log message about variable saving	
https://github.com/vividus-framework/vividus/pull/3996	4	readability	2023-05-30 07:48:00	Improve readability in StringComparisonRule	
https://github.com/wildfly-security/wildfly-elytron/pull/1968	1	readability	2023-09-22 22:48:21	ELY-2616: Replacing switch statement by if statements to increase readability	https://issues.redhat.com/browse/ELY-2616
https://github.com/wildfly-security/wildfly-elytron/pull/2015	1	readability	2024-03-08 18:01:48	ELY-2594 Changed switch to if-else to increase readability for Elytro 	 nXmlParser  updates made to https://github.com/wildfly-security/wildfly-elytron/pull/1978  issue: https://issues.redhat.com/browse/ELY-2594
https://github.com/wildfly/wildfly-core/pull/4231	1	readability	2020-06-22 08:53:31	[WFCORE-5006] Improve readability of domain host controller server logs in tests	This PR does the following:  - adds host name information to HostController start and started log messages to allow differentiating between multiple HostController instances on the same host, which often arises in domain test cases.     More details: https://issues.redhat.com/browse/WFCORE-5006
https://github.com/wso2/carbon-identity-framework/pull/4782	5	readability	2023-08-02 05:12:02	Add Comments and Improve Readability in Admin Service Clients	### Proposed changes in this pull request    $subject      ### When should this PR be merged    [Please describe any preconditions that need to be addressed before we  can merge this pull request.]      ### Follow up actions    [List any possible follow-up actions here; for instance, testing data  migrations, software that we need to install on staging and production  environments.]    -      ### Checklist (for reviewing)    #### General    - [ ] **Is this PR explained thoroughly?** All code changes must be accounted for in the PR description.  - [ ] **Is the PR labeled correctly?**    #### Functionality    - [ ] **Are all requirements met?** Compare implemented functionality with the requirements specification.  - [ ] **Does the UI work as expected?** There should be no Javascript errors in the console; all resources should load. There should be no unexpected errors. Deliberately try to break the feature to find out if there are corner cases that are not handled.    #### Code    - [ ] **Do you fully understand the introduced changes to the code?** If not ask for clarification, it might uncover ways to solve a problem in a more elegant and efficient way.  - [ ] **Does the PR introduce any inefficient database requests?** Use the debug server to check for duplicate requests.  - [ ] **Are all necessary strings marked for translation?** All strings that are exposed to users via the UI must be [marked for translation](https://docs.djangoproject.com/en/1.10/topics/i18n/translation/).    #### Tests    - [ ] **Are there sufficient test cases?** Ensure that all components are tested individually; models, forms, and serializers should be tested in isolation even if a test for a view covers these components.  - [ ] **If this is a bug fix, are tests for the issue in place?**  There must be a test case for the bug to ensure the issue won t regress. Make sure that the tests break without the new code to fix the issue.  - [ ] **If this is a new feature or a significant change to an existing feature?** has the manual testing spreadsheet been updated with instructions for manual testing?    #### Security    - [ ] **Confirm this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets.**  - [ ] **Are all UI and API inputs run through forms or serializers?**  - [ ] **Are all external inputs validated and sanitized appropriately?**  - [ ] **Does all branching logic have a default case?**  - [ ] **Does this solution handle outliers and edge cases gracefully?**  - [ ] **Are all external communications secured and restricted to SSL?**    #### Documentation    - [ ] **Are changes to the UI documented in the platform docs?** If this PR introduces new platform site functionality or changes existing ones, the changes should be documented.  - [ ] **Are changes to the API documented in the API docs?** If this PR introduces new API functionality or changes existing ones, the changes must be documented.  - [ ] **Are reusable components documented?** If this PR introduces components that are relevant to other developers (for instance a mixin for a view or a generic form) they should be documented in the Wiki.  
https://github.com/wso2/carbon-identity-framework/pull/6167	1	readability	2024-12-02 05:19:29	Rename variable for readability	### Proposed changes in this pull request    $subject    ### Related Issue    - https://github.com/wso2-enterprise/asgardeo-product/issues/27603
https://github.com/xm-online/xm-commons/pull/74	4	readability	2019-10-23 10:38:05	Feature 21597/improve logs readability	
https://github.com/zowe/api-layer/pull/726	4	readability	2020-06-25 11:36:19	Move and rename CORS related tests for improved readability	Signed-off-by: Jakub Balhar  jakub.balhar@broadcom.com>    # Description    Move CORS related tests into separate package and group in classes together relevant tests.    Fixes # (issue)    #384    ## Type of change    - [x] Refactoring    # Checklist:    - [x] My code follows the style guidelines of this project  - [x] I have performed a self-review of my own code  - [x] I have commented my code, particularly in hard-to-understand areas  - [x] I have made corresponding changes to the documentation  - [x] My changes generate no new warnings  - [x] I have added tests that prove my fix is effective or that my feature works  - [x] New and existing unit tests pass locally with my changes  - [x] Any dependent changes have been merged and published in downstream modules    For more details about how should the code look like read the [Contributing guideline](https://github.com/zowe/api-layer/blob/master/CONTRIBUTING.md)  
https://github.com/zowe/api-layer/pull/948	4	readability	2020-11-26 08:36:10	Improve readability of the startup checker	Signed-off-by: Jakub Balhar  jakub.balhar@broadcom.com>    # Description  Improve the readability of the logs in the context of the startup checking. Also by default set DEBUG on the test code.     Linked to #860 
https://github.com/actiontech/dble/pull/3014	1	readability	2021-12-22 07:11:14	inner-1471:  Improve readability	Signed-off-by: dcy  dcy10000@gmail.com>    Reason:         Improve inner-1471:  Improve readability  Type:      Improve    Influences        fix xx  
https://github.com/albertogoffi/toradocu/pull/152	1	readability	2017-06-14 12:31:36	Improve ReturnTranslator readability	
https://github.com/alibaba/nacos/pull/8022	1	readability	2022-03-30 01:25:11	Improve the code readability of TimerContext replace if with switch case	Please do not create a Pull Request without creating an issue first.    ## What is the purpose of the change    Improve the code readability of TimerContext replace if with switch case    ## Brief changelog    XX    ## Verifying this change    XXXX    Follow this checklist to help us incorporate your contribution quickly and easily:    * [ ] Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.  * [ ] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.  * [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  * [ ] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/alibaba/nacos/tree/master/test).  * [ ] Run `mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.    
https://github.com/alibaba/nacos/pull/9108	7	readability	2022-09-07 08:24:22	[ISSUE#9013] Do some refactor for readability.	Please do not create a Pull Request without creating an issue first.    ## What is the purpose of the change    For #9013 .    ## Brief changelog    - Refactor DefaultClientConfig for readability  - Rename DefaultClientConfig > DefaultGrpcClientConfig  - only load grpc config from system one time.    ## Verifying this change    Follow this checklist to help us incorporate your contribution quickly and easily:    * [x] Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.  * [x] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.  * [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  * [x] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/alibaba/nacos/tree/master/test).  * [x] Run `mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.    
https://github.com/all-of-us/workbench/pull/3252	2	readability	2020-03-16 19:21:08	[RW-4412][RISK=NO]Format Dataset builder SQL query for readability	I used hibernate's BasicFormatterImpl that formats the SQL hence now we have query from dataset as follows in notebook     For R:      img width="1028" alt="Screen Shot 2020-03-12 at 11 01 36 PM" src="https://user-images.githubusercontent.com/34481816/76585847-d4301300-64b5-11ea-983f-9e03b94c8a5b.png">    For python   img width="1187" alt="Screen Shot 2020-03-12 at 10 58 28 PM" src="https://user-images.githubusercontent.com/34481816/76585854-de521180-64b5-11ea-81ca-5a5593604c65.png">      ---  **PR checklist**    - [ ] This PR meets the Acceptance Criteria in the JIRA story  - [ ] The JIRA story has been moved to Dev Review  - [ ] This PR includes appropriate unit tests  - [ ] I have run and tested this change locally  - [ ] If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers  - [ ] If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later  
https://github.com/alpinegizmo/flink-mobile-data-usage/pull/2	5	readability	2021-10-12 19:22:42	added comments for readability	
https://github.com/amazon-ion/ion-java/pull/645	6	readability	2023-11-20 22:43:30	Improves the readability of IonTypeID and makes other minor changes to address PR feedback.	*Description of changes:*    Addresses feedback left on #639 and #640.    By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.  
https://github.com/Anushka-codergirl/Java/pull/81	15	readability	2022-10-19 15:19:56	 Improved Readability fixed errors 	
https://github.com/apache/accumulo/pull/793	5	readability	2018-12-12 22:57:50	Cleanup TabletServerLogger	* Remove unnecessary object manipulation across method calls  * Removed unused methods and overloaded write methods  * Replaced code with lambdas    I am hoping this is a first step to WAL improvements.  I believe when durability was added, loops were added to remove mutations from Maps that had durability = NONE.  I removed the loops between the method calls and simply did not add the mutations to the map initially if durability was NONE.  Made other minor improvements as well that should help improve readability and complexity. 
https://github.com/apache/accumulo/pull/890	12	readability	2019-01-16 17:49:22	Organize new Bulk Import code	My attempt to make the new code easier to follow and maintain.     * Move bulk import clientImpl code to its own bulk package  * Pull some FaTE logic out of BulkImport  * Made the LoadMappingIterator its own class and push some of the reader logic into it  * Added comments to BulkSerialize  * Removed some VisibileForTesting annotations from ConcurrentKeyExtentCache where its used in BulkImport  * Pulled some logic out of LoadFiles.loadFiles and created some new methods for readability
https://github.com/apache/accumulo/pull/1604	2	readability	2020-05-06 11:40:39	Remove non-looping 'while' loops.	ReplicationClient.java and ThriftServerBindsBeforeZooKeeperLockIT.java contain instances of 'while' loops which never loop.    In the case of ReplicationClient, the loop is always entered but either returns or throws an exception.    ThriftServerBindsBeforeZooKepperLockIT contains three 'while' blocks that never loop. Each of the outer 'while' blocks contain another 'while' which does loop until a condition is met resulting in a  'return' case being satisfied.    The outer loop does not appear to be necessary in each of these cases. These loops have been removed to increase readability of the code.
https://github.com/apache/accumulo/pull/1661	3	readability	2020-07-28 19:24:08	Correct mismatched format arguments	Corrected a couple of instances where logging arguments were not in agreement with the number of argument placeholders in the log statement.    Also added a minor readability update in Master.java a adding space in a phrase.
https://github.com/apache/accumulo/pull/1738	33	readability	2020-10-21 08:57:34	VolumeManager and Volume internals cleanup	* VolumeManager    * remove getDefaultVolume, which was only used to create a temporary      directory for creating tables with split points, and to resolve      relative paths    * replace "default volume" concept with the first available volume      (this is what it was effectively doing anyway... but now it's      implemented more cleanly)    * simplified much of the volume management code in the CreateTable      FaTE operation classes, where creation of temporary files for      storing splits on a pre-split table was being handled    * rename getFileSystem methods throughout that return VolumeManager to      getVolumeManager, and stop passing it as an extra parameter if it is      already available via a ServerContext object  * Volume    * Remove unneeded overloaded Volume.prefixChild(Path)    * Rename Volume.isValidPath(Path) to Volume.containsPath(Path) to      improve readability    * Update javadoc for containsPath to describe what it means for a Path      to be contained    * Update VolumeImplTest to verify behavior of containsPath  * VolumeImpl    * Make protected fields private    * Rename conf to hadoopConf to clarify which config it is    * normalize base path by stripping out trailing slashes    * rename helper method equivalentPaths(Path) to isAncestorPathOf(Path)      for readability in containsPath(Path) implementation    * add more strict argument checking for prefixChild(String)    * fix bug in isAncestorPathOf(Path) that incorrectly concluded /a/path      is an ancestor of /a/pa (/a is an ancestor, but /a/pa is not)  * VolumeImplTest    * check normalization by testing with trailing slashes    * add more test cases for isAncestorPathOf, including checking for      "breakout" path terms, like ".."    * add test cases for prefixChild and containsPath  * Tablet    * Fix bug in Tablet that wasn't using the Path's FileSystem when      deleting a file, but instead was using an arbitrary FileSystem
https://github.com/apache/accumulo/pull/2251	1	readability	2021-08-31 18:35:30	Create inner class in CompactionService	* Improve readability of CompactionService by creating inner class  for the implementation of PlanningParameters
https://github.com/apache/accumulo/pull/2381	2	readability	2021-12-13 14:17:36	Refactor listSplits operation when using maxSplits	Refactored listSplits method in TableOperationsImpl. This change affects the listSplits command which takes maxSplits as an option.    * Renamed variable names to enhance readability.  * Added documentation for the method.  * Replaced while-loop with if-loop after determining while-loop was only run at most once each time.  * Created IT test for method in ShellIT class.    Closes #2371   
https://github.com/apache/accumulo/pull/2438	5	readability	2022-01-31 10:06:49	Refactor Initialize into multiple classes	* Create ZooKeeperInitializer  * Create FileSystemInitializer  * Create InitialConfiguration  * Clean up code in Initialize by dropping redundant try/catch blocks,  improving error handling, passing around new InitialConfiguration object  to get config properties and improve readability  * Create new methods in Initialize: checkSASL(), checkUploadProps(), resetSecurity()
https://github.com/apache/accumulo/pull/4097	1	readability	2023-12-20 21:33:09	improves readability of code in DefaultCompactionPlanner	Rewrites sliding window code to be more readable.  It was difficult to verify the correctness of this code via inspection.
https://github.com/apache/accumulo/pull/4737	1	readability	2024-09-11 17:19:12	Improve readability of timekeeping code in idle server check	Tried to improve things by refactoring the code to make things more readable. Also converted the longs to use the `NanoTime` object.    The logic should be identical before and after this change.    I did notice that the compactor idle check seems to include the same check that is happening in the code that reads it (`AbstractServer.idleProcessCheck()`) where it checks the `idleReportingPeriod` has elapsed since the last compaction has completed before returning true. Unless there is a reason this was added, it seems like that part could just be removed and the same check would take place upstream.
https://github.com/apache/ambari/pull/115	1	readability	2018-01-15 13:31:36	[AMBARI-22771] Fix unit test broken by #104	## What changes were proposed in this pull request?    #104 has unexpectedly broken the unit test `RootServiceResponseFactoryTest`:    ```  [ERROR]   RootServiceResponseFactoryTest.testGetRootServiceComponents:137 expected: 1.0> but was: 3.0>  ```    This change fixes the unit test by increasing the number of properties expected (due to the addition of a test property in c4c3663de533f39dc367ee6e770cc963e1a103a1).  It also breaks the big test methods into separate ones for improved readability.  No other class is changed.    ## How was this patch tested?    Affected unit test now passes:    ```  [INFO] Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 13.562 s - in org.apache.ambari.server.controller.RootServiceResponseFactoryTest  ```
https://github.com/apache/ambari/pull/3003	4	readability	2019-06-12 10:42:17	[AMBARI-25297] : Host names array to string conversion improvement	## What changes were proposed in this pull request?  Instead of appending comma separated host names to StringBuilder and then doing toString, we can use String API for better readability and performance    ## How was this patch tested?  The patch was tested manually as well as with unit tests
https://github.com/apache/ambari/pull/3004	4	readability	2019-06-14 09:00:30	[AMBARI-25297] : Host names array to string conversion improvement (Backport to branch-2.7)	## What changes were proposed in this pull request?  Instead of appending comma separated host names to StringBuilder and then doing toString, we can use String API for better readability and performance    ## How was this patch tested?  The patch was tested manually as well as with unit tests.  This is backport PR to branch-2.7 from here: https://github.com/apache/ambari/pull/3003
https://github.com/apache/atlas/pull/290	7	readability	2025-02-15 02:30:38	ATLAS-4962: atlas-example modules: update for code readability improvements	 ements    ## What changes were proposed in this pull request?    Updated examples module sources to comply with the check-style requirements.    ## How was this patch tested?    `mvn clean verify` for all sub-modules on local machine.
https://github.com/apache/atlas/pull/293	7	readability	2025-02-17 07:55:23	ATLAS-4966 : atlas-server-api module: update for code readability imp 	 rovements    ## What changes were proposed in this pull request?    Updated server-api module for checkstyle compliance      ## How was this patch tested?    Verified build with tests completed successfully.
https://github.com/apache/atlas/pull/295	1	readability	2025-02-18 17:18:38	ATLAS-4967: atlas-testtools module: update for code readability impro 	 vements    ## What changes were proposed in this pull request?    Incorporated the changes suggested by checkstyle plugin    ## How was this patch tested?    Executed maven build to ensure patch isn't causing any problem
https://github.com/apache/bookkeeper/pull/3637	12	readability	2023-02-16 03:39:20	[improvement] Refactor Auditor to simplify the readability	### Motivation    Fix #3636     See explanation in #3636     ### Changes    1. Auditor class: Only reserved to do some necessary initialization work, scheduling of various detection tasks  2. Separate monitoring metrics into `AuditorStats`  3. Separate the auditBookies task to the `AuditorBookieCheckTask`  4. Separate the checkAllLedgers task into the `AuditorCheckAllLedgersTask`  5. Separate placementPolicyCheck task into `AuditorPlacementPolicyCheckTask`  6. Separate replicasCheck to `AuditorReplicasCheckTask`    
https://github.com/apache/dolphinscheduler/pull/2482	14	readability	2020-05-10 15:05:13	Fix some code specification issues	* Pre-compile regular expressions to improve efficiency and solve concurrency problems    * Solve the nullpoint problem that Object.equals may bring    * Modify if else structure, add {} to improve code readability    Co-Authored-By: daili  daili@users.noreply.github.com>    ## *Tips*  - *Thanks very much for contributing to Apache DolphinScheduler.*  - *Please review https://dolphinscheduler.apache.org/en-us/community/index.html before opening a pull request.*    ## What is the purpose of the pull request    * Pre-compile regular expressions to improve efficiency and solve concurrency problems    * Solve the nullpoint problem that Object.equals may bring    * Modify if else structure, add {} to improve code readability
https://github.com/apache/dolphinscheduler/pull/12660	1	readability	2022-11-03 01:29:04	[Improvement-12658][Permission] Improve the readability of setPerm() in grantProjectbyCode()	      Thanks very much for contributing to Apache DolphinScheduler. Please review https://dolphinscheduler.apache.org/en-us/community/development/pull-request.html before opening a pull request.     ## Purpose of the pull request    * close: #12658     ## Brief change log    `setPerm(Constants.AUTHORIZE_WRITABLE_PERM)` in `grantProjectbyCode()`    just like in `grantProject()` as below     img width="874" alt="  2022-11-02 12 01 42" src="https://user-images.githubusercontent.com/38122586/199392797-6f76b4a7-e4ee-4b3b-b465-cfcd6e8921b6.png">      ## Verify this pull request  
https://github.com/apache/dolphinscheduler/pull/13912	1	readability	2023-04-13 03:15:07	[Improvement-13911][JSON] Improve the readability of workflow exported json files	      Thanks very much for contributing to Apache DolphinScheduler. Please review https://dolphinscheduler.apache.org/en-us/community/development/pull-request.html before opening a pull request.     ## Purpose of the pull request    * close: #13911   * Improve the readability of workflow exported json files    ## Brief change log    * before   img width="1178" alt="  2023-04-11 20 09 02" src="https://user-images.githubusercontent.com/38122586/231158924-935b7a5e-9550-47e8-b8ba-0d08d6bcdb21.png">    * after   img width="570" alt="  2023-04-11 20 08 44" src="https://user-images.githubusercontent.com/38122586/231158966-0df53ead-adaf-4c8b-823d-9bf72fc265bc.png">      ## Verify this pull request  manually tested   img width="1602" alt="  2023-04-11 20 09 20" src="https://user-images.githubusercontent.com/38122586/231158874-7ce58a4e-ec95-4f3b-811f-d9d8f37688fe.png">    
https://github.com/apache/doris/pull/7302	1	readability	2021-12-09 14:35:46	[refactor] modify the control flow code to improve code readability	## Proposed changes    Now the code of command handler isn't clear.    We can modify `if` and `else` to improve code readability.    ## Types of changes    What types of changes does your code introduce to Doris?  _Put an `x` in the boxes that apply_    - [ ] Bugfix (non-breaking change which fixes an issue)  - [ ] New feature (non-breaking change which adds functionality)  - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)  - [ ] Documentation Update (if none of the other choices apply)  - [x] Code refactor (Modify the code structure, format the code, etc...)  - [ ] Optimization. Including functional usability improvements and performance improvements.  - [ ] Dependency. Such as changes related to third-party components.  - [ ] Other.    ## Checklist    _Put an `x` in the boxes that apply. You can also fill these out after creating the PR. If you're unsure about any of them, don't hesitate to ask. We're here to help! This is simply a reminder of what we are going to look for before merging your code._    - [ ] I have created an issue on (Fix #ISSUE) and described the bug/feature there in detail  - [ ] Compiling and unit tests pass locally with my changes  - [ ] I have added tests that prove my fix is effective or that my feature works  - [ ] If these changes need document changes, I have updated the document  - [ ] Any dependent changes have been merged    ## Further comments    None  
https://github.com/apache/doris/pull/46437	1	readability	2025-01-08 04:08:03	[opt](jni) Modify Exception Cause Formatting in JniUtil for Better Readability	### What problem does this PR solve?    Issue Number: close #xxx    Related PR: #xxx    Problem Summary:    This PR modifies the formatting of exception causes in the JniUtil class. Previously, the causes were separated by a newline (\\n). Now, they are separated by | for better readability and consistent log formatting.    ### Release note    None    ### Check List (For Author)    - Test    At least one of them must be included.        - [ ] Regression test      - [ ] Unit Test      - [ ] Manual test (add detailed scripts or steps below)      - [ ] No need to test or manual test. Explain why:          - [ ] This is a refactor/code format and no logic has been changed.          - [ ] Previous test can cover this change.          - [ ] No code files have been changed.          - [ ] Other reason    Add your reason?       - Behavior changed:      - [ ] No.      - [ ] Yes.    Explain the behavior change      - Does this need documentation?      - [ ] No.      - [ ] Yes.    Add document PR link here. eg: https://github.com/apache/doris-website/pull/1214      ### Check List (For Reviewer who merge this PR)    - [ ] Confirm the release note  - [ ] Confirm test cases  - [ ] Confirm document  - [ ] Add branch pick label    Add branch pick label that this PR should merge into      
https://github.com/apache/druid/pull/6377	31	readability	2018-10-15 03:49:39	Use NodeType enum instead of Strings	For type safety and code readability.
https://github.com/apache/druid/pull/8005	7	readability	2019-07-30 16:51:54	Enable Spotbugs: WMI_WRONG_MAP_ITERATOR	### Description    Enables the `WMI_WRONG_MAP_ITERATOR` code smell in Spotbugs. Also refactored some code by using the new Lambda style, which is more readable.    Describe your patch: what did you change in code? How did you fix the problem?    If there are several relatively logically separate changes in this PR, create a mini-section for each of them. For  example:  #### Fixed the bug ...  #### Renamed the class ...  #### Added a forbidden-apis entry ...    In each section, please describe design decisions made, including:   - Choice of algorithms   - Behavioral aspects. What configuration values are acceptable? How are corner cases and error conditions handled, such     as when there are insufficient resources?   - Class organization and design (how the logic is split between classes, inheritance, composition, design patterns)   - Method organization and design (how the logic is split between methods, parameters and return types)   - Naming (class, method, API, configuration, HTTP endpoint, names of emitted metrics)    It's good to describe an alternative design (or mention an alternative name) for every design (or naming) decision point  and compare the alternatives with the designs that you've implemented (or the names you've chosen) to highlight the  advantages of the chosen designs and names.    If there was a discussion of the design of the feature implemented in this PR elsewhere (e. g. a "Proposal" issue, any  other issue, or a thread in the development mailing list), link to that discussion from this PR description and explain  what have changed in your final design compared to your original proposal or the consensus version in the end of the  discussion. If something hasn't changed since the original discussion, you can omit a detailed discussion of those  aspects of the design here, perhaps apart from brief mentioning for the sake of readability of this PR description.    Some of the aspects mentioned above may be omitted for simple and small changes.     hr>    This PR has:  - [x] been self-reviewed.  - [ ] added documentation for new or modified features or behaviors.  - [x] added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.  - [ ] added comments explaining the "why" and the intent of the code wherever would not be obvious for an unfamiliar  reader.   - [ ] added unit tests or modified existing tests to cover new code paths.  - [ ] added integration tests.  - [ ] been tested in a test Druid cluster.    Check the items by putting "x" in the brackets for the done things. Not all of these items apply to every PR. Remove the  items which are not done or not relevant to the PR. None of the items from the checklist above are strictly necessary,  but it would be very helpful if you at least self-review the PR.     hr>    For reviewers: the key changed/added classes in this PR are `MyFoo`, `OurBar`, and `TheirBaz`.    (Add this section in big PRs to ease navigation in them for reviewers.)
https://github.com/apache/druid/pull/9163	9	readability	2020-02-21 22:30:11	Improved the readability and fixed few java warnings	   Thanks for trying to help us make Apache Druid be the best it can be! Please fill out as much of the following information as is possible (where relevant, and remove it when irrelevant) to help make the intention and scope of this PR clear in order to ease review.         Replace XXXX with the id of the issue fixed in this PR. Remove this section if there is no corresponding issue. Don't reference the issue in the title of this pull-request.         If you are a committer, follow the PR action item checklist for committers:  https://github.com/apache/druid/blob/master/dev/committer-instructions.md#pr-and-issue-action-item-checklist-for-committers.      ### Description  Fixed the readability and fixed few java warnings     Describe the goal of this PR, what problem are you fixing. If there is a corresponding issue (referenced above), it's not necessary to repeat the description here, however, you may choose to keep one summary sentence.         Describe your patch: what did you change in code? How did you fix the problem?         If there are several relatively logically separate changes in this PR, create a mini-section for each of them. For example:            In each section, please describe design decisions made, including:   - Choice of algorithms   - Behavioral aspects. What configuration values are acceptable? How are corner cases and error conditions handled, such as when there are insufficient resources?   - Class organization and design (how the logic is split between classes, inheritance, composition, design patterns)   - Method organization and design (how the logic is split between methods, parameters and return types)   - Naming (class, method, API, configuration, HTTP endpoint, names of emitted metrics)            It's good to describe an alternative design (or mention an alternative name) for every design (or naming) decision point and compare the alternatives with the designs that you've implemented (or the names you've chosen) to highlight the advantages of the chosen designs and names.         If there was a discussion of the design of the feature implemented in this PR elsewhere (e. g. a "Proposal" issue, any other issue, or a thread in the development mailing list), link to that discussion from this PR description and explain what have changed in your final design compared to your original proposal or the consensus version in the end of the discussion. If something hasn't changed since the original discussion, you can omit a detailed discussion of those aspects of the design here, perhaps apart from brief mentioning for the sake of readability of this PR description.         Some of the aspects mentioned above may be omitted for simple and small changes.       hr>    This PR has:  - [x] been self-reviewed.  - [ ] added documentation for new or modified features or behaviors.  - [ ] added Javadocs for most classes and all non-trivial methods. Linked related entities via Javadoc links.  - [ ] added or updated version, license, or notice information in [licenses.yaml](https://github.com/apache/druid/blob/master/licenses.yaml)  - [ ] added comments explaining the "why" and the intent of the code wherever would not be obvious for an unfamiliar reader.  - [ ] added unit tests or modified existing tests to cover new code paths.  - [ ] added integration tests.  - [ ] been tested in a test Druid cluster.       Check the items by putting "x" in the brackets for the done things. Not all of these items apply to every PR. Remove the items which are not done or not relevant to the PR. None of the items from the checklist above are strictly necessary, but it would be very helpful if you at least self-review the PR.       hr>    ##### Key changed/added classes in this PR   * `sql/src/main/java/org/apache/druid/sql/calcite/expression/builtin/TimeArithmeticOperatorConversion.java`   * `sql/src/main/java/org/apache/druid/sql/calcite/filtration/ConvertSelectorsToIns.java`    
https://github.com/apache/druid/pull/10003	1	readability	2020-06-10 16:32:01	Simplify CompressedVSizeColumnarIntsSupplierTest	    ### Description    Improve readability of the test by simplifying its parameters generator.    The parameters generator uses `CompressionStrategy.noNoneValues()` instead of `CompressionStrategyTest.compressionStrategies()` which wrapped each `CompressionStrategy` in a single element array.     hr>    This PR has:  - [x] been self-reviewed.     hr>    ##### Key changed/added classes in this PR   * `CompressedVSizeColumnarIntsSupplierTest`  
https://github.com/apache/dubbo/pull/5996	1	readability	2021-03-15 00:23:45	[Dubbo-Optimization]: polish DubboBootstrap	## What is the purpose of the change    polish DubboBootstrap    ## Brief changelog    - use `Collections.singletonList` instead of `Arrays.asList`  - replace some lambda expressions to method reference to improve code readability.    ## Verifying this change    Run test cases.    Follow this checklist to help us incorporate your contribution quickly and easily:    - [x] Make sure there is a [GITHUB_issue](https://github.com/apache/dubbo/issues) field for the change (usually before you start working on it). Trivial changes like typos do not require a GITHUB issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.  - [x] Format the pull request title like `[Dubbo-XXX] Fix UnknownException when host config not exist #XXX`. Each commit in the pull request should have a meaningful subject line and body.  - [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  - [x] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add sample in [dubbo samples](https://github.com/apache/dubbo-samples) project.  - [x] Run `mvn clean install -DskipTests=false` & `mvn clean test-compile failsafe:integration-test` to make sure unit-test and integration-test pass.  - [x] If this contribution is large, please follow the [Software Donation Guide](https://github.com/apache/dubbo/wiki/Software-donation-guide).  
https://github.com/apache/dubbo/pull/9361	1	readability	2021-12-16 08:14:09	Improve the readability of the getOrder method	`Ordered.LOWEST_PRECEDENCE + 1` is equal to `Ordered.HIGHEST_PRECEDENCE`, using `Ordered.HIGHEST_PRECEDENCE` is more readable.    ## What is the purpose of the change    Improve the readability of the getOrder method.    ## Brief changelog    Improve the readability of the getOrder method.    ## Verifying this change    Same semantics, avoiding integer overflow.       Follow this checklist to help us incorporate your contribution quickly and easily:      ## Checklist  - [ ] Make sure there is a [GitHub_issue](https://github.com/apache/dubbo/issues) field for the change (usually before you start working on it). Trivial changes like typos do not require a GitHub issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.  - [ ] Each commit in the pull request should have a meaningful subject line and body.  - [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  - [ ] Check if is necessary to patch to Dubbo 3 if you are work on Dubbo 2.7  - [ ] Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add sample in [dubbo samples](https://github.com/apache/dubbo-samples) project.  - [ ] Add some description to [dubbo-website](https://github.com/apache/dubbo-website) project if you are requesting to add a feature.  - [ ] GitHub Actions works fine on your own branch.  - [ ] If this contribution is large, please follow the [Software Donation Guide](https://github.com/apache/dubbo/wiki/Software-donation-guide).  
https://github.com/apache/eventmesh/pull/3433	1	readability	2023-03-13 02:29:08	[ISSUE #3406] Improve code readability	    ### Contribution Checklist      - Name the pull request in the form "[ISSUE #XXXX] Title of the pull request",       where *XXXX* should be replaced by the actual issue number.      Skip *[ISSUE #XXXX]* if there is no associated github issue for this pull request.      - Fill out the template below to describe the changes contributed by the pull request.       That will give reviewers the context they need to do the review.        - Each pull request should address only one issue.       Please do not mix up code from multiple issues.        - Each commit in the pull request should have a meaningful commit message.      - Once all items of the checklist are addressed, remove the above text and this checklist,       leaving only the filled out template below.    (The sections below can be removed for hotfixes of typos)           (If this PR fixes a GitHub issue, please add `Fixes # XXX>` or `Closes # XXX>`.)       Fixes #3406     ### Motivation    *Explain the content here.*  *Explain why you want to make the changes and what problem you're trying to solve.*    Improve code readability by removing the nested if loop    ### Modifications    *Describe the modifications you've done.*  merge two nested if loops into one      ### Documentation    - Does this pull request introduce a new feature? no  - If yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)  - If a feature is not applicable for documentation, explain why? code refactor for improved readability  - If a feature is not documented yet in this PR, please create a followup issue for adding the documentation  
https://github.com/apache/eventmesh/pull/4868	1	readability	2024-04-27 04:11:10	[ISSUE ##4865] Improve readability of failed topic list log	    ### Contribution Checklist      - Name the pull request in the form "[ISSUE #XXXX] Title of the pull request",       where *XXXX* should be replaced by the actual issue number.      Skip *[ISSUE #XXXX]* if there is no associated github issue for this pull request.      - Fill out the template below to describe the changes contributed by the pull request.       That will give reviewers the context they need to do the review.        - Each pull request should address only one issue.       Please do not mix up code from multiple issues.        - Each commit in the pull request should have a meaningful commit message.      - Once all items of the checklist are addressed, remove the above text and this checklist,       leaving only the filled out template below.    (The sections below can be removed for hotfixes of typos)           (If this PR fixes a GitHub issue, please add `Fixes # XXX>` or `Closes # XXX>`.)       Fixes #4865    ### Motivation    *Explain the content here.*  *Explain why you want to make the changes and what problem you're trying to solve.*    ### Modifications    *Describe the modifications you've done.*    ### Documentation    - Does this pull request introduce a new feature? (yes / no)  - If yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)  - If a feature is not applicable for documentation, explain why?  - If a feature is not documented yet in this PR, please create a followup issue for adding the documentation  
https://github.com/apache/fineract/pull/3239	1	readability	2023-06-08 05:51:21	FINERACT-1926 improve integration test readability	## Description    Describe the changes made and why they were made.    Ignore if these details are present on the associated [Apache Fineract JIRA ticket](https://github.com/apache/fineract/pull/1284).      ## Checklist    Please make sure these boxes are checked before submitting your pull request - thanks!    - [ ] Write the commit message as per https://github.com/apache/fineract/#pull-requests    - [ ] Acknowledge that we will not review PRs that are not passing the build _("green")_ - it is your responsibility to get a proposed PR to pass the build, not primarily the project's maintainers.    - [ ] Create/update unit or integration tests for verifying the changes made.    - [ ] Follow coding conventions at https://cwiki.apache.org/confluence/display/FINERACT/Coding+Conventions.    - [ ] Add required Swagger annotation and update API documentation at fineract-provider/src/main/resources/static/legacy-docs/apiLive.htm with details of any API changes    - [ ] Submission is not a "code dump".  (Large changes can be made "in repository" via a branch.  Ask on the developer mailing list for guidance, if required.)    FYI our guidelines for code reviews are at https://cwiki.apache.org/confluence/display/FINERACT/Code+Review+Guide.  
https://github.com/apache/flink/pull/21845	1	readability	2023-02-07 02:35:33	[hotfix][flink-core][doc] add javadoc to improve the code readability	Only added java doc to improve the readability. The code itself did tell enough information wrt the logic. I got understand it via long time debug. It is good to document it for helping developers understand the logic and also for me, since I might forget it after a few months.    No java logic has been changed.  
https://github.com/apache/flink/pull/23632	6	readability	2023-10-31 14:41:48	[FLINK-25809][table] Improve readability of TableTestPrograms	## What is the purpose of the change    From first feedback, this PR improves the readability of TableTestPrograms.    ## Brief change log    - Use a proper builder pattern for `SourceTestStep` and `SinkTestStep`  - Give builder methods a better name (indicate when it `add` or sets, indicate whether data is `produced` or `consumed`)    ## Verifying this change    This change is already covered by existing tests.    ## Does this pull request potentially affect one of the following parts:      - Dependencies (does it add or upgrade a dependency): no    - The public API, i.e., is any changed class annotated with `@Public(Evolving)`: no    - The serializers: no    - The runtime per-record code paths (performance sensitive): no    - Anything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn, ZooKeeper: no    - The S3 file system connector: no    ## Documentation      - Does this pull request introduce a new feature? no    - If yes, how is the feature documented? JavaDocs  
https://github.com/apache/fury/pull/1396	1	readability	2024-03-06 12:18:55	refactor(java): Improve code readability and fix an issue	1. Refactor the code structure to increase code readability.    2. Fix a problem. When `classInfo == null || typeTag != null || classId != classInfo.classId` is true, and already registered, we should also update `registeredId2ClassInfo`.
https://github.com/apache/geode/pull/2920	3	readability	2018-12-06 01:09:43	GEODE-6100: Cleanup suspect string logic for better readability	Thank you for submitting a contribution to Apache Geode.    In order to streamline the review of the contribution we ask you  to ensure the following steps have been taken:    ### For all changes:  - [ ] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?    - [ ] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?    - [ ] Is your initial contribution a single, squashed commit?    - [ ] Does `gradlew build` run cleanly?    - [ ] Have you written or updated unit tests to verify your changes?    - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?    ### Note:  Please ensure that once the PR is submitted, you check travis-ci for build issues and  submit an update to your PR as soon as possible. If you need help, please send an  email to dev@geode.apache.org.  
https://github.com/apache/geode/pull/5266	48	readability	2020-06-18 03:25:11	GEODE-8274: Improve readability of Version comparison.	Thank you for submitting a contribution to Apache Geode.    In order to streamline the review of the contribution we ask you  to ensure the following steps have been taken:    ### For all changes:  - [ ] Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?    - [ ] Has your PR been rebased against the latest commit within the target branch (typically `develop`)?    - [ ] Is your initial contribution a single, squashed commit?    - [ ] Does `gradlew build` run cleanly?    - [ ] Have you written or updated unit tests to verify your changes?    - [ ] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?    ### Note:  Please ensure that once the PR is submitted, check Concourse for build issues and  submit an update to your PR as soon as possible. If you need help, please send an  email to dev@geode.apache.org.  
https://github.com/apache/gravitino/pull/4297	2	readability	2024-07-30 01:46:02	[#4294] improvement(catalogs): Improved readability of trinomial operator usage code	### What changes were proposed in this pull request?  Change the trinomial operator usage code to make it easier to understand    ### Why are the changes needed?  Improved readability    Fix: https://github.com/apache/gravitino/issues/4294    ### Does this PR introduce any user-facing change?  No    ### How was this patch tested?  Check change code and existing code comparison
https://github.com/apache/gravitino/pull/4335	1	readability	2024-08-05 07:44:48	[#4303] improvement(core): Improved removed loop code and readability	**What changes were proposed in this pull request?**  Reflect changes to improve readability    **Why are the changes needed?**  Readability and no unnecessary repetition compared to existing code    Fix: https://github.com/apache/gravitino/issues/4303    **Does this PR introduce any user-facing change?**  No    **How was this patch tested?**  Check change code and existing code comparison
https://github.com/apache/hadoop/pull/5309	4	readability	2023-02-04 02:29:20	YARN-11419. Remove redundant exception capture in NMClientAsyncImpl and improve readability in ContainerShellWebSocket, etc	      Thanks for sending a pull request!      1. If this is your first time, please read our contributor guidelines: https://cwiki.apache.org/confluence/display/HADOOP/How+To+Contribute      2. Make sure your PR title starts with JIRA issue id, e.g., 'HADOOP-17799. Your PR title ...'.     [YARN-11419](https://issues.apache.org/jira/browse/YARN-11419) Remove redundant exception capture in NMClientAsyncImpl and improve readability in ContainerShellWebSocket, etc   ### Description of PR  1. Remove `YarnException` and `IOException`, because they are all subclasses of `Throwable`.  2. Use `try-resource`.  3. A non-empty string should be on the left side of the `equal`.    ### How was this patch tested?  Origin uts.    ### For code changes:    - [x] Does the title or this PR starts with the corresponding JIRA issue id (e.g. 'HADOOP-17799. Your PR title ...')?  - [x] Object storage: have the integration tests been executed and the endpoint declared according to the connector-specific documentation?  - [x] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under [ASF 2.0](http://www.apache.org/legal/resolved.html#category-a)?  - [x] If applicable, have you updated the `LICENSE`, `LICENSE-binary`, `NOTICE-binary` files?    
https://github.com/apache/hive/pull/2103	1	readability	2021-03-27 03:31:35	HIVE-24922: Remove redundant code and improve readability	What changes were proposed in this pull request?    Get rid of the extra code  Why are the changes needed?  Compaction observability  Submit code quality  Does this PR introduce any user-facing change?  No    How was this patch tested?  Unit test
https://github.com/apache/hive/pull/2114	6	readability	2021-03-25 11:10:07	HIVE-24931: Remove Read/WriteEntity parameters from TaskCompiler#optimizeOperatorPlan	### What changes were proposed in this pull request?  Idem with summary.    ### Why are the changes needed?  Small refactoring to improve code readability.    The ReadEntity, and WriteEntity parameters in TaskCompiler#optimizeOperatorPlan are  passed in this method and various subsequent ones but they are never actually used  so they can be removed.    ### Does this PR introduce _any_ user-facing change?  No    ### How was this patch tested?  Existing tests
https://github.com/apache/hive/pull/2206	2	readability	2021-04-26 14:48:52	HIVE-25047: Remove unused fields/methods and deprecated calls in HiveProject	### What changes were proposed in this pull request?  Refactor HiveProject removing unused fields/methods and deprecated calls.    ### Why are the changes needed?  Improve readability.      ### Does this PR introduce _any_ user-facing change?  No.      ### How was this patch tested?  Existing tests.  
https://github.com/apache/hive/pull/4919	344	readability	2024-01-03 11:13:25	HIVE-27925: HiveConf: unify ConfVars enum and use underscore for better readability	### What changes were proposed in this pull request?  HiveConf: unify ConfVars enum and use underscore for better readability    ### Why are the changes needed?  Better readability    ### Does this PR introduce _any_ user-facing change?  No    ### Is the change a dependency upgrade?  No    ### How was this patch tested?  Build and Unit tests.  
https://github.com/apache/hive/pull/5107	32	readability	2024-03-06 09:40:52	HIVE-27925: Addendum: HiveConf: unify ConfVars enum and use underscore for better readability	What changes were proposed in this pull request?  HiveConf: unify ConfVars enum and use underscore for better readability    Why are the changes needed?  Better readability    Does this PR introduce any user-facing change?  No    Is the change a dependency upgrade?  No    How was this patch tested?  Build and Unit tests.
https://github.com/apache/hudi/pull/1575	26	readability	2020-04-30 16:19:40	[MINOR] Reorder HoodieTimeline#compareTimestamp arguments for better readability	 - reads nicely as (instantTime1, GREATER_OR_EQUAL, instantTime2) etc    ## *Tips*  - *Thank you very much for contributing to Apache Hudi.*  - *Please review https://hudi.apache.org/contributing.html before opening a pull request.*    ## What is the purpose of the pull request    *(For example: This pull request adds quick-start document.)*    ## Brief change log    *(for example:)*    - *Modify AnnotationLocation checkstyle rule in checkstyle.xml*    ## Verify this pull request    *(Please pick either of the following options)*    This pull request is a trivial rework / code cleanup without any test coverage.    *(or)*    This pull request is already covered by existing tests, such as *(please describe tests)*.    (or)    This change added tests and can be verified as follows:    *(example:)*      - *Added integration tests for end-to-end.*    - *Added HoodieClientWriteTest to verify the change.*    - *Manually verified the change by running a job locally.*    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/hudi/pull/2319	1	readability	2020-12-15 06:35:24	[MINOR] Improve code readability by passing in the fileComparisonsRDD in bloom index	    ## What is the purpose of the pull request    The option 'hoodie.bloom.index.prune.by.ranges' is default true, so it  expects to be an improvement.    ## Brief change log      - Some refactoring to `SparkHoodieBloomIndex`    ## Verify this pull request    Existing tests    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/hudi/pull/2459	1	readability	2021-01-22 05:47:15	[MINOR] Improve code readability,remove the continue keyword	## *Tips*  - *Thank you very much for contributing to Apache Hudi.*  - *Please review https://hudi.apache.org/contributing.html before opening a pull request.*    ## What is the purpose of the pull request    *(For example: This pull request adds quick-start document.)*    ## Brief change log    *(for example:)*    - *Modify AnnotationLocation checkstyle rule in checkstyle.xml*    ## Verify this pull request    *(Please pick either of the following options)*    This pull request is a trivial rework / code cleanup without any test coverage.    *(or)*    This pull request is already covered by existing tests, such as *(please describe tests)*.    (or)    This change added tests and can be verified as follows:    *(example:)*      - *Added integration tests for end-to-end.*    - *Added HoodieClientWriteTest to verify the change.*    - *Manually verified the change by running a job locally.*    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/hudi/pull/2962	4	readability	2021-05-19 01:13:38	[HUDI-1913] Using streams instead of loops for input/output	## *Tips*  - *Thank you very much for contributing to Apache Hudi.*  - *Please review https://hudi.apache.org/contributing.html before opening a pull request.*    ## What is the purpose of the pull request    This commit addresses one issue, we could use streams instead of loops for improving the readability and makes the code more compact.    #    ## Brief change log    *(for example:)*    - *Modify AnnotationLocation checkstyle rule in checkstyle.xml*    ## Verify this pull request    *(Please pick either of the following options)*    This pull request is a trivial rework / code cleanup without any test coverage.    *(or)*    This pull request is already covered by existing tests, such as *(please describe tests)*.    (or)    This change added tests and can be verified as follows:    *(example:)*      - *Added integration tests for end-to-end.*    - *Added HoodieClientWriteTest to verify the change.*    - *Manually verified the change by running a job locally.*    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/hudi/pull/3037	1	readability	2021-06-05 11:40:46	[HUDI-1979] Optimize logic to improve code readability	## *Tips*  - *Thank you very much for contributing to Apache Hudi.*  - *Please review https://hudi.apache.org/contributing.html before opening a pull request.*    ## What is the purpose of the pull request    *(For example: This pull request adds quick-start document.)*    ## Brief change log    *(for example:)*    - *Modify AnnotationLocation checkstyle rule in checkstyle.xml*    ## Verify this pull request    *(Please pick either of the following options)*    This pull request is a trivial rework / code cleanup without any test coverage.    *(or)*    This pull request is already covered by existing tests, such as *(please describe tests)*.    (or)    This change added tests and can be verified as follows:    *(example:)*      - *Added integration tests for end-to-end.*    - *Added HoodieClientWriteTest to verify the change.*    - *Manually verified the change by running a job locally.*    ## Committer checklist     - [ ] Has a corresponding JIRA in PR title & commit      - [ ] Commit message is descriptive of the change      - [ ] CI is green     - [ ] Necessary doc changes done or have another open PR            - [ ] For large changes, please consider breaking it into sub-tasks under an umbrella JIRA.
https://github.com/apache/ignite/pull/11517	1	readability	2024-09-13 14:50:37	[MINOR] Simple CacheIndexImpl#count refactoring to improve readability	 dability    Thank you for submitting the pull request to the Apache Ignite.    In order to streamline the review of the contribution   we ask you to ensure the following steps have been taken:    ### The Contribution Checklist  - [ ] There is a single JIRA ticket related to the pull request.   - [ ] The web-link to the pull request is attached to the JIRA ticket.  - [ ] The JIRA ticket has the _Patch Available_ state.  - [ ] The pull request body describes changes that have been made.   The description explains _WHAT_ and _WHY_ was made instead of _HOW_.  - [ ] The pull request title is treated as the final commit message.   The following pattern must be used: `IGNITE-XXXX Change summary` where `XXXX` - number of JIRA issue.  - [ ] A reviewer has been mentioned through the JIRA comments   (see [the Maintainers list](https://cwiki.apache.org/confluence/display/IGNITE/How+to+Contribute#HowtoContribute-ReviewProcessandMaintainers))   - [ ] The pull request has been checked by the Teamcity Bot and   the `green visa` attached to the JIRA ticket (see [TC.Bot: Check PR](https://mtcga.gridgain.com/prs.html))    ### Notes  - [How to Contribute](https://cwiki.apache.org/confluence/display/IGNITE/How+to+Contribute)  - [Coding abbreviation rules](https://cwiki.apache.org/confluence/display/IGNITE/Abbreviation+Rules)  - [Coding Guidelines](https://cwiki.apache.org/confluence/display/IGNITE/Coding+Guidelines)  - [Apache Ignite Teamcity Bot](https://cwiki.apache.org/confluence/display/IGNITE/Apache+Ignite+Teamcity+Bot)    If you need any help, please email dev@ignite.apache.org or ask an  advice on http://asf.slack.com _#ignite_ channel.  
https://github.com/apache/ignite-3/pull/3400	1	readability	2024-03-14 12:38:49	IGNITE-21578 Improve tests readability and logic in ItDurableFinishTest.	This change should also fix the NPE.    https://issues.apache.org/jira/browse/IGNITE-21578
https://github.com/apache/ignite-3/pull/4101	10	readability	2024-07-17 14:26:43	IGNITE-22764 Increase readability in MvPartitionStorage tests	https://issues.apache.org/jira/browse/IGNITE-22764
https://github.com/apache/incubator-heron/pull/1878	1	readability	2017-05-22 16:54:33	Clean up SinkExecutorTest	Follow-up clean up from #1876. Just variable renaming and using static imports for readability.
https://github.com/apache/incubator-kie-kogito-apps/pull/2189	1	readability	2025-02-14 16:21:09	[Fix_#2188] Enhance readability of waitForEvent method in Kafka IT class	  -    Licensed to the Apache Software Foundation (ASF) under one    or more contributor license agreements.  See the NOTICE file    distributed with this work for additional information    regarding copyright ownership.  The ASF licenses this file    to you under the Apache License, Version 2.0 (the    "License"); you may not use this file except in compliance    with the License.  You may obtain a copy of the License at        http://www.apache.org/licenses/LICENSE-2.0      Unless required by applicable law or agreed to in writing,    software distributed under the License is distributed on an    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY    KIND, either express or implied.  See the License for the    specific language governing permissions and limitations    under the License.     Many thanks for submitting your Pull Request :heart:!     Fixes https://github.com/apache/incubator-kie-kogito-apps/issues/2188     details>   summary>  How to replicate CI configuration locally?   /summary>    Build Chain tool does "simple" maven build(s), the builds are just Maven commands, but because the repositories relates and depends on each other and any change in API or class method could affect several of those repositories there is a need to use [build-chain tool](https://github.com/kiegroup/github-action-build-chain) to handle cross repository builds and be sure that we always use latest version of the code for each repository.     [build-chain tool](https://github.com/kiegroup/github-action-build-chain) is a build tool which can be used on command line locally or in Github Actions workflow(s), in case you need to change multiple repositories and send multiple dependent pull requests related with a change you can easily reproduce the same build by executing it on Github hosted environment or locally in your development environment. See [local execution](https://github.com/kiegroup/github-action-build-chain#local-execution) details to get more information about it.   /details>     details>   summary>  How to retest this PR or trigger a specific build:   /summary>    - for  b>pull request checks /b>      Please add comment:  b>Jenkins retest this /b>    - for a  b>specific pull request check /b>      Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] tests /b>    - for  b>quarkus branch checks /b>      Run checks against Quarkus current used branch      Please add comment:  b>Jenkins run quarkus-branch /b>    - for a  b>quarkus branch specific check /b>      Run checks against Quarkus current used branch      Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] quarkus-branch /b>    - for  b>quarkus main checks /b>      Run checks against Quarkus main branch      Please add comment:  b>Jenkins run quarkus-main /b>    - for a  b>specific quarkus main check /b>      Run checks against Quarkus main branch      Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] quarkus-main /b>    - for  b>quarkus lts checks /b>      Run checks against Quarkus lts branch      Please add comment:  b>Jenkins run quarkus-lts /b>    - for a  b>specific quarkus lts check /b>      Run checks against Quarkus lts branch      Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] quarkus-lts /b>     - for  b>native checks /b>      Run native checks      Please add comment:  b>Jenkins run native /b>    - for a  b>specific native check /b>      Run native checks     Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] native /b>    - for  b>native lts checks /b>      Run native checks against quarkus lts branch    Please add comment:  b>Jenkins run native-lts /b>    - for a  b>specific native lts check /b>      Run native checks against quarkus lts branch    Please add comment:  b>Jenkins (re)run [kogito-apps|kogito-examples] native-lts /b>      /details>     details>   summary>  How to backport a pull request to a different branch?   /summary>    In order to automatically create a **backporting pull request** please add one or more labels having the following format `backport- branch-name>`, where ` branch-name>` is the name of the branch where the pull request must be backported to (e.g., `backport-7.67.x` to backport the original PR to the `7.67.x` branch).    > **NOTE**: **backporting** is an action aiming to move a change (usually a commit) from a branch (usually the main one) to another one, which is generally referring to a still maintained release branch. Keeping it simple: it is about to move a specific change or a set of them from one branch to another.    Once the original pull request is successfully merged, the automated action will create one backporting pull request per each label (with the previous format) that has been added.    If something goes wrong, the author will be notified and at this point a manual backporting is needed.    > **NOTE**: this automated backporting is triggered whenever a pull request on `main` branch is labeled or closed, but both conditions must be satisfied to get the new PR created.   /details>     details>   summary>  Quarkus-3 PR check is failing ... what to do ?   /summary>  The Quarkus 3 check is applying patches from the `.ci/environments/quarkus-3/patches`.    The first patch, called `0001_before_sh.patch`, is generated from Openrewrite `.ci/environments/quarkus-3/quarkus3.yml` recipe. The patch is created to speed up the check. But it may be that some changes in the PR broke this patch.    No panic, there is an easy way to regenerate it. You just need to comment on the PR:  ```  jenkins rewrite quarkus-3  ```  and it should, after some minutes (~20/30min) apply a commit on the PR with the patch regenerated.    Other patches were generated manually. If any of it fails, you will need to manually update it... and push your changes.   /details>
https://github.com/apache/incubator-seata/pull/6761	5	readability	2024-08-18 14:35:07	optimize: the namingserver code to improve readability	   Please make sure you have read and understood the contributing guidelines      - [ ] I have registered the PR [changes](../changes).    ###  . Describe what this PR did      ###  . Does this pull request fix one issue?     If that, add "fixes #xxx" below in the next line, for example, fixes #97.        ###  . Why don't you add test cases (unit test/integration test)?       ###  . Describe how to verify it      ###  . Special notes for reviews    
https://github.com/apache/inlong/pull/9426	7	readability	2023-12-06 11:54:07	[INLONG-9307][SDK] Improve DataProxy SDK code readability	### Prepare a Pull Request  *(Change the title refer to the following example)*    - Title Example: [INLONG-XYZ][Component] Title of the pull request    *(The following *XYZ* should be replaced by the actual [GitHub Issue](https://github.com/apache/inlong/issues) number)*    - Fixes #9307     ### Motivation    Improve DataProxy SDK code readability    ### Modifications  The details can be found at [#9307 ](https://github.com/apache/inlong/issues/9307).  
https://github.com/apache/iotdb/pull/241	61	readability	2019-07-17 02:02:36	 Refactor the reader package for readability	The former code in the `org.apache.iotdb.db.query.reader` package is  somewhat diffcult to read.    Through this refactor, four main changes are made:    * The four levels of readers are made explicit: chunk related    file related   resoure related   series related.    * The interfaces for creating readers in `SeriesReaderFactoryImpl` are   removed. Instead, constructors of separate classes are employed.   This change brings two benefits: a) `SeriesReaderFactoryImpl` can  thus be removed. b) The classes for sequence and unsequence data  are symmetric to a large extent.    * Add JAVA annotations and improve related tests.    * A bug in the `hasNext` method in the class `SequenceSeriesByTimestamp`   (originally named `SequenceSeriesReader`) is fixed.    A possible future advancement is to deduplicate the code.
https://github.com/apache/iotdb/pull/275	1	readability	2019-07-19 13:15:00	replace two methods with constant value for readability	
https://github.com/apache/iotdb/pull/2103	10	readability	2020-11-22 09:40:29	Use min or max method of Math to improve readability	
https://github.com/apache/iotdb/pull/2375	1	readability	2020-12-29 13:46:05	Use TimeUnit instead of plain number to improve readability	          Licensed to the Apache Software Foundation (ASF) under one      or more contributor license agreements.  See the NOTICE file      distributed with this work for additional information      regarding copyright ownership.  The ASF licenses this file      to you under the Apache License, Version 2.0 (the      "License"); you may not use this file except in compliance      with the License.  You may obtain a copy of the License at            http://www.apache.org/licenses/LICENSE-2.0        Unless required by applicable law or agreed to in writing,      software distributed under the License is distributed on an      "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY      KIND, either express or implied.  See the License for the      specific language governing permissions and limitations      under the License.            Thanks for trying to help us make Apache IoTDB be the best it can be!   Please fill out as much of the following information as is possible (where relevant, and remove it   when irrelevant) to help make the intention and scope of this PR clear in order to ease review.      ## Description       Describe the goal of this PR, what problem are you fixing. If there is a corresponding issue,   it's not necessary to repeat the description here,   however, you may choose to keep one summary sentence.         Describe your patch: what did you change in code? How did you fix the problem?         If there are several relatively logically separate changes in this PR, create a mini-section   for each of them. For example:            In each section, please describe design decisions made, including:   - Choice of algorithms   - Behavioral aspects. What configuration values are acceptable? How are corner cases and error       conditions handled, such as when there are insufficient resources?   - Class organization and design (how the logic is split between classes, inheritance, composition,       design patterns)   - Method organization and design (how the logic is split between methods, parameters and return types)   - Naming (class, method, API, configuration, HTTP endpoint, names of emitted metrics)            It's good to describe an alternative design (or mention an alternative name) for every design   (or naming) decision point and compare the alternatives with the designs that you've implemented   (or the names you've chosen) to highlight the advantages of the chosen designs and names.         If there was a discussion of the design of the feature implemented in this PR elsewhere   (e. g. a "Proposal" issue, any other issue, or a thread in the development mailing list),   link to that discussion from this PR description and explain what have changed in your final design   compared to your original proposal or the consensus version in the end of the discussion.   If something hasn't changed since the original discussion, you can omit a detailed discussion of   those aspects of the design here, perhaps apart from brief mentioning for the sake of readability   of this PR description.         Some of the aspects mentioned above may be omitted for simple and small changes.       hr>    This PR has:  - [x] been self-reviewed.      - [x] concurrent read      - [x] concurrent write      - [x] concurrent read and write   - [x] added documentation for new or modified features or behaviors.  - [x] added Javadocs for most classes and all non-trivial methods.   - [x] added or updated version, __license__, or notice information  - [x] added comments explaining the "why" and the intent of the code wherever would not be obvious     for an unfamiliar reader.  - [x] added unit tests or modified existing tests to cover new code paths, ensuring the threshold     for code coverage.  - [x] added integration tests.  - [x] been tested in a test IoTDB cluster.       Check the items by putting "x" in the brackets for the done things. Not all of these items   apply to every PR. Remove the items which are not done or not relevant to the PR. None of the items   from the checklist above are strictly necessary, but it would be very helpful if you at least   self-review the PR.       hr>    ##### Key changed/added classes (or packages if there are too many classes) in this PR       Template copied and modified from Apache Druid 
https://github.com/apache/iotdb/pull/4374	15	readability	2021-11-13 04:31:08	[IOTDB-2003] add overwrite method with @Override	## Description  Add overwrite methods with @Override.    @Override can improve code readability and help compiler check method relationship between superclass and subclass.
https://github.com/apache/jackrabbit-oak/pull/1187	35	readability	2023-11-07 13:45:11	OAK-10527 Improve readability of the explain query output	I had a to change a lot of tests, because they depended (too much) on implementation details.    Even thought this would be a good idea, I did not switch to Json output so far, because:  * some upstream UI tools depend on the query plans to have a certain form, which would break,  * it would make the patch even larger,  * the Lucene query string might contain double quotes, which would then be escaped, and so the output hard to read    So basically, first the upstream UI tools would     The Elasticsearch query is Json, which wouldn't need to be escaped if we add it as a child object.
https://github.com/apache/kafka/pull/8363	6	readability	2020-03-28 23:38:13	MINOR: Add missing @Override annotation and simplify Thread declarations with lambdas	Maybe it will improve the readability if `@Override` annotation is applied over the `run()` method since `Sender` class implements `Runnable`.
https://github.com/apache/kafka/pull/8577	3	readability	2020-05-02 00:18:44	use appropriate fn for readability. (maybe)	using the min, max might make the code a little easier to read.     ### Committer Checklist (excluded from commit message)  - [ ] Verify design and implementation   - [ ] Verify test coverage and CI build status  - [ ] Verify documentation (including upgrade notes)  
https://github.com/apache/kafka/pull/17464	1	readability	2024-10-15 08:13:27	Refactor: Improve code consistency and readability	Description:  This PR introduces two improvements to enhance code consistency and readability:    1. Extract duplicate exception message into a private constant     - The message "Acquisition lock never got released." is now a private static final String constant ACQUISITION_LOCK_NEVER_GOT_RELEASED     - Reduces duplication and improves maintainability     - Makes it easier to update this message in the future if needed     - Encapsulates the constant within the class, adhering to best practices for information hiding    2. Replace hardcoded "member-1" strings with existing MEMBER_ID constant     - Enhances code consistency across the codebase     - Makes future updates easier by centralizing the member ID value     - Reduces the risk of typos or inconsistencies when referring to member IDs    Please review these changes and provide any feedback or concerns. 
https://github.com/apache/kafka/pull/18017	2	readability	2024-12-09 15:25:33	MINOR: Extract some codeblocks as methods to simplify readability	Small changes related to increase code readability by extracting some code blocks into separate methods.    Does not require any testing here.    ### Committer Checklist (excluded from commit message)  - [x] Verify design and implementation   - [x] Verify test coverage and CI build status  - [x] Verify documentation (including upgrade notes)  
https://github.com/apache/lucene/pull/13532	1	readability	2024-07-12 08:49:32	Lucene99HnswVectorsReader[.readFields] readability tweaks	* remove unnecessary readFields parameter  * consistently use this. in constructor  * align declare and init order
https://github.com/apache/netbeans/pull/2337	15	readability	2020-09-14 01:50:40	Using modern Java coding style when developing NetBeans	A method of [using modern Java code concepts](https://repo1.maven.org/maven2/org/frgaal/compiler/14.0.2/compiler-14.0.2-README.pdf) while retaining compatibility with JDK 1.8 has recently come to our attention. There has been numerous requests to drop support for running NetBeans on JDK 1.8, but there have always been objections to do so. This PR tries to balance such objections with the need of NetBeans codebase to get the best of modern Java.    First of all there is a [small enhancement to the build system](https://github.com/apache/netbeans/commit/b53e2cf21a421773c2abee51effaeafbfa7b527b). If the in `nbproject/project.properties` specified `javac.source` is higher than `javac.target`, then the [backporting compiler](https://repo1.maven.org/maven2/org/frgaal/compiler/14.0.2/compiler-14.0.2-README.pdf) is triggered to handle the compilation. That allows one to use modern concepts like `var` and still produce JDK 1.8 compatible bytecode - this feature has been used in [maven.htmlui module](https://github.com/apache/netbeans/commit/6066163168eb0e76a5d2f0f40897b1b8f87d52ab) to demonstrate that the compiler works as expected. The biggest benefit has however been observed on [api.html module](https://github.com/apache/netbeans/commit/938b7d26695511809f1ebae00a4cf6763edcc357) - by replacing string concatenation with text blocks, the readability improved a lot.    We believe this PR helps to find balance between those who want to write modern code and those who need to execute it on older JVMs. We'd like to use the [backporting compiler](https://repo1.maven.org/maven2/org/frgaal/compiler/14.0.2/compiler-14.0.2-README.pdf) in the modules we maintain. Once this PR is in, others may opt-in and use this feature by setting `javac.source=14` and `javac.target=1.8` in appropriate module configuration files. 
https://github.com/apache/netbeans/pull/2719	2	readability	2021-02-03 13:20:53	[NETBEANS-5301] Fixed readability of HTML code completion items	https://issues.apache.org/jira/browse/NETBEANS-5301    - Fixes color of elements in code completion.  - Fixes color of directories in code completion.  - Simplifies code for completion item coloring.
https://github.com/apache/netbeans/pull/7722	3	readability	2024-10-20 17:40:04	Making minor code modifications for better readability and validation	Added minor improvements in `org.netbeans.modules.projectapi.SimpleFileOwnerQueryImplementation` to the config property values read for "project.limitScanRoot" and "project.forbiddenFolders" for:      - path validations;      - comparisons in `getOwner()`;      - support multiple paths input for limitScanRoot.    Added minor readability improvements and removed unused imports.  
https://github.com/apache/ozone/pull/583	12	readability	2020-02-22 23:27:53	HDDS-3057. Improve Ozone Shell ACL operations' help text readability	## What changes were proposed in this pull request?    Improve Ozone Shell ACL operations' help text readability    ## What is the link to the Apache JIRA    https://issues.apache.org/jira/browse/HDDS-3057    ## How was this patch tested?    Compile and run ozone shell ACL commands and manually check the results.
https://github.com/apache/ozone/pull/1911	1	readability	2021-02-14 04:43:56	HDDS-4809. Add comment to FilePerChunkStrategy for readability	## What changes were proposed in this pull request?    - Add comment for code easy to get confused.    ## What is the link to the Apache JIRA    https://issues.apache.org/jira/browse/HDDS-4809    ## How was this patch tested?    No need test, only add comment.  
https://github.com/apache/parquet-java/pull/641	16	readability	2019-10-07 07:36:06	PARQUET-1578 Introduce Lambdas	To improve on readability and reduce boilerplate code.    https://jira.apache.org/jira/browse/PARQUET-1578
https://github.com/apache/parquet-mr/pull/641	16	readability	2019-10-07 07:36:06	PARQUET-1578 Introduce Lambdas	To improve on readability and reduce boilerplate code.    https://jira.apache.org/jira/browse/PARQUET-1578
https://github.com/apache/pinot/pull/3152	4	readability	2018-09-07 22:34:56	Enhance broker log for queries	1. Log only one line per request 2. Change 'Request' to 'RequestId' for easier grep 3. Keep only @Nullable annotation for readability  E.g. RequestId:7, table:myTable_OFFLINE, timeMs:8, docs:10/44673408, entries:0/80, servers:1/1, exceptions:0, serverStats: hostName>_O=0,0,0,7, query:select * from myTable limit 10
https://github.com/apache/pinot/pull/5586	3	readability	2020-06-18 05:37:12	Fix the wrong unbounded values in RangePredicateEvaluatorFactory	## Description The unbounded values for LONG, FLOAT, DOUBLE type are not set based on the type, but always as Integer.MIN_VALUE and Integer.MAX_VALUE This can cause wrong result if the passed in value is smaller than Integer.MIN_VALUE or larger than Integer.MAX_VALUE  Minor improvements: - Replace "*" with constant `RangePredicate.UNBOUNDED` for readability - For string type, use null to represent unbounded to save the per-value string comparison
https://github.com/apache/pinot/pull/5825	5	readability	2020-08-10 18:00:15	Enhance sql parser for having and post-aggregation	## Description  Enhance sql parser for having and post-aggregation    In `CalciteSqlParser`:  - Support parsing HAVING clause  - Flatten AND/OR expression  - Simplify `compileCalciteSqlToPinotQuery()` for better readability
https://github.com/apache/pinot/pull/7019	3	readability	2021-06-04 00:33:22	Resolve bug in HelixServerStarter for populating environment property 	  map field and rename timeout variables to follow timeunit convention    ## Description  There was a bug in the HelixServerStarter code which would prevent us to update zookeeper node's mapFields with correct environment properties. Secondly, changed the AzureEnvironmentProvider variable names to include time units as suffix for better readability and debuggability.     Previous Wrong Syntax:  ```  Map String, String> existingEnvironmentConfigsMap = instanceConfig.getRecord().getMapField(            CommonConstants.ENVIRONMENT_IDENTIFIER);  if (existingEnvironmentConfigsMap != null && !existingEnvironmentConfigsMap.equals(environmentProperties)) {    do Something......  }  ```  The above check would prevent us to add values to mapFields for environment key if it not already present.    Corrected Syntax:  ```  Map String, String> existingEnvironmentConfigsMap = instanceConfig.getRecord().getMapField(            CommonConstants.ENVIRONMENT_IDENTIFIER);  if (existingEnvironmentConfigsMap == null || !existingEnvironmentConfigsMap.equals(environmentProperties)) {     do Something......  }    ```  The corrected check will resolve the bug shown in the faulty syntax and will update mapFields for environment key when it is not present in the map as well as when the value set has a mismatch.    ## Upgrade Notes  Does this PR prevent a zero down-time upgrade? (Assume upgrade order: Controller, Broker, Server, Minion)  * [ ] Yes (Please label as ** code>backward-incompat /code>**, and complete the section below on Release Notes)    Does this PR fix a zero-downtime upgrade introduced earlier?  * [ ] Yes (Please label this as ** code>backward-incompat /code>**, and complete the section below on Release Notes)    Does this PR otherwise need attention when creating release notes? Things to consider:  - New configuration options    * [ ] Yes (Please label this PR as ** code>release-notes /code>** and complete the section on Release Notes)  ## Release Notes     If you have tagged this as either backward-incompat or release-notes,  you MUST add text here that you would like to see appear in release notes of the  next release.         If you have a series of commits adding or enabling a feature, then  add this section only in final commit that marks the feature completed.  Refer to earlier release notes to see examples of text.     ## Documentation    ![Screen Shot 2021-06-03 at 3 24 06 PM](https://user-images.githubusercontent.com/8770850/120719873-e3ff9280-c47f-11eb-90a6-562e88f875cf.png)  
https://github.com/apache/pinot/pull/9580	1	readability	2022-10-12 22:32:15	[cleanup] moving test sql to a yaml file for better readability	- hard-coded string needs to follow checkstyle. also it cannot be directly copied.   - didn't use json b/c it doesn't support multiline as well as yaml
https://github.com/apache/pinot/pull/13451	1	readability	2024-06-24 19:50:46	Cleanup: Fix grammar in error message, also improve readability.	* Fixed grammar.  * Now logging table name first, before the list of segments, for better readability.  
https://github.com/apache/pulsar/pull/4683	4	readability	2019-07-08 16:16:06	Cleanup tests in the presto module	### Modifications    Cleanup in the presto module which includes the following changes:  * Use the preferred way of the schema's creation.   * Predicates and Functions were converted to lambda  * Add static import statements for Assert to improve the readability of the tests  
https://github.com/apache/pulsar/pull/4703	28	readability	2019-07-21 23:28:30	Convert anonymous classes to lambda	### Motivation    The anonymous classes were converted to lambda in the places where it improves readability and decreases the lines of code.
https://github.com/apache/pulsar/pull/4799	134	readability	2019-07-25 16:14:03	Test cleanup and simplification	### Motivation    My main motivation was to make failing tests more informative by applying the appropriate assert statements. Unfortunately (for reviewers), this pull request became so big, because my other motivation was to apply the same _style_ to the modified files.    ### Modifications    - Usage of appropriate assert statements    - Cleanup unused imports    - Remove `Assert.` in the tests to improve readability     - Substitute `*` imports with separated import statements
https://github.com/apache/pulsar/pull/8052	4	readability	2020-11-11 06:50:43	[Broker] Improve test code readability and maintainability by refactoring repeated values 	### Motivation  Make the test code a little more readable and maintainable and clarify intent of `Thread.sleep(3000)`     ### Modifications  Refactored Thread.sleep() to common function and hard-coded Http values to constants    ### Verifying this change  This change is a trivial rework / code cleanup without any test coverage.    ### Does this pull request potentially affect one of the following parts:    *If `yes` was chosen, please highlight the changes*      - Dependencies (does it add or upgrade a dependency): no    - The public API: no    - The schema: no    - The default values of configurations: no    - The wire protocol: no    - The rest endpoints: no    - The admin cli options: no    - Anything that affects deployment: no    ### Documentation      - Does this pull request introduce a new feature? no    - If yes, how is the feature documented? not applicable    - If a feature is not applicable for documentation, explain why?    - If a feature is not documented yet in this PR, please create a followup issue for adding the documentation  
https://github.com/apache/pulsar/pull/10320	4	readability	2021-04-26 04:56:15	[Tests] Improve integration test logging to improve readability and efficiency	### Motivation    Integration tests log /var/log/pulsar/*.log files in an inefficient way. It buffers the output in memory beside logging. When the container terminates, the buffered content is also written to the log output. This is confusing and inefficient.  Building a large StringBuffer in memory causes unnecessary GC.    ### Modifications    - refactor DockerUtils used in integration tests  - add new method `runCommandAsyncWithLogging` which doesn't buffer to memory
https://github.com/apache/pulsar/pull/10344	38	readability	2021-04-25 21:58:41	[Tests] Remove ".atMost" definitions for Awaitility in most cases	### Motivation    Some tests are flaky because the time limits set for Awaitility are too strict.  It's better to avoid specifying the time limit and rely on the default value that is 10 seconds.  This improves the readability of the test.    ### Modifications    - drop `.atMost` definitions used to configure Awaitility in tests.
https://github.com/apache/pulsar/pull/12854	1	readability	2021-11-17 15:00:56	[broker]Optimize indentions in ServerCnx#handleProducer	    ### Contribution Checklist        - Name the pull request in the form "[Issue XYZ][component] Title of the pull request", where *XYZ* should be replaced by the actual issue number.      Skip *Issue XYZ* if there is no associated github issue for this pull request.      Skip *component* if you are unsure about which is the best component. E.g. `[docs] Fix typo in produce method`.      - Fill out the template below to describe the changes contributed by the pull request. That will give reviewers the context they need to do the review.        - Each pull request should address only one issue, not mix up code from multiple issues.        - Each commit in the pull request has a meaningful commit message      - Once all items of the checklist are addressed, remove the above text and this checklist, leaving only the filled out template below.    **(The sections below can be removed for hotfixes of typos)**       ### Motivation    Too many indentions in ServerCnx#handleProducer, not good for readability and further developing.    ### Modifications    Move else part of isAuthorized up front.  Some other minor code style update, no code logical changed.      ### Verifying this change    - [ ] Make sure that the change passes the CI checks.      This change is a trivial rework / code cleanup without any test coverage.    ### Does this pull request potentially affect one of the following parts:    *If `yes` was chosen, please highlight the changes*      - Dependencies (does it add or upgrade a dependency): (no)    - The public API: (no)    - The schema: (no)    - The default values of configurations: (no)    - The wire protocol: (no)    - The rest endpoints: (no)    - The admin cli options: (no)    - Anything that affects deployment: (no)    ### Documentation    Check the box below and label this PR (if you have committer privilege).    Need to update docs?       - [x] `no-need-doc`   Just some trivial code rework.  
https://github.com/apache/pulsar/pull/14617	1	readability	2022-03-10 16:48:38	[ML] Improve readability of ManagedCursorImpl source code	### Motivation & Modifications    - refactor code in ManagedCursorImpl to get rid of 4 FastThreadLocal variables    - it is hard to understand the code and it's not optimal      since it will do object allocations for Long instances stored in the FastThreadLocal       variables.    - there's less overhead in having a simple private class to hold the      fields required for the state    - ordinary local variables cannot be used since .forEach accepts a lambda      and local variables cannot be mutated in a lambda
https://github.com/apache/pulsar-manager/pull/229	10	readability	2019-12-07 00:37:27	Remove redundant local variables from services' implementation	## Motivation    The modification improves readability and reduces the number of lines.    ## Modifications    - Redundant variables (defined right before the return keyword) were removed in favor of the one-line solution.    
https://github.com/apache/ranger/pull/444	4	readability	2024-12-11 15:52:37	RANGER-5028: credentialbuilder module: update for code readability improvements	## What changes were proposed in this pull request?    Updated credentialbuilder module sources to comply with the checkstyle requirements (subtask of RANGER-5017).    ## How was this patch tested?    Build with unit tests completed successfully.  
https://github.com/apache/ranger/pull/458	1	readability	2024-12-16 16:32:38	RANGER-5027: agents-installer module: update for code readability imp 	 rovement    ## What changes were proposed in this pull request?    Updated agents-installer module sources to comply with the checkstyle requirements (subtask of RANGER-5017).    ## How was this patch tested?    Build with unit tests completed successfully.  
https://github.com/apache/ranger/pull/474	66	readability	2024-12-24 02:54:56	RANGER-5035 : kms module: update for code readability improvement	## What changes were proposed in this pull request?    Updated Ranger-KMS module for core readability.  There is not any functional changes except few logger changes where I replaced concatenation of logger messages by parameterised logger messages.    ## How was this patch tested?    KMS build ( mvn clean install) was successful and also there is not any functional changes.  
https://github.com/apache/ranger/pull/476	12	readability	2024-12-24 09:20:52	RANGER-5040 : plugin-kms module: update for code readability improvement	## What changes were proposed in this pull request?    Only code formatting and code cleanup was done. Also concatenated logger statements were updated by parameterized loggers.  There are no functional changes.      ## How was this patch tested?    module build  (mvn clean install) passed.  
https://github.com/apache/ranger/pull/487	55	readability	2025-01-06 19:07:54	RANGER-5061: security-admin module(common package): update for code readability improvementRanger 5061 common	## What changes were proposed in this pull request?    Fixes all checkstyle related errors in common package for security-admin module      ## How was this patch tested?    mvn clean install  
https://github.com/apache/ranger/pull/488	7	readability	2025-01-03 19:17:39	RANGER-5061: security-admin module(elasticsearch package): update for code readability improvement	## What changes were proposed in this pull request?    Fixes all checkstyle related errors in elasticsearch package for security-admin module      ## How was this patch tested?    mvn clean install
https://github.com/apache/ratis/pull/468	1	readability	2021-05-05 11:31:11	RATIS-1364 Fix Sonar Qube issues in IOUtils	## What changes were proposed in this pull request?    This PR fixes problems related by Sonar Qube including two NPE issues. Bellow more comprehensive list of changes:  - Fix asIOException function NPE  - Reaorganize readFully function for better readability  - Change while-loop like for-loops to actual while-loops  - Fix readObject function NPE    Was part of the https://github.com/apache/ratis/pull/461    ## What is the link to the Apache JIRA    https://issues.apache.org/jira/browse/RATIS-1364    ## How was this patch tested?    Change has been tested using existing unit tests.  
https://github.com/apache/rocketmq/pull/4279	1	readability	2022-05-19 06:29:11	[ISSUE #4325] Remove redundant exception to improve readability	**Make sure set the target branch to `develop`**    ## What is the purpose of the change    Fix #4325     ## Brief changelog    XX    ## Verifying this change    XXXX    Follow this checklist to help us incorporate your contribution quickly and easily. Notice, `it would be helpful if you could finish the following 5 checklist(the last one is not necessary)before request the community to review your PR`.    - [x] Make sure there is a [Github issue](https://github.com/apache/rocketmq/issues) filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.   - [x] Format the pull request title like `[ISSUE #123] Fix UnknownException when host config not exist`. Each commit in the pull request should have a meaningful subject line and body.  - [x] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  - [x] Write necessary unit-test(over 80% coverage) to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in [test module](https://github.com/apache/rocketmq/tree/master/test).  - [x] Run `mvn -B clean apache-rat:check findbugs:findbugs checkstyle:checkstyle` to make sure basic checks pass. Run `mvn clean install -DskipITs` to make sure unit-test pass. Run `mvn clean test-compile failsafe:integration-test`  to make sure integration-test pass.  - [ ] If this contribution is large, please file an [Apache Individual Contributor License Agreement](http://www.apache.org/licenses/#clas).  
https://github.com/apache/rocketmq/pull/8183	1	readability	2024-05-23 12:15:20	[ISSUE #8182] Modify variable names to enhance readability #8182	   Please make sure the target branch is right. In most case, the target branch should be `develop`.      ### Which Issue(s) This PR Fixes       Please ensure that the related issue has already been created, and [link this pull request to that issue using keywords]( https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword>) to ensure automatic closure.      Fixes #8182     ### Brief Description       Write a brief description for your pull request to help the maintainer understand the reasons behind your changes.      Change the variable name 'group' to 'subGroup' and change the variable name 'subscription' to 'subExpression'    ### How Did You Test This Change?       In order to ensure the code quality of Apache RocketMQ, we expect every pull request to have undergone thorough testing.      Start namesvr and broker, set namesvr in the code, set parameters, then run producer and consumer, run well, and the message can be sent and consumed  
https://github.com/apache/rocketmq/pull/9202	1	readability	2025-02-24 00:44:36	[ISSUE #9201] cleanup dead code patterns and improve readability and maintainability.	       Please make sure the target branch is right. In most case, the target branch should be `develop`.      ### Which Issue(s) This PR Fixes       Please ensure that the related issue has already been created, and [link this pull request to that issue using keywords]( https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue#linking-a-pull-request-to-an-issue-using-a-keyword>) to ensure automatic closure.      Fixes #9201    ### Brief Description    - if (true) return patterns are redundant and misleading  - Unreachable throw statements clutter code and may cause static analysis warnings  - Cleanup improves code readability and maintainability       Write a brief description for your pull request to help the maintainer understand the reasons behind your changes.      ### How Did You Test This Change?       In order to ensure the code quality of Apache RocketMQ, we expect every pull request to have undergone thorough testing.      Just modify the code format, not the logic  
https://github.com/apache/roller/pull/111	1	readability	2021-12-25 04:10:26	bugfix: SearchServlet forgot to copy the user to WeblogPageRequest.	Template model of the search results page always thought the user was not logged in.    fix is here f1f80002ace0c5983bb4f7437110b4216e62cba9 other commit tries to improve readability a little bit.  
https://github.com/apache/samza/pull/1655	6	readability	2023-03-08 22:18:59	Refactored ContainerStorageManager for readability and manageability	Issues: ContainerStorageManager has gotten very unwieldy with 1000+ LOC of highly complex and invocation-order dependent logic. It also does too much by trying to manage side inputs lifecycle along with regular state stores'.     Changes:       1. Separated side inputs (and standby) related store creation and restore logic into a separate SideInputsManager class.      2. Separated helper methods into a ContainerStorageManagerUtil class, and made them all static to ensure that they don't mutate class fields.     Most of the PR is simply moving code from one place to another. However a couple of places that introduce semantic changes or otherwise require careful review are called inline in "Refactor Note" comments.    There is a lot more room for improvement (e.g. more javadocs, more tests, simplifying method signatures, etc). But this change should make it easier to reason about the lifecycle of side inputs for now.    Tests: Existing ContainerStorageManager unit tests pass.    
https://github.com/apache/shardingsphere/pull/17345	9	readability	2022-05-05 13:06:16	Refactor `CosIdIntervalShardingAlgorithmTest` to improve readability.	Fixes #17337 .    Changes proposed in this pull request:  - Split `CosIdIntervalShardingAlgorithmTest` by sharding-value type to improve readability.
https://github.com/apache/shardingsphere/pull/26698	3	readability	2023-06-29 13:20:40	Fix sonar issues of Replace this "switch" statement by "if" statements to increase readability.	Fix https://sonarcloud.io/project/issues?resolved=false&rules=java%3AS1301&sinceLeakPeriod=true&types=CODE_SMELL&id=apache_shardingsphere
https://github.com/apache/shardingsphere/pull/34338	1	readability	2025-01-13 11:26:59	Split e2e test case to scenario directory to improve test case readability	Fixes #ISSUSE_ID.    Changes proposed in this pull request:    - Split e2e test case to scenario directory to improve test case readability    ---    Before committing this PR, I'm sure that I have checked the following options:  - [x] My code follows the [code of conduct](https://shardingsphere.apache.org/community/en/involved/conduct/code/) of this project.  - [x] I have self-reviewed the commit code.  - [x] I have (or in comment I request) added corresponding labels for the pull request.  - [x] I have passed maven check locally : `./mvnw clean install -B -T1C -Dmaven.javadoc.skip -Dmaven.jacoco.skip -e`.  - [ ] I have made corresponding changes to the documentation.  - [x] I have added corresponding unit tests for my changes.  - [ ] I have updated the Release Notes of the current development version. For more details, see [Update Release Note](https://shardingsphere.apache.org/community/en/involved/contribute/contributor/)  
https://github.com/apache/skywalking/pull/7913	9	readability	2021-10-12 11:04:29	Refactor the OAL compiler context to improve readability	           Please make sure to read this template first, pull requests that don't accord with this template      maybe closed without notice.      Texts surrounded by ` ` and `>` are meant to be replaced by you, e.g.  framework name>,  issue number>.      Put an `x` in the `[ ]` to mark the item as CHECKED. `[x]`          ====  Remove this line WHEN AND ONLY WHEN you're fixing a bug, follow the checklist  ====  ### Fix  bug description or the bug issue number or bug issue link>  - [ ] Add a unit test to verify that the fix works.  - [ ] Explain briefly why the bug exists and how to fix it.       ====  Remove this line WHEN AND ONLY WHEN you're fixing a bug, follow the checklist  ====         ====  Remove this line WHEN AND ONLY WHEN you're improving the performance, follow the checklist  ====  ### Improve the performance of  class or module or ...>  - [ ] Add a benchmark for the improvement, refer to [the existing ones](https://github.com/apache/skywalking/blob/master/apm-commons/apm-datacarrier/src/test/java/org/apache/skywalking/apm/commons/datacarrier/LinkedArrayBenchmark.java)  - [ ] The benchmark result.  ```text   Paste the benchmark results here>  ```  - [ ] Links/URLs to the theory proof or discussion articles/blogs.  links/URLs here>       ====  Remove this line WHEN AND ONLY WHEN you're improving the performance, follow the checklist  ====         ====  Remove this line WHEN AND ONLY WHEN you're adding a new feature, follow the checklist  ====  ###  Feature description>  - [ ] If this is non-trivial feature, paste the links/URLs to the design doc.  - [ ] Update the documentation to include this new feature.  - [ ] Tests(including UT, IT, E2E) are added to verify the new feature.  - [ ] If it's UI related, attach the screenshots below.       ====  Remove this line WHEN AND ONLY WHEN you're adding a new feature, follow the checklist  ====      - [ ] If this pull request closes/resolves/fixes an existing issue, replace the issue number. Closes # issue number>.  - [x] Update the [`CHANGES` log](https://github.com/apache/skywalking/blob/master/CHANGES.md).    * Refactor the OAL compiler context to improve readability. Usually, this could not be included in the change log, but considering this kind of refactor could cause not-found bugs, I am adding this as a hit if we face some related issues in the future.  * Fix wrong generated codes of `hashCode` and `remoteHashCode` methods for numeric fields. This is never used, so, no one reported. But using `_` to build hash code is definite a bug.
https://github.com/apache/struts/pull/657	3	readability	2023-02-01 06:23:19	WW-5279 Improve readability of XmlConfigurationProvider class	WW-5279
https://github.com/apache/uniffle/pull/488	9	readability	2023-01-16 08:45:03	[Minor] Improve readability by replacing lambda with method reference	### What changes were proposed in this pull request?    Improve readability by replacing lambda with method reference.    ### Why are the changes needed?    Fixes #487    ### Does this PR introduce _any_ user-facing change?    No.    ### How was this patch tested?    Existing CI.
https://github.com/apiman/apiman/pull/1074	3	readability	2021-03-22 14:28:06	refactor(es): improve readability of getOrDefault config checks	
https://github.com/apolloconfig/apollo/pull/5293	25	readability	2024-12-14 06:12:34	Code style-Optimize some code structures to improve readability	## What's the purpose of this PR    1. Add `@Override` to the method in the implementation class  2. Modify the equals compare method  3. Use an empty collection instead of null return value    ## Which issue(s) this PR fixes:  Fixes #    ## Brief changelog      Follow this checklist to help us incorporate your contribution quickly and easily:    - [ ] Read the [Contributing Guide](https://github.com/apolloconfig/apollo/blob/master/CONTRIBUTING.md) before making this pull request.  - [ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.  - [ ] Write necessary unit tests to verify the code.  - [ ] Run `mvn clean test` to make sure this pull request doesn't break anything.  - [ ] Update the [`CHANGES` log](https://github.com/apolloconfig/apollo/blob/master/CHANGES.md).       This is an auto-generated comment: release notes by coderabbit.ai   ## Summary by CodeRabbit  - **New Features**  - Enhanced user identification and management with the introduction of a default user ID constant.    - **Bug Fixes**  - Improved null safety in various methods across multiple classes by using safer comparison methods and returning empty lists instead of null.  - **Documentation**  - Added `toString()` methods in several entity classes, improving string representation for debugging and logging.  - **Refactor**  - Annotated methods with `@Override` in various classes to clarify intent and improve readability.  - **Chores**  - Updated method return values to ensure consistent handling of empty cases across the application.    end of auto-generated comment: release notes by coderabbit.ai  
https://github.com/apple/pkl/pull/815	1	readability	2024-11-14 15:14:04	Use text block to improve readability of test	
https://github.com/arquillian/arquillian-cube/pull/513	2	readability	2016-11-04 08:28:41	Updates file path to relative path and add file entry to group entry for improved readability in reports.	#### Short description of what this resolves:  Update the file path to relative path to avoid duplication in the file path entry while rendering the file location as link in the report. #### Changes proposed in this pull request: - Relativize log file path for use by Recorder for generating reports.  - Grouping file entry for better readability in generated reports.    **Fixes**: #512  
https://github.com/awslabs/aws-java-nio-spi-for-s3/pull/251	6	readability	2023-11-02 18:52:53	Improve maintainability / readability / javadoc	*Description of changes:*    This PR addresses some suggestions of the IDE:  * Unnecessary types  * Unnecessary variable initialization  * Replace one liner lambdas with expression lambdas  * Declared exceptions that are not thrown  * Replace `assertTrue(x instanceof b)` with `assertThat().isInstanceOf`  * Use collection.isEmpty() when possible    For the cases where `Unnecessary variable initialization` was found, the code has been rewritten with smaller methods, making the code easier to understand (see 2da3ec0f81e5ebe56c725d63ff03e07d06881af9 for example)    By submitting this pull request, I confirm that you can use, modify, copy, and redistribute this contribution, under the terms of your choice.  
https://github.com/AxonFramework/AxonFramework/pull/1152	27	readability	2019-07-19 11:55:38	Multi-Context Support	This pull request provides support for multiple (bounded) contexts within an application leveraging Axon Server.  As such, the heavy weight of the adjustments lies within the `axon-server-connector`, as the created gRPC channels are required to be aware which (bounded) context they're working in.    Along side that the `TargetContextResolver` has been provided. This component is used by the `AxonServerCommandBus` and `AxonServerQueryBus` to resolve the target context of a given Command or Query message prior to dispatching it on the correct channel. This thus allows users to specify which Commands/Queries should be targeted towards which context.    Additionally, the `AxonServerEventStore` has a new method, the `createStreamableMessageSourceForContext(String)`, which allows you to instantiate a `StreamableMessageSource` for a specific (bounded) context.  This, in conjunction with the Multi-Source Event Processing implementation (marked under #1069) allows users to specify a `TrackingEventProcessor` that can ingest events from several contexts.    Lastly, for readability reasons, indent adjustments and JavaDoc has been included, whenever applicable.
https://github.com/Azure/azure-sdk-for-java/pull/24141	1	readability	2021-09-15 20:00:47	Addressing the issue of not terminating unconfirmed-sends due to the termination of link with no error	  * Addressing the issue of not terminating unconfirmed-sends due to the server-side termination of link/session/connection endpoints with no error, not terminating such unconfirmed-sends was causing the Receiver to hang.  * Adding Javadoc/comment to the implementation type `RequestResponseChannel`, rename / grouping its member variables to improve the readability (no functional/logic change).  * None of the existing logging messages/formats are changed, as it's crucial for debugging.
https://github.com/Azure/azure-sdk-for-java/pull/35796	6	readability	2023-07-11 14:12:06	Improving the readability of session receiver types implementation	Some minor changes to improve the readability of session receiver types implementation - by removing unnecessary method calls indirections and resulting unused methods, making few methods that don't need to be package-internal as private.
https://github.com/badvision/jace/pull/34	1	readability	2017-10-24 15:12:24	Cleanup DHGR code for readability	Can this be merged?    Thx.  
https://github.com/ballerina-platform/openapi-tools/pull/515	2	readability	2021-08-24 18:37:52	[Client] Refactor client generation code to increase readability 	## Purpose  > $subject    ## Goals  > Rearranging the `BallerinaClientGenerator` class by dividing each part of syntax tree generation to separate functions. This will increase the readability and maintainability of the code.     ## Security checks   - Followed secure coding standards in http://wso2.com/technical-reports/wso2-secure-engineering-guidelines? yes   - Ran FindSecurityBugs plugin and verified report? no   - Confirmed that this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets? yes    ## Test environment  > Java JDK 11  > Ubuntu 20.04 LTS
https://github.com/batfish/batfish/pull/1860	1	readability	2018-07-11 22:58:26	Driver readability: invert ifs and exit early	
https://github.com/bisq-network/bisq/pull/3890	5	readability	2020-01-23 14:18:47	Improve readability of the daily burnt BSQ chart	Relevant issue: #3753     These commits are about improving readability of the daily burnt BSQ chart. It is done by introducing a 'Zoom to inliers' toggle, which when active zooms in on inliers, and by introducing a moving average. The zooming feature is automatic and should be at least somewhat robust to new trends. The moving average contextualizes the large peaks and gullies and generally improves interpretability of this noisy series. Also, the charts' Y axes are set to include 0, most notably in the monthly issued BSQ chart.    I have provided details in the commit messages.    The numerous changes to the SupplyView class are contained in a single commit, which I realise is not comfortable to review. Ideally I would have refactored in a separate commit, but I wasn't sure how I want to refactor until many of the changes were already implemented.    Below are screenshots illustrating changes to the daily burnt BSQ chart:    This is before changes:  ![bsq burnt before changes](https://user-images.githubusercontent.com/2715476/72210393-56ef1e80-34c3-11ea-95da-a09db5df1ede.png)  This is a GIF slideshow (2 frames) of the zoom toggle being toggled in the new chart:  ![bsq burnt after changes animation](https://user-images.githubusercontent.com/2715476/72210450-6b7fe680-34c4-11ea-8d52-bb7f124dd579.gif)    This took much longer to implement than expected. There were quite a few nuances I didn't anticipate.    Furthermore, some of the more minute cosmetic choices I made (or didn't make) might not be great, because since the holidays (and for a few weeks more) I'm using a pretty old machine, which makes the ROI of iterating less significant GUI changes prohibitvely low.
https://github.com/broadinstitute/gatk/pull/6315	2	readability	2019-12-20 22:59:44	Modified ANDed read filter output message for readability	Added logic for generating a simplified read filter output in the case of multiple filters joined by AND    Fixes #3520
https://github.com/camel-tooling/camel-idea-plugin/pull/723	6	readability	2022-06-20 08:35:50	Ref #719 - Simplify types in code assistance for better readability	fixes #719     ## Motivation    The code assistance list of options is shown nicer as it uses `string` instead of `java.lang.String`. There is less noise.    ## Modifications    * Add the method `toSimpleType` in `JavaClassUtils` to convert a Java type into a simplified type when it is possible  * Call the new method to get the type to display in the code assistance and the quick documentation everywhere is needed  * Fix warnings due to deprecations in modified classes (not related to the initial issue)    ## Result    ![image](https://user-images.githubusercontent.com/1618116/174549821-1f964e55-3d7f-41d9-b115-681e86f42e16.png)  
https://github.com/camel-tooling/camel-language-server/pull/102	1	readability	2018-07-03 12:46:09	Write ternary with if-else to improve readability	Signed-off-by: Aur lien Pupier  apupier@redhat.com>
https://github.com/camel-tooling/camel-language-server/pull/413	2	readability	2020-07-02 13:59:05	Use isEmpty() for improved readability	Signed-off-by: Aur lien Pupier  apupier@redhat.com>    # Pull Request informations    ## Rebase & Merge default requirements    1. Green build for master branch  2. Wait 24 hours after PR creation  3. Green job for PR  4. Approved PR    ## PR labels default process    - READY_FOR_REVIEW  &rightarrow;  REVIEW_DONE  &rightarrow;  READY_FOR_MERGE    ## Tests    - [ ] Are there **Unit tests**?  - [ ] Are there **Integration tests**?  - [ ] Do we need a new **UI test**?    ## PR workflow progress    1. [ ] Tagged with relevant **PR labels**  2. [ ] Green **job for PR**  3. [ ] PR was created more than **24 hours ago** or **All committers approved** it  4. [ ] Green **master** branch build
https://github.com/camunda/camunda/pull/7390	1	readability	2021-06-29 07:31:07	test(raft): improve priority time test for readability	## Description    Follow up of PR review #7336  Improve the test for readability : use mocks to verify that the timers are triggered in the expected order.    ## Related issues         Cut-off marker  _All lines under and including the cut-off marker will be removed from the merge commit message_    ## Definition of Ready    Please check the items that apply, before requesting a review.    You can find more details about these items in our wiki page about [Pull Requests and Code Reviews](https://github.com/camunda-cloud/zeebe/wiki/Pull-Requests-and-Code-Reviews).    * [x] I've reviewed my own code  * [x] I've written a clear changelist description  * [x] I've narrowly scoped my changes  * [x] I've separated structural from behavioural changes       ## Definition of Done       Please check the items that apply, before merging or (if possible) before requesting a review.      _Not all items need to be done depending on the issue and the pull request._    Code changes:  * [ ] The changes are backwards compatibility with previous versions  * [ ] If it fixes a bug then PRs are created to [backport](https://github.com/zeebe-io/zeebe/compare/stable/0.24...develop?expand=1&template=backport_template.md&title=[Backport%200.24]) the fix to the last two minor versions. You can trigger a backport by assigning labels (e.g. `backport stable/0.25`) to the PR, in case that fails you need to create backports manually.    Testing:  * [ ] There are unit/integration tests that verify all acceptance criterias of the issue  * [ ] New tests are written to ensure backwards compatibility with further versions  * [ ] The behavior is tested manually  * [ ] The change has been verified by a QA run  * [ ] The impact of the changes is verified by a benchmark     Documentation:   * [ ] The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)  * [ ] New content is added to the [release announcement](https://drive.google.com/drive/u/0/folders/1DTIeswnEEq-NggJ25rm2BsDjcCQpDape)  
https://github.com/camunda/camunda/pull/11473	1	readability	2023-01-25 16:14:13	[Backport stable/8.1] refactor(broker): refactor snapshot director for readability	# Description Backport of #11466 to `stable/8.1`.  relates to #11423
https://github.com/ChAoSUnItY/Nenggao/pull/3	1	readability	2022-08-21 09:24:39	Improve readability according to the comment	
https://github.com/checkstyle/checkstyle/pull/4049	1	readability	2017-03-22 19:38:54	Issue #4055: Perform refactoring of AnnotationLocationCheck to increase code readability	#4055 
https://github.com/checkstyle/checkstyle/pull/5472	2	readability	2018-02-01 10:30:47	Issue: #5427	Issue: #5427    Issue solved. Solution was a bit improved due to place the only character patter per line to increase readability and make maintenance easier.
https://github.com/civiform/civiform/pull/9948	1	readability	2025-03-12 17:04:16	ProgramRespository readability / code cleanups	### Description    Cleanup largely by removing unnecessary else{} blocks to return-early checks.      ### Checklist    #### General    Read the full guidelines for PRs [here](https://github.com/civiform/civiform/wiki/Technical-contribution-guide#creating-a-pull-request)    - [x] Added the correct label:   feature | enhancement | bug | under-development | dependencies | infrastructure | ignore-for-release | database >  - [ ] Assigned to a specific person, `civiform/developers`, or a [more specific round-robin list](https://github.com/civiform/civiform/wiki/Technical-contribution-guide#adding-reviewers)  - [ ] Added an additional reviewer from outside your organization as FYI (if the primary reviewer is in the same organization as you)  - [x] Removed the release notes section if the title is sufficient for the release notes description, or put more details in that section.  - [ ] Created unit and/or browser tests which fail without the change (if possible)  - [ ] Performed manual testing (Chrome and Firefox if it includes front-end changes)  - [ ] Extended the README / documentation, if necessary. For user-facing features, consider updating [the user docs](https://github.com/civiform/docs). For "under-the-hood" changes or things more relevant to developers, consider updating [the dev wiki](https://github.com/civiform/civiform/wiki).  - [ ] Ensured PII wasn't added to any new logs, unless it was guarded by `isDevOrStaging`    #### Database evolutions    Read the guidelines [here](https://github.com/civiform/civiform/wiki/Database#writing-database-evolutions)    - [ ] Assigned two reviewers  - [ ] Guarded against already existing resources using `IF NOT EXISTS` and `IF EXISTS`  - [ ] Downs created to undo changes in Ups  - [ ] Every comment in script should begin with -- and not # --- unless it denotes Ups or Downs. See [here](https://www.playframework.com/documentation/2.9.x/Evolutions) for details.  - [ ] Tested both the Downs and the Ups scripts manually (When testing, include all comments from the evolution in your test script to ensure any syntax errors in the comments are caught.)  - [ ] Data migrations aren't being done (please use a [Durable Job](https://github.com/civiform/civiform/wiki/Database#durable-jobs-for-data-updates) if doing a data migration)  - [ ] Update the model documentation in our [wiki](https://github.com/civiform/civiform/wiki/Database) if necessary    #### Durable jobs    Read the docs [here](https://github.com/civiform/civiform/wiki/Database#durable-jobs-for-data-updates)    - [ ] Assigned two reviewers  - [ ] Included a rollback plan and a job to undo the data changes if appropriate    #### User visible changes    - [ ] Followed steps to [internationalize](https://github.com/civiform/civiform/wiki/Internationalization-%28i18n%29#application-strings) any new strings    - [ ] Added context strings to new [messages](https://github.com/civiform/civiform/blob/main/server/conf/i18n/messages)    - [ ] Didn't use a message in applicant facing code that isn't translated yet (unless behind a flag)  - [ ] Wrote browser tests using the [validateAccessibility](https://sourcegraph.com/github.com/civiform/civiform/-/blob/browser-test/src/support/index.ts?L437:14&subtree=true) method  - [ ] Made equivalent changes in Thymeleaf for applicant-facing features and changes (or created an issue in the [Northstar epic](https://github.com/orgs/civiform/projects/1/views/94) to track that it's missing from Thymeleaf)  - [ ] Tested on mobile view. See [mobile device mode](https://developer.chrome.com/docs/devtools/device-mode/)  - [ ] Manually tested at 200% size  - [ ] Manually evaluated tab order  - [ ] Manually tested with a screen reader if the feature is applicant-facing. See [screen reader testing](https://github.com/civiform/civiform/wiki/Testing#screen-reader-testing)    #### New Features    - [ ] Add new FeatureFlag env vars to `server/conf/helper/feature-flags.conf`  - [ ] Conditioned new functionality on a [FeatureFlag](https://github.com/civiform/civiform/wiki/Feature-Flags)  - [ ] Wrote browser tests with the feature flag off and on, etc.    ### Instructions for manual testing    If instructions are needed for manual testing by reviewers, include them here.    ### Issue(s) this completes    Fixes # issue_number>; Fixes # issue_number>...  
https://github.com/civiform/civiform/pull/10198	7	readability	2025-04-03 17:55:08	Readability cleanup for Repository classes	### Description    Move Transactions into try-with-resource  Chain setters and extract reused getter into a var  Replace functional anonymous methods with method references  Remote unneeded try      ### Checklist    #### General    Read the full guidelines for PRs [here](https://github.com/civiform/civiform/wiki/Technical-contribution-guide#creating-a-pull-request)    - [x] Added the correct label:   feature | enhancement | bug | under-development | dependencies | infrastructure | ignore-for-release | database >  - [x] Assigned to a specific person, `civiform/developers`, or a [more specific round-robin list](https://github.com/civiform/civiform/wiki/Technical-contribution-guide#adding-reviewers)  - [ ] Added an additional reviewer from outside your organization as FYI (if the primary reviewer is in the same organization as you)  - [x] Removed the release notes section if the title is sufficient for the release notes description, or put more details in that section.  - [ ] Created unit and/or browser tests which fail without the change (if possible)  - [ ] Performed manual testing (Chrome and Firefox if it includes front-end changes)  - [ ] Extended the README / documentation, if necessary. For user-facing features, consider updating [the user docs](https://github.com/civiform/docs). For "under-the-hood" changes or things more relevant to developers, consider updating [the dev wiki](https://github.com/civiform/civiform/wiki).  - [ ] Ensured PII wasn't added to any new logs, unless it was guarded by `isDevOrStaging`  
https://github.com/codecentric/chaos-monkey-spring-boot/pull/536	5	readability	2025-01-31 14:23:37	use objectmapper in both directions, enhance readability	  **What**: small refactorings in dtos and enum    **Why**: better readability    **How**: small refactorings     **Checklist**:   - [ ] Documentation added N/A     - [ ] Changelog updated N/A  - [ ] Tests added N/A         - [X] Ready to be merged   
https://github.com/concordion/cubano/pull/61	1	readability	2018-04-18 08:59:20	Improve readability/usability of the HttpEasyReader response	Depending on the contentType (e.g. json/xml), the response is formatted as either JSON, XML or kept as is.  Enables readability of the logged message.     Enabled only when logging (of the request/response) is turned on.  
https://github.com/Consensys/linea-tracer/pull/354	1	readability	2023-12-01 06:04:03	[MINOR] readability fixes	
https://github.com/Consensys/teku/pull/1981	2	readability	2020-05-29 00:26:24	Added new ValidatorOptions validation rule and improved readability of existing error + tests.	       Thanks for sending a pull request! Please check out our contribution guidelines:       https://github.com/PegaSysEng/teku/blob/master/CONTRIBUTING.md      ## PR Description  Added some extra validation for ValidatorOptions CLI options and improved readability of the existing message.  New tests added.    ## Fixed Issue(s)     Please link to fixed issue(s) here using format: fixes # issue number>       Example: "fixes #2"    Fixes #1774   
https://github.com/Consensys/teku/pull/5859	3	readability	2022-06-28 15:41:08	Improve readability in `Web3JClient::doRequest` error handling	It also avoid possibility of `null` message in `updateBuilderAvailability` logging.    ## Documentation    - [ ] I thought about documentation and added the `doc-change-required` label to this PR if updates are required.    ## Changelog    - [ ] I thought about adding a changelog entry, and added one if I deemed necessary.  
https://github.com/CorfuDB/CorfuDB/pull/1701	2	readability	2019-01-31 17:44:34	Add metrics to measure transaction operations time and commit time	## Overview    Description:  Adding following metrics:  - Tx-Op : A metric that provides a timer histogram for measuring from beginning of transaction up to committing the transaction  - Tx-Commit : A metric that provides a timer histogram for committing transaction    Also removing the unnecessary else clause for better readability in TXEnd().    Why should this be merged:   To measure the time being spend in transaction    Related issue(s) (if applicable): # number>      ## Checklist (Definition of Done):    - [x] There are no TODOs left in the code  - [x] [Coding conventions](https://github.com/CorfuDB/CorfuDB/wiki/Corfu-Style-Guidelines) (e.g. for logging, unit tests) have been followed  - [x] Change is covered by automated tests  - [x] Public API has Javadoc  
https://github.com/CorfuDB/CorfuDB/pull/1753	8	readability	2019-02-23 00:45:03	StreamLogFiles clean up	## Overview    Description:  Fix warnings, code reformat    Why should this be merged:   Basic simplifaction, get rid of abandoned code, code reformats for better readability, checksum unit test.     Related issue(s) (if applicable): # number>      ## Checklist (Definition of Done):    - [x] There are no TODOs left in the code  - [x] [Coding conventions](https://github.com/CorfuDB/CorfuDB/wiki/Corfu-Style-Guidelines) (e.g. for logging, unit tests) have been followed  - [x] Change is covered by automated tests  - [x] Public API has Javadoc  
https://github.com/CorfuDB/CorfuDB/pull/1850	1	readability	2019-07-02 00:41:01	Change Log Level StreamLogDataStore for readability	## Overview    On state transfer, we see these ignore messages which are somehow misleading. To improve readability we should set to debug the actual update of the tail segment and to trace all subsequent ignored updates.    Why should this be merged: improve log readability.    Related issue(s) (if applicable): #1849   
https://github.com/CorfuDB/CorfuDB/pull/1901	17	readability	2019-06-12 01:46:53	Introducing non-cacheable reads on log unit server.	## Overview    - For batch read scenarios like state transfer and fast loader, caching  the read results on log unit server would pollute the cache. This patch  adds the capability of not caching the read results in these situations.    - Separates log unit cache into a new class for more readability and      testability.    Why should this be merged:   Improve performance on log unit server by preventing cache pollution.    Related issue(s) (if applicable): #1841       ## Checklist (Definition of Done):    - [x] There are no TODOs left in the code  - [x] [Coding conventions](https://github.com/CorfuDB/CorfuDB/wiki/Corfu-Style-Guidelines) (e.g. for logging, unit tests) have been followed  - [x] Change is covered by automated tests  - [x] Public API has Javadoc  
https://github.com/CorfuDB/CorfuDB/pull/1959	17	readability	2019-06-21 06:52:55	Introducing non-cacheable reads on log unit server. (#1901)	- For batch read scenarios like state transfer and fast loader, caching  the read results on log unit server would pollute the cache. This patch  adds the capability of not caching the read results in these situations.    - Separates log unit cache into a new cache class for more readability  and testability.    
https://github.com/CorfuDB/CorfuDB/pull/1995	1	readability	2019-07-02 03:30:30	Change Log Level StreamLogDataStore for readability (#1850) - 0.2.3	Port #1850 to Corfu-0.2.3
https://github.com/CorfuDB/CorfuDB/pull/2090	9	readability	2019-08-05 22:27:26	ILogData: Get rid of backward dependency on LogEntry.	## Overview    - LogEntry is the payload of LogData, however LogEntry also contains a  reference to LogData, which undermines readability and is error prone.  This is also unnecessary because the only reason to have this backward  dependency is LogEntry needs to know about the global address inside  LogData, which is consumed by VLO. This patch removed this dependency  by setting globalAddress directly.    - This is also a prerequisite a following patch that unifies SMREntry, MultiSMREntry  and MultiObjectSMREntry.    Related issue(s) (if applicable): #2080       ## Checklist (Definition of Done):    - [x] There are no TODOs left in the code  - [x] [Coding conventions](https://github.com/CorfuDB/CorfuDB/wiki/Corfu-Style-Guidelines) (e.g. for logging, unit tests) have been followed  - [x] Change is covered by automated tests  - [x] Public API has Javadoc  
https://github.com/CorfuDB/CorfuDB/pull/2256	11	readability	2019-12-16 20:53:09	Move Index defintions into a separate class	In order to accommodate for disk-backed CorfuTable refactoring and to  improve readability, move all index interfaces and definitions out of  CorfuTable and into a separate class.    ## Overview    Description:    Why should this be merged:     Related issue(s) (if applicable): # number>      ## Checklist (Definition of Done):    - [ ] There are no TODOs left in the code  - [ ] [Coding conventions](https://github.com/CorfuDB/CorfuDB/wiki/Corfu-Style-Guidelines) (e.g. for logging, unit tests) have been followed  - [ ] Change is covered by automated tests  - [ ] Public API has Javadoc  
https://github.com/crate/crate/pull/5392	4	readability	2017-04-21 15:48:37	Simplify "FetchRequiredVisitor" / improve readability	The FetchRequiredVisitor determined if a fetch is feasible and also extended the querySymbols if a _score column is encountered.  This commit removes the querySymbol-extension logic because `QueriedDocTableFetchPushDown` already handles `_score` columns itself.  Due to the removal of the querySymbol extension logic it's also possible to optimize it. A fetch is now considered feasible as soon as a single fetchable Reference or Field is encountered.
https://github.com/crawler-commons/crawler-commons/pull/383	1	readability	2022-10-06 11:26:13	Improve readability of robots.txt unit tests	- put lines of embedded robots.txt test files into separate code lines (except for empty lines)  - apply code formatting template    This PR does not change anything except the formatting. Want to keep the formatting changes as separate PR to make the review of other PRs (to address #192 and #245) easier.
https://github.com/DataLinkDC/dinky/pull/1148	1	readability	2022-10-25 01:20:27	refactor: improve readability, add log, fix iterator exception after miniCluster close	
https://github.com/DataLinkDC/dinky/pull/1155	12	readability	2022-10-28 05:15:36	refactor: improve code readability. eliminate hide problem, wait for 0.7	
https://github.com/datastax/jvector/pull/388	3	readability	2025-01-23 21:41:25	Change variable names to improve readability	Switch usages of  "ef" to "overquery"
https://github.com/davidmayr/CraftFlowers/pull/20	16	readability	2022-08-19 17:14:32	Improve readability and make code more intuitive, added zh_TW language	Improve readability and make code more intuitive
https://github.com/deeplearning4j/deeplearning4j/pull/7528	1	readability	2019-04-11 10:06:22	[WIP] Small code refactor - LeNet	## What changes were proposed in this pull request?    Small refactor in LeNet for better readability and quicker analize.    - Extracted each layer parameter to separate line.  - Extracted set kernel size and stride from constructor to builder methods.    ## How was this patch tested?    Ran all tests again.    ## Quick checklist    The following checklist helps ensure your PR is complete:    - [ ] Reviewed the [Contributing Guidelines](https://github.com/deeplearning4j/deeplearning4j/blob/master/CONTRIBUTING.md) and followed the steps within.  - [ ] Created tests for any significant new code additions.  - [ ] Relevant tests for your changes are passing.  - [ ] Ran mvn formatter:format (see [formatter instructions](http://code.revelc.net/formatter-maven-plugin/examples.html#Setting_Source_Files) for targeting your specific files).  
https://github.com/dita-ot/dita-ot/pull/2884	2	readability	2018-01-30 15:08:44	Strip redundant whitespace from domains attribute	Strip redundant whitespace from `@domains` attribute. This improves readability of the temporary topics and maps.    Use lazy initialization for result `AttributesImpl` to reduce object creation as a performance optimization.    Signed-off-by: Jarno Elovirta  jarno@elovirta.com>  
https://github.com/dita-ot/dita-ot/pull/3300	5	readability	2019-05-11 14:29:32	Change file key to path for improved readability	Change `file` key on `param` to `path` because the value may be either a file or a directory path.
https://github.com/dsldevkit/dsl-devkit/pull/941	1	readability	2024-05-27 11:12:14	Slightly improve readability and performance using lambas	
https://github.com/Dungeon-CampusMinden/Dungeon/pull/1564	16	readability	2024-07-01 13:27:47	Dungeon: improve readability by replacing implicit filtering (entityStream) with explicit filtering (filteredEntityStream, both System)	**fixes #1553**     berarbeitet den Umgang mit dem Entity-Stream in `System#execute`-Methoden, um eine bessere Code-Lesbarkeit zu erreichen.    Anmerkung: Durch die gemachten  nderungen kommt es zu Redundanz im Hinblick auf die Filterregeln. Diese werden weiterhin im System gespeichert, k nnen jetzt aber optional als Parameter eigenst ndig verwendet werden. Wenn sich f r das eigenst ndige Verwenden als Parameter entschieden wird, muss bei  nderungen an den Filtern darauf geachtet werden, diese  berall einzutragen (im Konstruktor UND in der Execute-Funktion).    F r leichtere Bedienung und Abw rtskompatibilit t ist die alte Variante aber weiterhin verf gbar.     nderungen im  berblick:    * Umbenennung der Methode `System#entityStream` in `System#filteredEntityStream`  * Hinzuf gen von parametisierten Varianten der Methode `System#filteredEntityStream` in zwei Geschmacksrichtungen:    * Array-Style-Parameter: `filteredEntityStream(final Class ? extends Component>... filterRules)`    * Set-Parameter: `filteredEntityStream(Set Class ? extends Component>> filterRules)`  * Tests  * Anwenden der Methode `System#filteredEntityStream(final Class ? extends Component>... filterRules)` in den `core`- und `contrib`-Systemen  * Kleinere Refactoring- nderungen (Kommentare, Namen)      **ACHTUNG**: Ver nderung der API. (keine Verhaltens nderung)
https://github.com/Dungeon-CampusMinden/Dungeon/pull/1588	2	readability	2024-07-22 16:32:37	Dungeon: improve readability of PathSystem	Kleines Refactoring zur Verbesserung der Lesbarkeit des neuen `PathSystem`s (nach #1586)    (1) Durch die  nderung wird die eigentliche Aktion direkt in der Hauptmethode `PathSystem#excecute` sichtbar.     (2) Zus tzlich wird in der aufgerufenen Methode `filteredEntityStream` noch einmal spezifisch nach der hier relevanten `PathComponent.class` gefragt, damit an dieser Stelle direkt klar ist, wonach eigentlich gefiltert wird. Anderenfalls sind diese Informationen  ber die Klasse verstreut (Konstruktor vs. excecute-Methode - Fehldesign).     (3) Damit ist dann auch beim `fetch(PathComponent.class)` klar, dass es hier immer ein Objekt geben kann und es kann deshalb vereinfacht mit `.orElseThrow()` auf die Component zugriffen werden.[^1]    (4) Leider braucht man in der eigentlichen Nutz-Methode `AIUtils#move` sowohl die Entit t als auch den Pfad - zur Kapselung wird deshalb eine innere Record-Klasse genutzt, um im Stream entsprechend arbeiten zu k nnen.    (5) Die Abfrage, ob eine `PathComponent` einen g ltigen Pfad aufweist, wurde in eine entsprechende Hilfs-Methode in `PathComponent` verschoben. Die konkrete Implementierung interessiert uns hier an dieser Stelle eher nicht - der gespeicherte Pfad muss nur irgendwie noch g ltig sein.      [^1]: Im Prinzip w re `.get()` hier aus meiner Sicht k rzer und lesbarer, ist aber lt. [dev.java/learn/api/streams/optionals](https://dev.java/learn/api/streams/optionals/#opening) veraltet und soll durch `.orElseThrow()` ersetzt werden. 
https://github.com/dylibso/chicory/pull/289	2	readability	2024-04-29 10:19:53	Improve readability of WASM testsuite definition	Changes:    - Use sorted XML list in POM for cleaner diffs  - Rename parameters for clarity on wast file vs test  - Enforce that all wast files are explicitly included or excluded     This will ensure that we aren't missing any tests by accident.
https://github.com/eclipse-collections/eclipse-collections/pull/1135	1	readability	2021-09-07 02:55:24	Refactor Collectors2Test to extract actual and expected variables	Signed-off-by: Sirisha Pratha  sirisha.pratha@bnymellon.com>    Improving code readability - Extracting actual and expected variables, so the types are visible in the tests. 
https://github.com/eclipse-ditto/ditto/pull/908	1	readability	2020-12-08 16:35:25	Handle Integer.MIN_VALUE explicitly in PubSubFactory.hashForPubSub.	This is a cosmetic change for better code readability.
https://github.com/eclipse-edc/Samples/pull/165	4	readability	2023-12-14 11:20:33	docs: improve readability of documentation	## What this PR changes/adds    This PR:  - improves the readablity of documentation  - fixes some typos  - uses the logging webserver as docker container instead of JAR    - makes use of docker container name instead of container id  in streaming sample 2  - removes non-working property `maxDuration` in streaming sample 2    - makes use of docker compose instead fo docker-compose in advanced sample 1  - adds missing catalog fetch in advanced sample 1    Closes #172   Closes #167 
https://github.com/eclipse-ee4j/eclipselink/pull/2062	280	readability	2024-02-12 13:21:55	improve readability of javadoc	
https://github.com/eclipse-jkube/jkube/pull/1046	1	readability	2021-10-25 12:37:12	Changed the sort method interface for easy readability	Made the required changes. Changed Collections.sort(profiles, Collections. Profile>reverseOrder()); in https://github.com/eclipse/jkube/blob/ee2390178dcad8a9cc3a9cb6d5e8c5d70a162a04/jkube-kit/profile/src/main/java/org/eclipse/jkube/kit/profile/ProfileUtil.java to    profiles.sort(Collections.reverseOrder()); for easy understanding.
https://github.com/eclipse-jkube/jkube/pull/2547	1	readability	2024-01-23 09:42:56	refactor: findTagSha method in ImageStreamService for improved readability	## Description      Thank you for your pull request (PR)!    Please provide a description of what your PR does providing a link (if applicable) to the issue it fixes.       This PR addresses the task of refactoring the **findTagSha** method in the **ImageStreamService** class of the JKube Kit.  The original implementation used multiple **_continue_** statements and a **_goto_** statement.    This pull request introduces the following key changes which fulfill all the acceptance criteria:  - **Removed _continue_ statements**  - **Removed _goto_ statement**  - **Extraction of Nested Logic**  - **Test Verification**: Ensured ImageStreamServiceTest passes post-refactoring    I would appreciate a review to ensure that the changes align with the project's standards. Any feedback or suggestions for further improvement are welcome    Fixes #2531      ## Type of change    -  What types of changes does your code introduce? Put an `x` in all the boxes that apply      - [x] Bug fix (non-breaking change which fixes an issue)   - [ ] Feature (non-breaking change which adds functionality)   - [ ] Breaking change (fix or feature that would cause existing functionality to change   - [ ] Chore (non-breaking change which doesn't affect codebase;     test, version modification, documentation, etc.)    ## Checklist   - [x] I have read the [contributing guidelines](https://www.eclipse.dev/jkube/contributing)   - [x] I signed-off my commit with a user that has signed the [Eclipse Contributor Agreement](https://www.eclipse.org/legal/ECA.php)   - [x] My code follows the style guidelines of this project   - [x] I Keep It Small and Simple: The smaller the PR is, the easier it is to review and have it merged   - [x] I use [conventional commits](https://www.conventionalcommits.org/) in my commit messages   - [x] I have performed a self-review of my code   - [ ] I Added [CHANGELOG](../CHANGELOG.md) entry   - [ ] I have updated the [documentation](../kubernetes-maven-plugin/doc) accordingly   - [ ] No new bugs, code smells, etc. in [SonarCloud](https://sonarcloud.io/dashboard?id=jkubeio_jkube) report   - [ ] I have added tests that prove my fix is effective or that my feature works   - [x] New and existing unit tests pass locally with my changes   - [ ] I tested my code in Kubernetes   - [ ] I tested my code in OpenShift        Integration tests (https://github.com/jkubeio/jkube-integration-tests)  Please check integration tests and provide/improve tests if necessary.    Open your PR in Draft mode and verify all of the applicable Checklist items before marking your issue as ready     
https://github.com/eclipse-jkube/jkube/pull/3356	1	readability	2024-09-02 13:55:44	refactor: ``stream().forEach()`` replaced with ``forEach()`` for better readability	## Description      Thank you for your pull request (PR)!    Please provide a description of what your PR does providing a link (if applicable) to the issue it fixes.     Fixes [#3336](https://github.com/eclipse-jkube/jkube/issues/3336)      ## Type of change    -  What types of changes does your code introduce? Put an `x` in all the boxes that apply      - [ ] Bug fix (non-breaking change which fixes an issue)   - [ ] Feature (non-breaking change which adds functionality)   - [ ] Breaking change (fix or feature that would cause existing functionality to change   - [x] Chore (non-breaking change which doesn't affect codebase;     test, version modification, documentation, etc.)    ## Checklist   - [x] I have read the [contributing guidelines](https://www.eclipse.dev/jkube/contributing)   - [x] I signed-off my commit with a user that has signed the [Eclipse Contributor Agreement](https://www.eclipse.org/legal/ECA.php)   - [x] My code follows the style guidelines of this project   - [x] I Keep It Small and Simple: The smaller the PR is, the easier it is to review and have it merged   - [x] I use [conventional commits](https://www.conventionalcommits.org/) in my commit messages   - [x] I have performed a self-review of my code   - [ ] I Added [CHANGELOG](../CHANGELOG.md) entry   - [ ] I have updated the [documentation](../kubernetes-maven-plugin/doc) accordingly   - [ ] No new bugs, code smells, etc. in [SonarCloud](https://sonarcloud.io/dashboard?id=jkubeio_jkube) report   - [ ] I have added tests that prove my fix is effective or that my feature works   - [ ] New and existing unit tests pass locally with my changes   - [ ] I tested my code in Kubernetes   - [ ] I tested my code in OpenShift        Integration tests (https://github.com/eclipse-jkube/jkube-integration-tests)  Please check integration tests and provide/improve tests if necessary.    Open your PR in Draft mode and verify all of the applicable Checklist items before marking your issue as ready     
https://github.com/eclipse-jnosql/jnosql/pull/394	3	readability	2023-06-30 20:17:28	Refactor appendCondition method for improved readability and null han 	The appendCondition method has been updated to improve its readability and adherence to Clean Code principles. These modifications enhance code clarity and maintain the original functionality of the method. The updated code follows best practices and improves the overall maintainability of the codebase.
https://github.com/eclipse-jnosql/jnosql/pull/425	1	readability	2023-08-19 01:15:23	improve readability and maintainability	Separating responsibilities to improve readability and maintainability
https://github.com/eclipse-lemminx/lemminx/pull/1271	3	readability	2022-08-15 13:21:17	Improve readability of the first line in error messages.	  ![image](https://user-images.githubusercontent.com/73968480/184028664-c2e4d9a4-8a43-4ab0-8a34-3d95fb3a62c7.png)  ![image](https://user-images.githubusercontent.com/73968480/184028983-073ff757-7811-4ea7-9ebc-e2a0e307c212.png)      Fixes #1145     Signed-off-by: Jessica He  jhe@redhat.com>
https://github.com/eclipse/eclipse-collections/pull/1135	1	readability	2021-09-07 02:55:24	Refactor Collectors2Test to extract actual and expected variables	Signed-off-by: Sirisha Pratha  sirisha.pratha@bnymellon.com>    Improving code readability - Extracting actual and expected variables, so the types are visible in the tests. 
https://github.com/eclipse/jkube/pull/1046	1	readability	2021-10-25 12:37:12	Changed the sort method interface for easy readability	Made the required changes. Changed Collections.sort(profiles, Collections. Profile>reverseOrder()); in https://github.com/eclipse/jkube/blob/ee2390178dcad8a9cc3a9cb6d5e8c5d70a162a04/jkube-kit/profile/src/main/java/org/eclipse/jkube/kit/profile/ProfileUtil.java to    profiles.sort(Collections.reverseOrder()); for easy understanding.
https://github.com/eclipse/xtext-xtend/pull/836	1	readability	2019-06-10 08:54:15	Refactoring the XtendFoldingRegionProviderTest class.	- Eliminate duplicated code to improve the readability of the test  cases.    Signed-off-by: Tamas Miklossy  miklossy@itemis.de>
https://github.com/elastic/elasticsearch/pull/28737	1	readability	2018-02-20 13:03:24	Replace CAS loop by updateAndGet to improve readability	Replace a CAS tight-loop by `AtomicLong#updateAndGet` to improve readability.
https://github.com/elastic/elasticsearch/pull/33015	1	readability	2018-08-28 07:06:43	Watcher: Simplify finding next date in cron schedule	The code introduced in 3fa36807f87ad90af593e86f9ed843ced3260973 to fix  an issue with crons always returning -1 was not very readable. This  implementation uses streams to improve readability.    
https://github.com/elastic/elasticsearch/pull/36217	1	readability	2018-12-10 06:23:03	Improve logged exec output readability	- Split error and out streams and log them separately  - Log everything in a single call to prevent interference from    other log messages    This should help triage rest test failures.    
https://github.com/elastic/elasticsearch/pull/36819	17	readability	2018-12-19 12:15:05	Replace 0L with an UNASSIGNED_PRIMARY_TERM constant	0 is an illegal value for a primary term that is often used to indicate  the primary term isn't assigned or is irrelevant. This PR replaces the  usage of 0 with a constant, to improve readability and so it can be  tracked and if needed, replaced.  
https://github.com/elastic/elasticsearch/pull/42500	1	readability	2019-05-24 13:27:11	Small internal AnalysisRegistry changes	Some internal refactorings to the AnalysisRegistry, spin-off from #40782.  Mostly readability changes and reduction of some method sizes.
https://github.com/elastic/elasticsearch/pull/45936	3	readability	2019-08-28 21:14:38	Switch to ByteBuffer for vector encoding.	This commit updates the vector encoding and decoding logic to use `java.nio.ByteBuffer`. Using `ByteBuffer` shows an improvement in [microbenchmarks](https://github.com/jtibshirani/elasticsearch/pull/3) and I think it helps code readability. The performance gain might be due to the fact `ByteBuffer` uses hotspot intrinsic candidates like `Unsafe#getIntUnaligned` under the hood.    In benchmarks for vector search, it gives a small improvement. Results on the `random-s-100-euclidean` dataset:    ```  Algorithm                            Recall      QPS  EsBruteforce()                       1.000       39.535  EsBruteforce(byteBuffer=True)        1.000       41.694  ```
https://github.com/elastic/elasticsearch/pull/50310	13	readability	2019-12-20 13:00:22	Fix accuracy metric	This PR fixes per-class accuracy calculation by taking into account per-class true negatives.    Additionally:  - renames `actual_classes` to `classes` in `accuracy` metric for consistency with `precision` and `recall` metrics  - makes `Accuracy` implemented using 'MulticlassConfusionMatrix`  - makes use of `SetOnce >` wrapper in classification metrics classes in order to increase code readability    Relates #48759
https://github.com/elastic/elasticsearch/pull/51825	2	readability	2020-02-03 21:58:58	Fix ForceMergeAction toSteps construction	There was a duplicate force merge step and the test continued to fail. This commit clarifies the  `toStep` method and changes the `assertBestCompression` method for better readability.    Resolves #51822  
https://github.com/elastic/elasticsearch/pull/54308	3	readability	2020-03-27 15:04:39	Improve checkstyle performance and readability	This is a follow up to #53925. In this PR we take the new checkstyle check implementation and embed it in `buildSrc` rather than creating a new top-level project in the build.
https://github.com/elastic/elasticsearch/pull/55915	1	readability	2020-04-29 14:23:43	Remove unnecessary instance variable in QueryStringQueryParser	Currently `currentFieldType` is an instance variable that is first set and then  used by all methods referring to it. We can make it local to each method  instead, avoiding possible state problems and improve readability of the code  instead.
https://github.com/elastic/elasticsearch/pull/65360	1	readability	2020-11-23 13:37:45	[ML] Refactor process starting into its own method in AutodetectProce 	 ssManager    A method extraction that improves readability of AutodetectProcessManager.openJob  ever so slightly.  
https://github.com/elastic/elasticsearch/pull/67175	53	readability	2021-01-07 19:34:51	QL: Move Node transform type argument to the front	Improve readability of Node transform/forEach typed methods by moving  the "type token" to the front of the method, before the lambda  declaration.    Fix #67174
https://github.com/elastic/elasticsearch/pull/71620	4	readability	2021-04-13 13:07:20	Cleanup SnapshotsInProgress for Readability	* Formatting `SnapshotsInProgress` in a more reasonable way instead of mixing nested class, fields and methods.  * Removing pointless constants for the x-content serialization.  * Cleaning up double wrapping in `unmodifiableList`.  * Removing unused and incorrectly documented constructor from `SnapshotDeletionsInProgress`    no functional changes otherwise.  
https://github.com/elastic/elasticsearch/pull/71876	1	readability	2021-04-20 11:50:19	Refactor Shard-Level Snapshot State Machine for Better Readability	Refactoring this incredibly complicated loop into an object that holds  all state required for looping through existing snapshots and updates.  This hopefully makes it clearer what the different paths are across the  various combinations of snapshots and clones.   The hope here is that by drying up across both where possible and splitting the logic to different   methods for both otherwise, the corner become easier to understand.    This sets up a relatively straight forward enhancement solution for #61870    
https://github.com/elastic/elasticsearch/pull/74386	5	readability	2021-06-22 10:56:10	Rename a few variables for readability	The SecurityIndexManager uses the name indexState for both the inner  class State and IndexMetdata.State. The later is in fact a field of the  former. This led to confusion when reading through the code. In  addition, the names used for the inner class are inconsistent, there are  places they are just called state. This PR changes to always use the  name "state" for the inner class and "indexState" for  IndexMetadata.State.  
https://github.com/elastic/elasticsearch/pull/78433	31	readability	2021-10-28 20:03:02	Make some ILM Actions Singletons	Make a few things that can be singletons into singletons for easier readability mostly.  This is slightly helpful for performance in some spots too, though ease of understanding which actions are constants and which aren't is the main motivation here.
https://github.com/elastic/elasticsearch/pull/81635	45	readability	2021-12-13 18:56:07	QL: Make use of Java 17 instanceof pattern matching	Replace instanceof / cast with Java 17 instanceof pattern matching.  This small syntactic sugar improves readability and reduces the chance  for errors (by avoid to cast a different variable then the one checked).    Fix #80884
https://github.com/elastic/elasticsearch/pull/81743	26	readability	2021-12-15 13:34:27	[ML] use pattern matching for instanceof where applicable	now that we require java17 on 8+, time to take advantage of some syntactic sugar and drops our LOC and improves readability a ton (IMO).
https://github.com/elastic/elasticsearch/pull/105680	1	readability	2024-02-21 10:36:26	Slight readability improvement in EsAbortPolicy	Reviewing #105666 I was tripped up by how the check for force execution  is split into two nested `if` statements, the first of which now has  another condition. By grouping the conditions like this it makes it look  like `AbstractRunnable` is somehow not special on a shut-down executor.  It is still special, but that specialness is implemented elsewhere in  `EsThreadPoolExecutor#execute`.    This commit regroups the conditions and extracts a method to limit the  scope of the `AbstractRunnable`.
https://github.com/elastic/elasticsearch/pull/124322	4	readability	2025-03-08 14:04:01	IngestDocument readability improvements	I've been in this code a lot recently. The String constructions really don't indent very well and it finally hurt my soul enough to do something about it. There's a small handful of additional trivial improvements that I made while I was there, but nothing that should have any effect on the behavior or performance of the system.    There are further commits beyond this on my machine that will very much have an effect on the behavior and performance of the system, but **this** PR is really just refactoring.
https://github.com/elimu-ai/ml-authentication/pull/229	3	readability	2016-12-06 13:01:46	Improve logging (info instead of debug level) and readability (fileHe 	 lper instead of fh)
https://github.com/Esri/arcgis-maps-sdk-java-samples/pull/503	2	readability	2020-05-18 08:37:28	Export (Vector) Tiles - UI and readability improvements	With these two samples, at the moment you can start an export simultaneously as many times as you want since the button doesn't disable. What this PR does is disable the button so that only one job can run at the same time.  I've also added some whitespace and extra comments to make the code a bit more readable.
https://github.com/EternalCodeTeam/DiscordOfficer/pull/106	25	readability	2023-08-21 22:40:17	GH-106 Custom exceptions, SonarLint fixes, and code readability enhancement.	Refactor code to implement custom exceptions, resolve SonarLint-reported issues, and improve code readability.          
https://github.com/EvenMoreFish/EvenMoreFish/pull/181	1	readability	2023-01-27 07:26:11	Improved readability of placeholder class + added 1 more placeholder	Improved the readability of the placeholder class.  Added `%emf_competition_type%` - Returns the type of the active competition.
https://github.com/EvenMoreFish/EvenMoreFish/pull/559	1	readability	2025-02-13 13:50:27	Code readability improvements & optimizations.	## Description  Code readability improvements & optimizations.  Also added more descriptive debug messages.    ---    ### What has changed?  Code readability improvements & optimizations    ---    ### Related Issues    ---    ### Checklist    - [x] I have added tests that prove my fix is effective or that my feature works.  - [x] I have updated the documentation as needed.  - [x] I have added any labels that fit this PR.
https://github.com/eXist-db/exist/pull/5256	1	readability	2024-03-21 20:02:34	[refactor] RangeIndexConfigAttributeCondition for readability	- less indentation  - use final variables where possible  - return early  - remove this. where possible  - switch negated conditions where it made sense    Followup PR to #5246 
https://github.com/eXist-db/exist/pull/5668	91	readability	2025-03-16 20:47:23	[refactor] use isEmpty() where possible - readability	[refactor] use isEmpty() where possible - readability
https://github.com/fabric8io/kubernetes-client/pull/3409	1	readability	2021-08-31 05:56:30	replace lambda with a method reference for better readability	## Description  Fix #3401      Thank a lot for taking time to contribute to Fabric8  3!    Please provide a description of what your PR does providing a link (if applicable) to the issue it fixes. It is  really helpful for people who would review your code.     I have updated the lambda function in AbstractCustomResourceHandler for better readability.  ## Type of change    -  What types of changes does your code introduce? Put an `x` in all the boxes that apply      - [ ] Bug fix (non-breaking change which fixes an issue)   - [ ] Feature (non-breaking change which adds functionality)   - [ ] Breaking change (fix or feature that would cause existing functionality to change   - [x] Chore (non-breaking change which doesn't affect codebase;     test, version modification, documentation, etc.)    ## Checklist   - [ ] Code contributed by me aligns with current project license: [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)   - [ ] I Added [CHANGELOG](../CHANGELOG.md) entry regarding this change   - [ ] I have implemented unit tests to cover my changes   - [ ] I have added/updated the [javadocs](https://www.javadoc.io/doc/io.fabric8/kubernetes-client/latest/index.html) and other [documentation](https://github.com/fabric8io/kubernetes-client/blob/master/doc/CHEATSHEET.md) accordingly   - [ ] No new bugs, code smells, etc. in [SonarCloud](https://sonarcloud.io/dashboard?id=fabric8io_kubernetes-client) report   - [ ] I tested my code in Kubernetes   - [ ] I tested my code in OpenShift        Integration tests (https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-itests)  Please check integration tests and provide/improve tests if applicable.    Open your PR in Draft mode and verify all of the applicable Checklist items before marking your pull request as ready for review       #3401 
https://github.com/fabric8io/kubernetes-client/pull/4402	3	readability	2022-09-26 11:06:57	refactor: refactoring `TokenRefreshInterceptor` for code readability (#4401)	## Description      Thank a lot for taking time to contribute to Fabric8  3!    Please provide a description of what your PR does providing a link (if applicable) to the issue it fixes. It is  really helpful for people who would review your code.     Fix #4401     This pull-request is related to refactoring to 'TokenRefreshInterceptor'. :)     * Code improvements points    * [x] should remove setLastRefresh method for testing only    * [x] should improve code readability    ## Type of change    -  What types of changes does your code introduce? Put an `x` in all the boxes that apply      - [ ] Bug fix (non-breaking change which fixes an issue)   - [x] Feature (non-breaking change which adds functionality)   - [ ] Breaking change (fix or feature that would cause existing functionality to change   - [ ] Chore (non-breaking change which doesn't affect codebase;     test, version modification, documentation, etc.)    ## Checklist   - [x] Code contributed by me aligns with current project license: [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0)   - [x] I Added [CHANGELOG](https://github.com/fabric8io/kubernetes-client/blob/master/CHANGELOG.md) entry regarding this change   - [x] I have implemented unit tests to cover my changes   - [ ] I have added/updated the [javadocs](https://www.javadoc.io/doc/io.fabric8/kubernetes-client/latest/index.html) and other [documentation](https://github.com/fabric8io/kubernetes-client/blob/master/doc/CHEATSHEET.md) accordingly   - [x] No new bugs, code smells, etc. in [SonarCloud](https://sonarcloud.io/dashboard?id=fabric8io_kubernetes-client) report   - [x] I tested my code in Kubernetes   - [ ] I tested my code in OpenShift        Integration tests (https://github.com/fabric8io/kubernetes-client/tree/master/kubernetes-itests)  Please check integration tests and provide/improve tests if applicable.    Open your PR in Draft mode and verify all of the applicable Checklist items before marking your pull request as ready for review     
https://github.com/FabricMC/fabric-loader/pull/831	1	readability	2023-10-03 09:47:09	Minor language changes for user readability	
https://github.com/factcast/factcast/pull/1272	1	readability	2021-04-14 20:31:48	#1233: improved logging and readability (hopefully)	closes #1233 
https://github.com/farin/JCloisterZone/pull/240	26	readability	2017-08-29 07:56:10	Add documentation	Hi, I documented some of the classes in package board and done some minor changes for code readability. Hope they look good!
https://github.com/finos/spring-bot/pull/343	42	readability	2022-06-22 10:07:28	Spring bot develop - Improved Demo Readme, readability	
https://github.com/firebase/firebase-android-sdk/pull/4518	3	readability	2023-01-04 19:39:58	Improve readability of a test in ApkUpdaterTest	- The latch's name made it seem like it was a mock  - Inlining more of the setup makes it more readable
https://github.com/firebase/firebase-android-sdk/pull/5032	1	readability	2023-05-31 14:24:51	Improve readability for encoding sum/avg proto	
https://github.com/firebase/firebase-android-sdk/pull/5298	2	readability	2023-09-05 17:29:00	Improve auto cache index creation documentation readability	
https://github.com/firebase/firebase-android-sdk/pull/5761	9	readability	2024-03-06 16:24:23	Rename field for better readability	
https://github.com/forcedotcom/SalesforceMobileSDK-Android/pull/1699	1	readability	2018-05-21 23:48:31	Improving readability of query	
https://github.com/ForestryMC/Binnie/pull/39	223	readability	2017-05-03 21:10:03	Improve code readability in binnie.extratrees package	Improve code readability in binnie.extratrees package        archivesBaseName param in gradle.build
https://github.com/FormidableLabs/react-native-app-auth/pull/899	1	readability	2023-09-06 14:58:27	chore: Improve readability of method arguments be renaming `headers` argument to `customHeaders` 	## Description    #734 highlighted that the config key in JS does not match the argument name used in the native Android methods.  This PR just renames the argument internally for improved readability.    ## Steps to verify    There are no functional changes in this PR.  
https://github.com/frankframework/frankframework/pull/7126	2	readability	2024-07-10 08:50:25	Improve readability of XmlIf	
https://github.com/gchq/Gaffer/pull/3014	9	readability	2023-11-13 17:33:49	gh-2625: Improve assertions readability with assertJ	
https://github.com/gdg-x/frisbee/pull/681	1	readability	2016-10-05 20:49:26	refactor:  cleanup ParseDeepLinkActivity	Improve readability of ParseDeepLinkActivity. Remove redundant null checks. Use support annotations to avoid NullPointerException. Resolve Activity before firing implicit intent. 
https://github.com/geoserver/geoserver/pull/3860	5	readability	2019-11-13 15:51:21	[GEOS-9191] FileSystemWatcher: 100% CPU usage while idle running on a large data directory	Running against a rather large data directory leads `FileSystemWatcher`'s polling thread to be fixed at  100% usage on one CPU core (which one varies every a handful of seconds).    The bellow [data_dir_100k.tgz](https://drive.google.com/open?id=13nhQz_0QGm459muwQ2Qgcre_5HaXvshM) archive contains a data directory with +86K layers and has been used to conduct the testing for this patch.    This performance issue with `FileSystemWatcher` reveals itself since `DefaultTileLayerCatalog` started listening to changes to the ` data_dir>/gwc-layers` directory (which contains tile layer config files, not tile images) in order to update tile layer configs when they're updated externally on a cluster deployment (added at   https://github.com/geoserver/geoserver/commit/966a8af90fc6b68725a78b09829c3cbc7360242e#diff-54440e68426497a15eea28040661977aR93.    Profiling and the CPU bound nature of the issue showed the culprit has nothing to do with listing the directory contents, which takes just some milliseconds, but in the way `FileSystemWatcher` computed the changed, created, and removed files inside it, by calling `List.removeAll(Collection)` several times on lists of `java.io.File` objects.    This patch uses `java.util.Set` semantics instead and improves the logic to not make copies of collections, with the following results:    Baseline: [master@e23559d4](e23559d4a366e45a0bcf44811393cc718b13ef1f)  OS: GNU/Linux Ubuntu 19.04 (kernel 5.0.0-29-generic)  JVM: OpenJDK 64-Bit Server VM (Zulu 8.40.0.25-CA-linux64) (build 25.222-b10, mixed mode)  Processor: AMD Threadripper 1950X (16 cores, 32 threads)  Datadir filesystem:   JVM args: -Xms4G -Xmx4G  ```                    Baseline       This PR  Poll runtime    ~7.5-8.5 mins    ~200ms  %CPU             100%             ~20-25%  Heap old gen     ~0               ~0  Heap eden space ~50MB        ~50MB  ```  JVM args: -Xms1G -Xmx1G  ```text                    Baseline       This PR  Poll runtime     ~8-10 mins       ~200ms  %CPU             100%             ~20-25%  Heap old gen     ~0               ~0  Heap eden space ~50MB        ~50MB  ```  Note on Eden space utilization:   Each poll run consistently increases the amount of Eden space usage by about 50MB. That means that, with 4G max heap size, it takes about 20-22 runs to reach the point where the GC will free that space (at around 1.1GB).  There's nothing we can do to reduce the amount of eden space heap usage, since almost 100% of it happens at `File.listFiles()` inside the native call to `java.io.Filesystem.list():String[]` call. Using NIO's `DirectoryStream` from `Files#newDirectoryStream(Path)` instead of `File.listFiles()` results in no runtime improvement, and increases the temporary memory peak considerably, although there might be an inflexion point where it's more beneficial than loading the whole list of `File` objects, haven't reached it. Also, `File.listFiles()` is lighter weight than `File.list():String[]` due to some internal implementation details.    ---    Additionally, `FileSystemWatcher` related code's readability has been improved by removing lots of unnecessary null checks on objects that can't be null and splitting logic into smaller units.  `FileSystemResourceTheoryTest` test suite got  some improvements, and dcd53c3b713971004ca4c9c772d01592b66bcd31 fixes a potential issue with `FileSystemResourceStore.fileSystemWatcher`'s lazy initialization.    ---    ## Checklist    > Reviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.    For all pull requests:    - [x] Confirm you have read the [contribution guidelines](https://github.com/geoserver/geoserver/blob/master/CONTRIBUTING.md)   - [x] You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)  - [x] Make sure the first PR targets the master branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.    The following are required only for core and extension modules (they are welcomed, but not required, for community modules):  - [x] There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)  - [x] PR for bug fixes and small new features are presented as a single commit  - [x] Commit message must be in the form "[GEOS-XYZW] Title of the Jira ticket" (export to XML in Jira generates the message in this exact form)  - [ ] New unit tests have been added covering the changes  - [x] This PR passes all existing unit tests (test results will be reported by travis-ci after opening this PR)  - [ ] This PR passes the [QA checks](https://docs.geoserver.org/latest/en/developer/qa-guide/index.html) (QA checks results will be reported by travis-ci after opening this PR)  - [N/A] Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates    Submitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or inapplicable.  
https://github.com/geoserver/geoserver/pull/4893	2	readability	2021-03-29 10:06:29	backup-restore/CatalogItemProcessor: Improve code readability	Break up the 272 lines long CatalogItemProcessor.process() method into  smaller chunks for each CatalogInfo type needing specialized processing.        Fix a bug in processing ResourceInfo, where a ResourceInfo class was  used as argument to get a StoreInfo from the Catalog.    ---     ## Checklist    > Reviewing is a process done by project maintainers, mostly on a volunteer basis. We try to keep the overhead as small as possible and appreciate if you help us to do so by completing the following items. Feel free to ask in a comment if you have troubles with any of them.    **Submitting the PR does not require you to check all items, but by the time it gets merged, they should be either satisfied or not applicable.**      For all pull requests:    - [ ] Confirm you have read the [contribution guidelines](https://github.com/geoserver/geoserver/blob/main/CONTRIBUTING.md)   - [ ] You have sent a Contribution Licence Agreement (CLA) as necessary (not required for small changes, e.g., fixing typos in documentation)  - [ ] Make sure the first PR targets the `main` branch, eventual backports will be managed later. This can be ignored if the PR is fixing an issue that only happens in a specific branch, but not in newer ones.    The following are required only for core and extension modules (they are welcomed, but not required, for community modules):  - [ ] There is a ticket in Jira describing the issue/improvement/feature (a notable exemptions is, changes not visible to end users)  - [ ] PR for bug fixes and small new features are presented as a single commit  - [ ] Commit message must be in the form "[GEOS-XYZW] Title of the Jira ticket" (export to XML in Jira generates the message in this exact form)  - [ ] The pull request contains changes related to a single objective. If multiple focuses cannot be avoided, each one is in its own commit and has a separate ticket describing it.  - [ ] New unit tests have been added covering the changes  - [ ] This PR passes all existing unit tests (test results will be reported by Continuous Integration after opening this PR)  - [ ] This PR passes the [QA checks](https://docs.geoserver.org/latest/en/developer/qa-guide/index.html) (QA checks results will be reported by Continuous Integration after opening this PR)  - [ ] Commits changing the UI, existing user workflows, or adding new functionality, need to include documentation updates (screenshots, text)  - [ ] Commits changing the REST API, or any configuration object, should check if the REST API docs (Swagger YAML files and classic documentation) need to be updated.
https://github.com/getodk/javarosa/pull/347	2	readability	2018-07-25 21:33:00	Improve readability and remove duplication in ItemsetBinding.initReferences; fix @link s	Stepping through the code in the debugger, I needed to clean up ItemsetBinding.initReferences in order to understand it. If the improvement is useful, let s merge it.    I also found some doc comment `link`s missing the `@`.    #### What has been done to verify that this works as intended?  Changes are made with safe IDEA tools like extract variable and method.  
https://github.com/GoogleCloudPlatform/bank-of-anthos/pull/4	4	readability	2020-02-01 00:34:41	Slight Java readability & style improvements	We were working on the checkstyle issues in parallel.  You beat me to the commit by a few minutes =P
https://github.com/GoogleCloudPlatform/opentelemetry-operations-java/pull/233	2	readability	2023-04-18 17:53:41	Refactor: Rename method & variables for better readability	
https://github.com/gradle/gradle/pull/7856	1	readability	2018-12-01 06:58:02	Fix GradleVersion comparison and refactor GradleVersion	### Context    This fixes https://github.com/gradle/gradle-private/issues/1682    Previously, there's an issue in `GradleVersion` comparison: `5.0-commit-1a2b3c` would be regarded as equal to `5.0-commit-2b3c4d`. This is because in `compareTo` method,    ```          if (snapshot != null && gradleVersion.snapshot != null) {              return snapshot.compareTo(gradleVersion.snapshot);          }          if (snapshot == null && gradleVersion.snapshot != null) {              return 1;          }          if (snapshot != null && gradleVersion.snapshot == null) {              return -1;          }            return 0;  // Even when the two version string are different  ```    This PR fixes this issue by comparing `GradleVersion.version` when everything else are equal.    Also, this PR does a lot of refactoring work:    - Extract magic stage number to constants `STAGE_PREVIEW`/`STAGE_RC `.  - Extract methods to improve readability.
https://github.com/gradle/gradle/pull/20031	1	readability	2022-02-24 22:19:24	Make the symmetric nullable check clearer	This check was extremely opaque, relying on the implicit unique nature of collecting to a set to determine if something was both null and non-null. @big-guy and I had trouble decoding it while debugging another PR. This should be a marked readability improvement, as well as a little bit faster since there's no boxing or set creation.
https://github.com/gradle/gradle/pull/20353	1	readability	2022-04-06 15:05:21	Rewrites comment to correct typo: word "loose"	Rewrites comment to read better  Rewrites comment to correct typo: word "loose"    Signed-off-by: T-A-B  78736596+T-A-B@users.noreply.github.com>      - The issue this PR addresses    Fixes #?  Comment language is ineffective.    ### Context    - Why do you believe many users will benefit from this change?    Readability is increased which will allow for faster comprehension of the edited file.      - Link to relevant issues or forum discussions here    N/A    ### Contributor Checklist  - [ x] [Review Contribution Guidelines](https://github.com/gradle/gradle/blob/master/CONTRIBUTING.md)  - [ x] Make sure that all commits are [signed off](https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---signoff) to indicate that you agree to the terms of [Developer Certificate of Origin](https://developercertificate.org/).  - [ x] Make sure all contributed code can be distributed under the terms of the [Apache License 2.0](https://github.com/gradle/gradle/blob/master/LICENSE), e.g. the code was written by yourself or the original code is licensed under [a license compatible to Apache License 2.0](https://apache.org/legal/resolved.html).  - [ x] Check ["Allow edit from maintainers" option](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) in pull request so that additional changes can be pushed by Gradle team  - [ x] Provide integration tests (under ` subproject>/src/integTest`) to verify changes from a user perspective  - [x ] Provide unit tests (under ` subproject>/src/test`) to verify logic  - [x ] Update User Guide, DSL Reference, and Javadoc for public-facing changes  - [ x] Ensure that tests pass sanity check: `./gradlew sanityCheck`  - [x ] Ensure that tests pass locally: `./gradlew  changed-subproject>:quickTest`    ### Gradle Core Team Checklist  - [ ] Verify design and implementation   - [ ] Verify test coverage and CI build status  - [ ] Verify documentation  - [ ] Recognize contributor in release notes  
https://github.com/graphhopper/graphhopper/pull/1225	5	readability	2017-12-18 16:47:38	Extracts new class NodeContractor from PrepareContractionHierarchies.	This PR extracts a new class `NodeContractor` from `PrepareContractionHierarchies`.  The idea is this:    * `NodeContractor` is responsible for searching for witness paths and adding required  shortcut edges for a single given node that shall be contracted    * `PrepareContractionHierarchies` is responsible for determining the order  in which nodes are contracted and provides the interface to start the  contraction of a graph    This separation of concerns should make it easier to extend contraction hierarchies for  new features and applications (like turncosts, dynamic ch or transit node routing).   It also makes it easier to test the contraction of a single node and hopefully increases  readability.    I tried to make the code changes easy to follow in the single commits. In the first commits  basically no real code changes are made except some reordering, renaming and delegation. I also   stumbled over a few minor issues in the existing `PrepareContractionHierarchies` which should now  be fixed:    1) In `setOrigEdgeCount()` an `IllegalStateException` was thrown that gives information about 'graph.max'  I think this was supposed to return the number of all edges in the graph (original + shortcuts),  but `ghStorage.getAllEdges().getMaxId()` returns only the number of original edges, which is redundant  to 'max' in the message.     2) The `tmpDegreeCounter` variable in `contractNodes` does not really count the degree of the node,  because it is only increased for each incoming (but not outgoing) edge. This is a bit confusing  when reading the code, but otherwise is not very crucial, because the degree calculation is   only used to estimate the `meanDegree` of the graph, which in turn is used to estimate a good upper  bound of the `maxVisitedNodes` for the local witness path searches. I tried to document this a bit,  but maybe there is a better name than 'degree' ?    3) When calling `doWork() `in `PrepareContractionHierarchies` the priority for all nodes is calculated  in `prepareNodes()`. However, at this point `meanDegree` is zero, and so in `findShortcuts`  a `maxVisitedNodes` of 0 is set on `prepareAlgo`. This means that no witness paths can be found  and all shortcuts are counted (but not added).  For example this can be seen in `PrepareContractionHierarchiesTest#testAddShortcuts`.  When `contractNodes()` is called `meanDegree` is finally set to a non-zero value and when actually  inserting the shortcuts the witness path searches work as expected.  This was an easy fix, but required adjusting a few tests, because `PrepareContractionHierarchies`  now finds a different (potentially better) node ordering.    4) when calculating `maxVisitedNodes` from `meanDegree` it was cast like this:  `(int) meanDegree * 100`, so `maxVisitedNodes` was 0 if `meanDegree`   1  I changed this to `(int) (meanDegree * 100)`, which yields a different (probably better) node  contraction order.    The last two fixes affect the node ordering when contracting the graph.  I ran the measurement class on the latest OSM data for Hessen and the performance  seems to be similar before and after the refactoring. This version introduces a few (~1-2%) less shortcuts, takes longer to prepare the graph (~10%) and leads to faster queries (for example routingCH.sum was reduced by 5%). All this seems plausible given that in the prior version `maxVisitedNodes` was sometimes zero, i.e. the witness path searches were cancelled quickly and therefore more shortcuts were introduced. I did not make exhaustive measurements (different maps, multiple runs etc.) though.   In the new version the node ordering should be closer to what was intended, but maybe the parameter  tuning in `PrepareContractionHierarchies` needs to be adjusted.     One thing I am not sure of is if we need `NodeContractor#initFromGraph`, because so far it is always  called directly after the constructor. However, if we call the constructor and change the graph  afterwards we need to call `initFromGraph()` to make `NodeContractor` aware of the changes. Alternatively,  we could call `initFromGraph()` inside `NodeContractor` as needed (for example in `contractNode()` etc.).    Finally, I stumbled over a weird behavior of `AllCHEdgesIterator` where the skippedEdge values are equal  although they should be different, see `NodeContractorTest#testContractNode_directed_shortcutRequired`.  I have not looked into this, any idea what the reason for this could be ?        
https://github.com/graphql-java/graphql-java/pull/1094	13	readability	2018-06-24 21:42:47	Readability and consistency in wrapper types	This moves all the wrapper type construction in the code and tests to use the static constructor.  Its more consistent and more readable
https://github.com/Graylog2/graylog2-server/pull/6651	18	readability	2019-10-24 13:21:31	Checking streams permissions for synchronous searches (3.1). (#6573)	backport of #6573    (cherry picked from commit fcadbc8d9d6b2cc319eb4b20e703d15d1f8142ef)    Checking streams permissions for synchronous searches.    Before this change, performing a synchronous search did not check the  required streams permissions of the executing user, allowing a user to  search in streams without having the required permissions. The frontend  uses a different API endpoint, so it was not affected.    This change adds the required checks for synchronous searches.    * Mocking `queries` as it is now checked for stream references.    * Extract Authorization from SearchResource    * created new SearchAuthorizer class and moved authorization code    from SearchResource there  * created dedicated exception and response mapper, because the    authorizer shouldn't have to worry about http responses  * cleaned up a few intellij warnings    * Add Authorization Unit Tests for SearchResource    * added two new unit tests making sure that SearchResource calls the new    authorizer  * removed some duplicate code to improve readability and maintainabilty    of tests    * Refactor Adding All Allowed Streams for User to Queries without Streams    * made this part of the logic easier to comprehend by rearranging the    code in SearchResource  * only reason for not extracting this into a new class yet is keeping    the focus of the current pr on authorization    * Add Unit Tests for SearchAuthorizer    * moved tests from SearchResourceStreamPermissionsTest to    SearchAuthorizerTest  * added a test for MissingCapabilitiesExceptionMapper    * Move Adding of Streams to Streamless Searches into Search class    * moved code out of SearchResource and into Search and Query  * adapted SearchResourceTest    * Create Unit Tests for Adding Default Streams to Search    * Extract Loading all Permitted Streams to Dedicated Class    - move functionality from SearchResource to PermittedStreamsLoader class    => becomes much easier to test    => one less responsibility for SearchResource  - removed SearchResourceStreamPermissionsTest as the last two tests in    there have been replaced by simpler unit tests elsewhere    * Fixed Copyright headers    * Rename PermittedStreamsLoader to PermittedStreams    * Clarify That SearchAuthorizer Actually Does More Than Authorization    * renamed SearchAuthorizer to SearchExecutionGuard  * moved it to search package and removed authorization package  * moved MissingCapabilitiesException to errors package    * Fix License Headers    * Register new ExceptionMapper Explicitly, Like the Others    * Move ExceptionMapper Registration into ViewsBindings    also created a new utility method in PluginModule for registering  exception mappers. created it there, because that's where similar  methods like addRestResource live.
https://github.com/Graylog2/graylog2-server/pull/12539	22	readability	2022-04-28 07:16:17	Code cleanup of search rest resources test	This PR refactors some of our search rest resources tests, tries to minimize mock usage and increase readability.    ## Motivation and Context  Tests with many mocks and when/thenReturn are hard to read, understand and maintain.       ## Types of changes    - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [ ] Bug fix (non-breaking change which fixes an issue)  - [ ] New feature (non-breaking change which adds functionality)  - [x] Refactoring (non-breaking change)  - [ ] Breaking change (fix or feature that would cause existing functionality to change)    ## Checklist:    - Go over all the following points, and put an `x` in all the boxes that apply.      - If you're unsure about any of these, don't hesitate to ask. We're here to help!    - [x] My code follows the code style of this project.  - [ ] My change requires a change to the documentation.  - [ ] I have updated the documentation accordingly.  - [x] I have read the **CONTRIBUTING** document.  - [ ] I have added tests to cover my changes.    
https://github.com/Graylog2/graylog2-server/pull/12995	15	readability	2022-07-07 13:21:14	Unused parameter removed from the complex list of method params.	  - Provide a general summary of your changes in the Title above      ## Description  Unused parameter removed from the complex list of method params.    ## Motivation and Context  There was an unused parameter passed across different handlers in pivot-related classes, which can be safely removed, increasing readability of the code.    ## Types of changes    - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [ ] Bug fix (non-breaking change which fixes an issue)  - [ ] New feature (non-breaking change which adds functionality)  - [x] Refactoring (non-breaking change)  - [ ] Breaking change (fix or feature that would cause existing functionality to change)    ## Checklist:    - Go over all the following points, and put an `x` in all the boxes that apply.      - If you're unsure about any of these, don't hesitate to ask. We're here to help!    - [x] My code follows the code style of this project.  - [ ] My change requires a change to the documentation.  - [ ] I have updated the documentation accordingly.  - [x] I have read the **CONTRIBUTING** document.  - [x] I have added tests to cover my changes.    
https://github.com/grpc/grpc-java/pull/6128	1	readability	2019-09-06 21:41:11	xds: clean up some ImmutableMaps	Change  ```java            ImmutableMap.Builder XdsLocality, LocalityLbInfo> builder = ImmutableMap.builder();            for (Map.Entry XdsLocality, LocalityLbInfo> entry : localityMap.entrySet()) {              if (!entry.getKey().equals(locality)) {                builder.put(entry);              }            }            localityMap = builder.build();  ```    into  ```java            Map XdsLocality, LocalityLbInfo> copy = new LinkedHashMap >(localityMap);            copy.remove(locality);            localityMap = ImmutableMap.copyOf(copy);  ```    The performance is almost the same, unless we use the beta API `ImmutableMap.builderWithExpectedSize()`. But the latter has much better readability.
https://github.com/grpc/grpc-java/pull/6375	4	readability	2019-11-12 16:48:58	netty: improve readability	Modifying some definitions improves readability
https://github.com/grpc/grpc-java/pull/7810	6	readability	2021-01-20 03:00:16	xds: refactor Bootstrapper	Split Bootstrapper into Bootstrapper interface and BootstrapperImpl. Bootstrapper's implementation is getting complicated, the way how its code is organized gets bad for readability and testing. Also, having the singleton instance on Bootstrapper itself does not provide any benefit. The singleton `SharedXdsClientProvider` is already making use of a single Bootstrapper instance. We would still want Bootstrapper mockable as using a real instance in its consumer's tests is cumbersome. So we make Bootstrapper as an interface and implement a separate concrete implementation BootstrapperImpl. This is quite similar to NameResolver and DnsNameResolver.
https://github.com/grpc/grpc-java/pull/7944	3	readability	2021-03-08 17:14:22	xds: Simplify ClientXdsClientTestBase by reusing test resources	In preparation for ADS parsing changes, I was reading through ClientXdsClientTestBase and ended up refactoring some pieces to make it easier to add [upcoming resource metadata capture](https://github.com/sergiitk/grpc-java/pull/12/commits/9cf1b78b173043aad865290f577042d76146d2b7).    - The same `Any` resources used in different places moved to private fields to make it easier to know when a different resource is used in tests on purpose  - Added some constants to make assertions for the same values easier to read/conceptualize  - Added helpers for single-resource `sendResponse()`, `verifyRequest()`, etc, to skip single-element collection so it's a bit easier to read  - Re-ordered arguments of  `sendResponse()`, `verifyRequest()` to make them consistent between each other, and upcoming similar verifyMetadata helpers    ```java  protected abstract void verifyRequest(ResourceType type, List String> resources, String versionInfo, String nonce, Node node);  protected abstract void sendResponse(ResourceType type, List Any> resources, String versionInfo, String nonce);  ```    I believe this should improve test readability.    Before:  ```java  call.sendResponse("0", listeners, ResourceType.LDS, "0000");  call.verifyRequest(NODE, "0", Collections.singletonList(LDS_RESOURCE), ResourceType.LDS, "0000");  ```    After:  ```java  call.sendResponse(LDS, listenerRds, VERSION_1, "0000");  call.verifyRequest(LDS, LDS_RESOURCE, VERSION_1, "0000", NODE);  ```    
https://github.com/grpc/grpc-java/pull/10641	1	readability	2023-11-02 17:06:40	interop-testing: Improve ChannelAndServerBuilderTest readability	Add javadoc and code readability refactoring
https://github.com/grpc/grpc-java/pull/11886	3	readability	2025-02-11 01:14:07	xds: improve code readability of server FilterChain parsing	- Improve code flow and variable names  - Reduce nesting  - Add comments between logical blocks  - Add comments explaining some xDS/gRPC nuances
https://github.com/GTNewHorizons/GT5-Unofficial/pull/616	5	readability	2021-08-01 10:47:04	Improved readability of BaseMetaTileEntity receiveClientEvent	
https://github.com/GTNewHorizons/GT5-Unofficial/pull/3569	1	readability	2024-12-16 16:22:35	Refactoring LES code for better readability	This PR refactors code of LES parallel calculation to be easier to understand (byproduct of adding parallel formula in tooltip in https://github.com/GTNewHorizons/GT5-Unofficial/pull/3560)
https://github.com/GTNewHorizons/Hodgepodge/pull/164	4	readability	2023-01-24 11:21:55	limit roman numbers to 20 for readability	
https://github.com/hapifhir/hapi-fhir/pull/2960	2	readability	2021-09-06 19:00:32	extract some methods for readability	
https://github.com/hazelcast/hazelcast/pull/10931	1	readability	2017-07-14 15:58:19	Improved assert messages of MapInvalidationMetaDataMigrationTest	Pulled out `assertEqualsSequenceNumbers()` and `assertEqualsPartitionUUIDs` to unify assertions between test methods. It also improves the readability which partition failed.
https://github.com/helidon-io/helidon/pull/6679	6	readability	2023-07-25 17:58:14	Several Refactor commits to improve code readability	
https://github.com/heremaps/xyz-hub/pull/336	2	readability	2020-10-14 14:48:38	selection: geojson spec -> feature must have member 'properties' & code readability on viz.starselection	
https://github.com/HouariZegai/Calculator/pull/28	1	readability	2021-01-04 21:41:50	Changing if-else-if ladder to switch statement for better readability	
https://github.com/housepower/ClickHouse-Native-JDBC/pull/449	1	readability	2023-09-04 13:46:50	[CLEANUP]: Improve readability, Fix potential Overflow(Maximum 10 bytes for a 64-bit number)	
https://github.com/HubSpot/jinjava/pull/946	2	readability	2022-11-03 13:16:54	Don't use arbitrary booleans in public methods	To improve the readability of public methods, replace the boolean that was added as a parameter with a separate method with a different name which internally references a private method that uses the boolean flag.  Added in https://github.com/HubSpot/jinjava/pull/921/files (merged today)
https://github.com/hyperledger/besu/pull/1382	1	readability	2020-09-15 12:51:36	Remove ternary operator for better readability	Remove ternary operator for better readability during encoding of transactions .    Signed-off-by: Abdelhamid Bakhta  abdelhamid.bakhta@consensys.net>
https://github.com/hyperledger/besu/pull/3667	1	readability	2022-04-01 01:55:23	Improve code readability	Signed-off-by: Fabio Di Fabio  fabio.difabio@consensys.net>       Thanks for sending a pull request! Please check out our contribution guidelines:       https://github.com/hyperledger/besu/blob/main/CONTRIBUTING.md      ## PR description    ## Fixed Issue(s)     Please link to fixed issue(s) here using format: fixes # issue number>       Example: "fixes #2"      ## Documentation    - [x] I thought about documentation and added the `doc-change-required` label to this PR if      [updates are required](https://wiki.hyperledger.org/display/BESU/Documentation).    ## Changelog    - [x] I thought about the changelog and included a [changelog update if required](https://wiki.hyperledger.org/display/BESU/Changelog).
https://github.com/hyperledger/besu/pull/4566	32	readability	2022-11-02 10:38:23	TxPool code refactor to improve readability	Signed-off-by: Fabio Di Fabio  fabio.difabio@consensys.net>       Thanks for sending a pull request! Please check out our contribution guidelines:       https://github.com/hyperledger/besu/blob/main/CONTRIBUTING.md      ## PR description    This PR is not introducing any functional change, but it is only meant to rename and move things in order to make the code more readable and simplify the review of the upcoming PRs.    Change list:  - The main change is the rename of the generic `AbstractPendingTransactionsSorter.TransactionInfo` class to a more typed `PendingTransaction` class, and it has also moved from inner to outer class since its frequent use in other packages.  - Moved the big inner `AbstractPendingTransactionsSorter.LowestInvalidNonceCache` to package outer class, addressing suggestion from @jflo in a previous PR  - Moved the inner enum `AbstractPendingTransactionsSorter.TransactionAddedStatus` to outer enum  - Rename method `AbstractPendingTransactionsSorter::signalInvalidTransaction` to better express its semantic, addressing suggestion from @jflo in a previous PR        ## Fixed Issue(s)     Please link to fixed issue(s) here using format: fixes # issue number>       Example: "fixes #2"      ## Documentation    - [x] I thought about documentation and added the `doc-change-required` label to this PR if      [updates are required](https://wiki.hyperledger.org/display/BESU/Documentation).    ## Changelog    - [x] I thought about the changelog and included a [changelog update if required](https://wiki.hyperledger.org/display/BESU/Changelog).
https://github.com/hyperledger/besu/pull/6199	1	readability	2023-11-22 04:42:04	Refactor: improve readability of EthFeeHistory	## PR description  This PR does not change anything, just breaks the code into smaller pieces
https://github.com/hyperledger/besu/pull/6775	2	readability	2024-03-25 04:45:19	Refactor BackwardsSyncAlgorithm.pickNextStep for readability	Simple series of Extract Method operations.    Tidy up couple of things from #6749 
https://github.com/hyperledger/besu/pull/8507	1	readability	2025-04-02 07:32:01	[MINOR] renaming method in test to help readability	## PR description    ## Fixed Issue(s)  I spent a little too long figuring this out so proposing a rename.      ### Thanks for sending a pull request! Have you done the following?    - [ ] Checked out our [contribution guidelines](https://github.com/hyperledger/besu/blob/main/CONTRIBUTING.md)?  - [ ] Considered documentation and added the `doc-change-required` label to this PR [if updates are required](https://wiki.hyperledger.org/display/BESU/Documentation).  - [ ] Considered the changelog and included an [update if required](https://wiki.hyperledger.org/display/BESU/Changelog).  - [ ] For database changes (e.g. KeyValueSegmentIdentifier) considered compatibility and performed forwards and backwards compatibility tests    ### Locally, you can run these tests to catch failures early:    - [ ] spotless: `./gradlew spotlessApply`  - [ ] unit tests: `./gradlew build`  - [ ] acceptance tests: `./gradlew acceptanceTest`  - [ ] integration tests: `./gradlew integrationTest`  - [ ] reference tests: `./gradlew ethereum:referenceTests:referenceTests`    
https://github.com/idealo/deckard/pull/8	5	readability	2024-10-23 10:59:35	[Scouting] Improve readability and efficiency	Small contribution to the project
https://github.com/idempiere/idempiere/pull/1666	53	readability	2023-02-09 13:39:59	IDEMPIERE-5570 Zk: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    ## Checklist:    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  - [x] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  - [ ] Any dependent changes have been merged and published in downstream modules  - [ ] I have checked my code and corrected any misspellings  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1675	22	readability	2023-02-15 11:33:19	IDEMPIERE-5570 Zk: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    ## Checklist:    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  - [ ] Any dependent changes have been merged and published in downstream modules  - [ ] I have checked my code and corrected any misspellings  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1690	51	readability	2023-02-27 13:23:20	IDEMPIERE-5570 Zk: Improve readability of code	- Improve code readability for org.adempieere.webui.apps.form package.    https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    ## Checklist:    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  - [x] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  - [ ] Any dependent changes have been merged and published in downstream modules  - [ ] I have checked my code and corrected any misspellings  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1755	119	readability	2023-03-28 17:36:32	IDEMPIERE-5570 Zk: Improve readability of code	- Refinement up to org.adempiere.webui.component package.    https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [ ] I have tested the direct scenario that my code is solving  - [ ] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1774	27	readability	2023-04-11 11:35:39	IDEMPIERE-5570 Zk: Improve readability of code	- org.adempiere.webui.dashboard and org.adempiere.webui.desktop package    https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [ ] I have tested the direct scenario that my code is solving  - [ ] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1819	38	readability	2023-05-03 11:54:00	IDEMPIERE-5570 Zk: Improve readability of code	- for org.adempiere.webui.editor package    https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [x] I have tested the direct scenario that my code is solving  - [x] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/1984	197	readability	2023-08-29 09:40:20	IDEMPIERE-5570 Zk: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [x] I have tested the direct scenario that my code is solving  - [x] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/2129	743	readability	2023-12-08 12:02:49	IDEMPIERE-5838 Base: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5838    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [ ] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [ ] I have tested the direct scenario that my code is solving  - [ ] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [x] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/2179	373	readability	2024-01-10 11:58:51	IDEMPIERE-5838 Base: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5838    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [ ] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [x] I have tested the direct scenario that my code is solving  - [ ] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [ ] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/2283	498	readability	2024-04-02 21:04:16	IDEMPIERE-5838 Base: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5838    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [x] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [x] I have tested the direct scenario that my code is solving  - [x] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [x] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/idempiere/idempiere/pull/2517	51	readability	2024-11-06 11:28:57	IDEMPIERE-5570 Zk: Improve readability of code	https://idempiere.atlassian.net/browse/IDEMPIERE-5570    # Pull Request Checklist    - [x] My code follows the [code guidelines](https://wiki.idempiere.org/en/Contributing_to_Trunk) of this project  - [x] My code follows the best practices of this project  - [x] I have performed a self-review of my own code  - [x] My code is easy to understand and review.   - [x] I have checked my code and corrected any misspellings  - [ ] In hard-to-understand areas, I have commented my code.  - [x] My changes generate no new warnings  ### Tests  - [x] I have tested the direct scenario that my code is solving  - [x] I checked all collaterals that can be affected by my changes, and tested other potential affected scenarios  - [x] New and existing unit tests pass locally with my changes  - [ ] I have added unit tests that prove my fix is effective or that my feature works  ### Documentation  - [ ] I have made corresponding changes to the documentation as follows:  - - [ ] New feature (non-breaking change which adds functionality): I have created the New Feature page in the project wiki explaining the functionality and how to use it. If relevant, I have committed sample data to the core seed to have usable examples in GardenWorld.  - - [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected): I have documented the change in a clear way that everyone in the community can understand the impact of the change.  - - [ ] Improvement (improves and existing functionality): This documentation is needed if the improvement changes the way the user interacts with the system or the outcome of a process/task changes. If it is just, for instance, a performance improvement, documentation might not be needed.   - [ ] The changed/added documentation is in the project wiki (not privately-hosted pdf files or links pointing to a company website) and is complete and self-explanatory.    
https://github.com/iluwatar/java-design-patterns/pull/805	7	readability	2018-10-21 18:12:04	Refactoring changes in Ambassador Pattern	Changes  ---    - Updated test cases to use Junit Assert method as compared to assert keyword    - Proper testing of `RemoteService` using `RandomProvider` interface. Introduced `RandomProvider` interface so that randomness can be controlled from test cases.    - For readability used constant for representing FAILURE    Todos  ---    - [x] Update class diagram once refactoring is approved -> no class diagram 
https://github.com/iluwatar/java-design-patterns/pull/1025	12	readability	2019-10-20 16:01:03	#984 local variable inference changes	Pull request title    #984 var changes for   abstract-document  abstract-factory  acyclic-visitor  adapter  aggregator-microservices    Added var for local variables in cases var is improving readability        > For detailed contributing instructions see https://github.com/iluwatar/java-design-patterns/wiki/01.-How-to-contribute  
https://github.com/iluwatar/java-design-patterns/pull/1492	183	readability	2020-08-21 14:25:16	Fixed most reported issues by SonarCloud.	SonarCloud Issue fixes    - This pull request is to resolve most of the issues that SonarCloud has picked up.    Pull request description    - I've refactored most of the test cases that did not meet naming convention standards, attempted to fix the Cognitive Complexity issues within certain files, I haven't touched all of them as I was uncertain of the functionality. Mainly I've extracted parts of the original methods into their own methods to solve readability issues. I've also changed the unnecessary higher ranking access modifiers withing test cases, no changes were made to classes though, as I have no idea whether or not those methods should be used outside of the package/class itself.  
https://github.com/iluwatar/java-design-patterns/pull/1811	2	readability	2021-09-07 18:43:47	Remove unnecessary and possibly not threadsafe flag	Remove unnecessary flag.    Introducing a new static flag to prevent instantiation via reflection is unnecessary. It's been defined as a static variable and therefore it is a shared data, it most likely needs proper synchronization.    besides, I believe it lacks proper readability.    Pull request description    - remove the flag  - check the instance variable to prevent reflection call    
https://github.com/JabRef/jabref/pull/6479	6	readability	2020-05-28 15:27:16	Fixes generated bibtex key and display of institute authors	     Describe the changes you have made here: what, why, ...   Link issues that are fixed, e.g. "Fixes #333".  If you fixed a koppor issue, link it, e.g. "Fixes https://github.com/koppor/jabref/issues/47".  The title of the PR must not reference an issue, because GitHub does not support autolinking there.     Fixes #6459. Fixes #6465 .    There are two parts of this issue,  1. A null is prepended to an abbreviated BibTeX key.  2. Curly brackets are not respected (in the maintable's author column?).    **1. Fix to the prepended null**  *What is going on?*  `BracketedPattern.generateInstitutionKey` gets called for any author enclosed in curly brackets (e.g., `"{The School of Life}"`). The method expects an institute of technology or university and appends its name to the key (e.g., null if there is no name).    *Why is it going on?*  Academic institutions can have long generated BibTeX keys unless abbreviated, e.g., `"Royal Institute of Technology: The School of Electrical Engineering and Computer Science"`, which `generateInstitutionKey` shortens to `RITEECS`.    *Fix*  Replace a null valued university with an empty string. The drawback is potentially very short BibTeX keys (e.g., `The School of Life` -> `L`).    *What are alternatives?*  1. Regex matching universities and technological institutions, which is hard to implement correctly. On the other hand, the drawback is an unexpected BibTeX key in a corner case. In the case of `The School of Life` would be abbreviated to `SL` instead of `L`.    **2. Fix to the author column**  When the list of authors gets converted to a latex-free version, all curly brackets are removed since the whole string is parsed as latex. When the latex-free string is used to create/fetch an `AuthorList` it will no longer contain any brackets, and the information needed to format the string is gone.    **3. What I think is left to do**  - [x] Find out why `{The School of Life}`  isn't respected in the author field of the GUI  - [x] ~~Attempt to match universities etc. with regex~~ Assume that names that have comma separated parts are universities  - [x] ~~Update `BibtexKeyGeneratorTest` as it makes heavy use of deprecated methods~~ the deprecated methods are essentially convenience methods so they have been moved inside the test file  - [x] See if the readability of `generateInstitutionKey` can be improved  - [x] ~~Change the key generator for institution/corporate names to a Formatter?~~ `generateInstitutionKey` should not be a separate Formatter, it is only called by `normalize`.    and         - Go through the list below. If a task has been completed, mark it done by using `[x]`.  - Please don't remove any items, just leave them unchecked if they are not applicable.       - [x] Change in CHANGELOG.md described (if applicable)  - [x] Tests created for changes (if applicable)  - [x] Manually tested changed features in running JabRef (always required)  - [ ] Screenshots added in PR description (for UI changes)  - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at  https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.
https://github.com/jacoco/jacoco/pull/949	11	readability	2019-09-30 09:24:05	Use ASMs new Iterable API for better readability	
https://github.com/JakeWharton/timber/pull/304	1	readability	2018-03-08 18:53:08	Improve code readability.	Replaced for loops with for each for better code readability.
https://github.com/JanusGraph/janusgraph/pull/4759	1	readability	2025-02-16 12:49:31	Improve readability of testReadMarkerCompatibility	Improves the readability of the test. Replaces manual exception handling with the testing framework's built-in features (e.g., assertThrows), improving readability, maintainability, and debugging efficiency.    -----    Thank you for contributing to JanusGraph!    In order to streamline the review of the contribution we ask you  to ensure the following steps have been taken:    ### For all changes:  - [x] Has your PR been rebased against the latest commit within the target branch (typically `master`)?  - [x] Is your initial contribution a single, squashed commit?  
https://github.com/jdi-testing/jdi-light/pull/1012	39	readability	2019-10-14 08:40:31	fix: Use one line for each declaration, it enhances code readability	fix: Use one line for each declaration, it enhances code readability
https://github.com/jenkinsci/azure-vm-agents-plugin/pull/306	12	readability	2021-10-01 18:57:20	Fixed some deprecation warnings in respect to jenkins.get() and minor refactorings	Fixed some deprecation warnings in respect to jenkins.get() and minor refactorings like:  * converted big if to a switch  * Use `Math.max` or `Math.min` for better readability  * use diamond operator       Please describe your pull request here.      - [ ] Make sure you are opening from a **topic/feature/bugfix branch** (right side) and not your main branch!  - [ ] Ensure that the pull request title represents the desired changelog entry  - [ ] Please describe what you did  - [ ] Link to relevant issues in GitHub or Jira  - [ ] Link to relevant pull requests, esp. upstream and downstream changes  - [ ] Ensure you have provided tests - that demonstrates feature works or fixes the issue        Put an `x` into the [ ] to show you have filled the information.  The template comes from https://github.com/jenkinsci/.github/blob/master/.github/pull_request_template.md   You can override it by creating .github/pull_request_template.md  in your own repository      
https://github.com/jenkinsci/configuration-as-code-plugin/pull/116	1	readability	2018-02-20 09:42:35	move config variable name to constant, use system property first	Follow java and unix conventions about env variable and system property  names - use lowercase, dot-separated for property matched to env    Also moved default path to constant for better readability
https://github.com/jenkinsci/docker-workflow-plugin/pull/186	1	readability	2019-10-04 12:32:21	Use try-with-resource in 'Dockerfile#parse()'	Improve readability.
https://github.com/jenkinsci/jenkins/pull/3618	38	readability	2019-02-08 05:43:50	[JENKINS-53511] Improve discovery and readability of WebClient	- downstream of https://github.com/jenkinsci/jenkins-test-harness/pull/109  - update of commons-io from 2.4 to 2.6 to be ok with JTH:2.42. It's fully compatible with 2.4 cf [upgrade to 2.5](https://commons.apache.org/proper/commons-io/upgradeto2_5.html) and [upgrade to 2.6](https://commons.apache.org/proper/commons-io/upgradeto2_6.html).    See [JENKINS-53511](https://issues.jenkins-ci.org/browse/JENKINS-53511).       Comment:   If the issue is not fully described in the ticket, add more information here (justification, pull request links, etc.).     * We do not require JIRA issues for minor improvements.   * Bugfixes should have a JIRA issue (backporting process).   * Major new features should have a JIRA issue reference.       ### Proposed changelog entries    * Developer: Improve discovery and readability of WebClient most popular options.       Comment:   The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/      ### Submitter checklist    - [x] JIRA issue is well described  - [x] Changelog entry appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)        * Use the `Internal: ` prefix if the change has no user-visible impact (API, test frameworks, etc.)  - [x] Appropriate autotests or explanation to why this change has no tests  - [x] For dependency updates: links to external changelogs and, if possible, full diffs       For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc)    
https://github.com/jenkinsci/jenkins/pull/4458	1	readability	2020-02-06 12:36:32	Spotbugs: Check for null issue	I fixed a couple of possible null-related Spotbugs Issues. I'm not sure if they might happen at all, but I guess the null check does not harm at all. Because I thought the readability could be improved by lambdas, I used them.    See [JENKINS-36720](https://issues.jenkins-ci.org/browse/JENKINS-36720).      ### Proposed changelog entries    * N/A: Internal    ### Proposed upgrade guidelines    N/A    ### Submitter checklist    - [x] JIRA issue is well described  - [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)    * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade  - [x] Appropriate autotests or explanation to why this change has no tests  - [x] For dependency updates: links to external changelogs and, if possible, full diffs    ### Desired reviewers      ### Maintainer checklist    Before the changes are marked as `ready-for-merge`:     - [ ] There are at least 2 approvals for the pull request and no outstanding requests for change  - [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change  - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct  - [ ] Proper changelog labels are set so that the changelog can be generated automatically  - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))  - [ ] If it would make sense to backport the change to LTS, a JIRA issue should exist and be labeled as `lts-candidate`    
https://github.com/jenkinsci/jenkins/pull/4845	12	readability	2020-07-17 14:14:47	Minor refactorings either for performance or readability	Minor refactorings either for performance or readability    * `Arrays.asList` to `Collections.singletonList`  * `Collections.sort` to `Array.sort()`  * missing `NonNull`  * Diamond operator  * Added a break to a for loop    ### Proposed changelog entries    * Internal: N/A       Comment:   The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/      ### Proposed upgrade guidelines    N/A    ### Submitter checklist    - [ ] (If applicable) Jira issue is well described  - [ ] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)    * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade  - [ ] Appropriate autotests or explanation to why this change has no tests  - [ ] For dependency updates: links to external changelogs and, if possible, full diffs       For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc)      ### Desired reviewers    @mention       Comment:  If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers       ### Maintainer checklist    Before the changes are marked as `ready-for-merge`:     - [ ] There are at least 2 approvals for the pull request and no outstanding requests for change  - [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change  - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct  - [ ] Proper changelog labels are set so that the changelog can be generated automatically  - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))  - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).  
https://github.com/jenkinsci/jenkins/pull/4846	18	readability	2020-07-17 14:15:16	tests: minor refactorings either for performance or readability	Minor refactorings either for performance or readability:  -   Arrays.asList to Collections.singletonList  -   Collections.sort to Array.sort()  - some deprecations fixed around `StandardCharsets.UTF_8`      ### Proposed changelog entries    * Internal: N/A       Comment:   The changelogs will be integrated by the core maintainers after the merge.  See the changelog examples here: https://jenkins.io/changelog/      ### Proposed upgrade guidelines    N/A    ### Submitter checklist    - [ ] (If applicable) Jira issue is well described  - [ ] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)    * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade  - [ ] Appropriate autotests or explanation to why this change has no tests  - [ ] For dependency updates: links to external changelogs and, if possible, full diffs       For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc)      ### Desired reviewers    @mention       Comment:  If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers       ### Maintainer checklist    Before the changes are marked as `ready-for-merge`:     - [ ] There are at least 2 approvals for the pull request and no outstanding requests for change  - [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change  - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct  - [ ] Proper changelog labels are set so that the changelog can be generated automatically  - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))  - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).  
https://github.com/jenkinsci/jenkins/pull/6013	23	readability	2021-12-05 17:09:26	Break lines at 240 columns	Applies the [rectangle rule](https://github.com/google/google-java-format/wiki/The-Rectangle-Rule) to some extremely long lines to improve readability and sets the maximum line length at 240 columns. I'm not planning on going any lower than this, but I feel that 240 columns is quite wide: double the recommendation I've seen in most style guides.    ### Proposed changelog entries    N/A    ### Proposed upgrade guidelines    N/A    ### Submitter checklist    - [x] (If applicable) Jira issue is well described  - [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)    * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade  - [x] Appropriate autotests or explanation to why this change has no tests  - [x] For dependency updates: links to external changelogs and, if possible, full diffs       For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc)      ### Desired reviewers    @mention       Comment:  If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers       ### Maintainer checklist    Before the changes are marked as `ready-for-merge`:     - [ ] There are at least 2 approvals for the pull request and no outstanding requests for change  - [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change  - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct  - [ ] Proper changelog labels are set so that the changelog can be generated automatically  - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))  - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).  
https://github.com/jenkinsci/jenkins/pull/6060	48	readability	2021-12-18 19:04:33	Simplify JTH assertions	Replace old-style JTH assertions with newer methods for improved readability.    ### Proposed changelog entries    N/A    ### Proposed upgrade guidelines    N/A    ### Submitter checklist    - [x] (If applicable) Jira issue is well described  - [x] Changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developer, depending on the change). [Examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)    * Fill-in the `Proposed changelog entries` section only if there are breaking changes or other changes which may require extra steps from users during the upgrade  - [x] Appropriate autotests or explanation to why this change has no tests  - [x] For dependency updates: links to external changelogs and, if possible, full diffs       For new API and extension points: Link to the reference implementation in open-source (or example in Javadoc)      ### Desired reviewers    @mention       Comment:  If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/code-reviewers       ### Maintainer checklist    Before the changes are marked as `ready-for-merge`:     - [ ] There are at least 2 approvals for the pull request and no outstanding requests for change  - [ ] Conversations in the pull request are over OR it is explicit that a reviewer does not block the change  - [ ] Changelog entries in the PR title and/or `Proposed changelog entries` are correct  - [ ] Proper changelog labels are set so that the changelog can be generated automatically  - [ ] If the change needs additional upgrade steps from users, `upgrade-guide-needed` label is set and there is a `Proposed upgrade guidelines` section in the PR title. ([example](https://github.com/jenkinsci/jenkins/pull/4387))  - [ ] If it would make sense to backport the change to LTS, a Jira issue must exist, be a _Bug_ or _Improvement_, and be labeled as `lts-candidate` to be considered (see [query](https://issues.jenkins-ci.org/issues/?filter=12146)).  
https://github.com/jenkinsci/jenkins/pull/9059	4	readability	2024-03-22 20:49:58	Minor improvements to readability within tests	Minor improvements to readability within Tests   ### Testing done  Ran maven test locally on a Windows machine.     Comment: Provide a clear description of how this change was tested. At minimum this should include proof that a computer has executed the changed lines. Ideally this should include an automated test or an explanation as to why this change has no tests. Note that automated test coverage is less than complete, so a successful PR build does not necessarily imply that a computer has executed the changed lines. If automated test coverage does not exist for the lines you are changing, you must describe the scenario(s) in which you manually tested the change. For frontend changes, include screenshots of the relevant page(s) before and after the change. For refactoring and code cleanup changes, exercise the code before and after the change and verify the behavior remains the same.    ### Proposed changelog entries  N/A    Comment: The changelog entry should be in the imperative mood; e.g., write "do this"/"return that" rather than "does this"/"returns that". For examples, see: https://www.jenkins.io/changelog/  Remove JENKINS-XXXXX if there is no issue for the pull request.  You may add multiple changelog entries if applicable by adding a new entry to the list, e.g. - JENKINS-123456, First changelog entry - Second changelog entry    ### Proposed upgrade guidelines  N/A  ```[tasklist] ### Submitter checklist - [x] The Jira issue, if it exists, is well-described. - [x] The changelog entries and upgrade guidelines are appropriate for the audience affected by the change (users or developers, depending on the change) and are in the imperative mood (see [examples](https://github.com/jenkins-infra/jenkins.io/blob/master/content/_data/changelogs/weekly.yml)). Fill in the **Proposed upgrade guidelines** section only if there are breaking changes or changes that may require extra steps from users during upgrade. - [x] There is automated testing or an explanation as to why this change has no tests. - [x] New public classes, fields, and methods are annotated with `@Restricted` or have `@since TODO` Javadocs, as appropriate. - [x] New deprecations are annotated with `@Deprecated(since = "TODO")` or `@Deprecated(forRemoval = true, since = "TODO")`, if applicable. - [x] New or substantially changed JavaScript is not defined inline and does not call `eval` to ease future introduction of Content Security Policy (CSP) directives (see [documentation](https://www.jenkins.io/doc/developer/security/csp/)). - [x] For dependency updates, there are links to external changelogs and, if possible, full differentials. - [x] For new APIs and extension points, there is a link to at least one consumer. ```  ### Desired reviewers  @mention     Comment: If you need an accelerated review process by the community (e.g., for critical bugs), mention @jenkinsci/core-pr-reviewers.    Before the changes are marked as `ready-for-merge`:  ```[tasklist] ### Maintainer checklist - [ ] There are at least two (2) approvals for the pull request and no outstanding requests for change. - [ ] Conversations in the pull request are over, or it is explicit that a reviewer is not blocking the change. - [x] Changelog entries in the pull request title and/or **Proposed changelog entries** are accurate, human-readable, and in the imperative mood. - [x] Proper changelog labels are set so that the changelog can be generated automatically. ``` 
https://github.com/jenkinsci/jenkins-test-harness/pull/109	1	readability	2018-09-28 19:03:37	[JENKINS-53511] Improve discovery and readability of WebClient	- upstream of https://github.com/jenkinsci/jenkins/pull/3618  - add methods to directly change the throwing exception behavior (and redirect behavior)  - also correct behavior of assertFail that is not taking into account the "throwExceptionOnFailingStatusCode" option    See [JENKINS-53511](https://issues.jenkins-ci.org/browse/JENKINS-53511).
https://github.com/jenkinsci/jenkins-test-harness/pull/814	1	readability	2024-08-13 16:21:33	Improve exception readability in case a directory can't be deleted because it still contains files	Found this while investigating a test flake report and realized the current reported exception was a bit confusing.    So, proposing this:    Use suppressed exceptions rather than wrap the exception so that we get the primary cause first, then details.    Also resolve files relative to their containing folders.    Before:    ```  java.io.IOException: [REDACTED]/target/tmp/j h16565971146678333138/users/Fred_10744520479289247763/config.xml   at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:144)   at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:131)   at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:131)   at org.jvnet.hudson.test.TemporaryDirectoryAllocator.dispose(TemporaryDirectoryAllocator.java:99)   at org.jvnet.hudson.test.TestEnvironment.dispose(TestEnvironment.java:84)   at org.jvnet.hudson.test.JenkinsRule.after(JenkinsRule.java:527)   at org.jvnet.hudson.test.JenkinsRule$1.evaluate(JenkinsRule.java:665)   at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)   at java.base/java.lang.Thread.run(Thread.java:840)  Caused by: java.nio.file.DirectoryNotEmptyException: [REDACTED]/target/tmp/j h16565971146678333138/users/Fred_10744520479289247763   at java.base/sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:246)   at java.base/sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:110)   at java.base/java.nio.file.Files.deleteIfExists(Files.java:1191)   at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:141)   ... 8 more  ```    After:    ```  java.nio.file.DirectoryNotEmptyException: [REDACTED]/target/tmp/j h16565971146678333138/users/Fred_10744520479289247763          at java.base/sun.nio.fs.UnixFileSystemProvider.implDelete(UnixFileSystemProvider.java:289)          at java.base/sun.nio.fs.AbstractFileSystemProvider.deleteIfExists(AbstractFileSystemProvider.java:109)          at java.base/java.nio.file.Files.deleteIfExists(Files.java:1191)          at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:142)          at org.jvnet.hudson.test.TemporaryDirectoryAllocator.dispose(TemporaryDirectoryAllocator.java:100)          at org.jvnet.hudson.test.TestEnvironment.dispose(TestEnvironment.java:84)          at org.jvnet.hudson.test.JenkinsRule.after(JenkinsRule.java:586)          at org.jvnet.hudson.test.JenkinsRule$1.evaluate(JenkinsRule.java:724)          at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)          at java.base/java.lang.Thread.run(Thread.java:1583)          Suppressed: java.io.IOException: These files still exist : config.xml                  at org.jvnet.hudson.test.TemporaryDirectoryAllocator.delete(TemporaryDirectoryAllocator.java:146)                  ... 6 more  ```    Manually tested with the following patch to produce non-empty directories.    ```diff  Index: src/main/java/org/jvnet/hudson/test/TemporaryDirectoryAllocator.java  IDEA additional info:  Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP   +>UTF-8  ===================================================================  diff --git a/src/main/java/org/jvnet/hudson/test/TemporaryDirectoryAllocator.java b/src/main/java/org/jvnet/hudson/test/TemporaryDirectoryAllocator.java  --- a/src/main/java/org/jvnet/hudson/test/TemporaryDirectoryAllocator.java (revision 3b5659834a066c27a991c742649d976b535dc18a)  +++ b/src/main/java/org/jvnet/hudson/test/TemporaryDirectoryAllocator.java (date 1723541060918)  @@ -126,13 +126,6 @@          private void delete(Path p) throws IOException {           LOGGER.fine(() -> "deleting " + p);  -        if (Files.isDirectory(p, LinkOption.NOFOLLOW_LINKS)) {  -            try (DirectoryStream Path> children = Files.newDirectoryStream(p)) {  -                for (Path child : children) {  -                    delete(child);  -                }  -            }  -        }           try {               if (isWindows()) {                   // Windows throws an access denied exception when deleting read-only files    ```       Please describe your pull request here.      ### Testing done       Comment:  Provide a clear description of how this change was tested.  At minimum this should include proof that a computer has executed the changed lines.  Ideally this should include an automated test or an explanation as to why this change has no tests.  Note that automated test coverage is less than complete, so a successful PR build does not necessarily imply that a computer has executed the changed lines.  If automated test coverage does not exist for the lines you are changing, you must describe the scenario(s) in which you manually tested the change.  For frontend changes, include screenshots of the relevant page(s) before and after the change.  For refactoring and code cleanup changes, exercise the code before and after the change and verify the behavior remains the same.       ### Submitter checklist  - [X] Make sure you are opening from a **topic/feature/bugfix branch** (right side) and not your main branch!  - [X] Ensure that the pull request title represents the desired changelog entry  - [X] Please describe what you did  - [ ] Link to relevant issues in GitHub or Jira  - [ ] Link to relevant pull requests, esp. upstream and downstream changes  - [ ] Ensure you have provided tests - that demonstrates feature works or fixes the issue        Put an `x` into the [ ] to show you have filled the information.  The template comes from https://github.com/jenkinsci/.github/blob/master/.github/pull_request_template.md   You can override it by creating .github/pull_request_template.md in your own repository      
https://github.com/jenkinsci/material-theme-plugin/pull/52	7	readability	2022-09-27 14:51:27	Adding green and yellow theme colors, formatting edits for readability & consistency 	   Please describe your pull request here.    Added a green and yellow themes  Also cleaned up some unused imports and reformatted the css a bit for better readability    Issue: https://github.com/jenkinsci/material-theme-plugin/issues/53    - [x] Make sure you are opening from a **topic/feature/bugfix branch** (right side) and not your main branch!  - [x] Ensure that the pull request title represents the desired changelog entry  - [x] Please describe what you did  - [x] Link to relevant issues in GitHub or Jira  - [x] Ensure you have provided tests - that demonstrates feature works or fixes the issue        Put an `x` into the [ ] to show you have filled the information.  The template comes from https://github.com/jenkinsci/.github/blob/master/.github/pull_request_template.md   You can override it by creating .github/pull_request_template.md  in your own repository        Note  I think I got everything setup for these, happy to modify as needed.  The readability is subjective I understand but consistency is not so thats what I went for.  Consistency was picked based on the first occurrence where each color was on its own line, this read nice and was easier to maintain in my opinion so I used that format for everywhere else. (https://github.com/jenkinsci/material-theme-plugin/blob/master/src/main/webapp/material-theme.css#L113-L116)    We needed these colors for our instances of jenkins that we previously used afonsof/jenkins-material-theme for; which this is based off of! Colors were taken from there, secondary colors are 75% opacity of the primary color.  
https://github.com/jenkinsci/office-365-connector-plugin/pull/25	3	readability	2017-10-27 05:51:56	Moves methods that decide about notification into separate class	Moves two method into separate class to enable unit test (next PR). The code is same except one method that has been split into smaller one to improve readability.    This is next step to make this class smaller, easier to maintain and test
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/117	1	readability	2020-07-07 20:17:16	Use varargs for converting plugins to Strings	Improve readability by removing boilerplate code.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/118	3	readability	2020-07-07 21:10:03	Create lists with asList and singletonList	Improve readability by removing boilerplate code.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/123	2	readability	2020-07-09 17:48:45	Tap System.out with System Lambda	Improve readability. Also System Lambda is more precise because it taps  the output of a single statement only.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/124	1	readability	2020-07-09 18:49:34	Don't mock Files.exists	Improve readability.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/126	1	readability	2020-07-10 14:14:59	Extract method "assertConfigHasPlugins"	Improve readability: the assertion is now more clear.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/129	1	readability	2020-07-11 20:45:15	Don't mock Config	Improve readability and simplify the code. Config is a value object and  has a builder. There is no need to use a mock here.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/134	7	readability	2020-07-18 07:21:41	Use AssertJ for assertions	Improve the readability of tests. E.g.        assertThat(actualPlugins)          .containsExactlyInAnyOrder(              new Plugin("workflow-scm-step", "2.4", null, null),              new Plugin("workflow-step-api", "2.20", null, null));    is easier to read than        List Plugin> expectedPlugins = Arrays.asList(          new Plugin("workflow-scm-step", "2.4", null, null),          new Plugin("workflow-step-api", "2.20", null, null));      assertEquals(expectedPlugins, actualPlugins);    and also more specific because it explicitly states that the order does  not matter.    Also the messages for failing tests is more helpful than the current  one. E.g. if the assertion from above fails it prints an error like        Expecting:         [workflow-scm-step 2.4]>      to contain exactly in any order:         [workflow-scm-step 2.4, workflow-step-api 2.20]>      but could not find the following elements:         [workflow-step-api 2.20]>    so that it is immediately clear that one plugin is missing.
https://github.com/jenkinsci/plugin-installation-manager-tool/pull/147	1	readability	2020-07-25 06:40:27	Extract methods for creating JSON objects	Improve readability.
https://github.com/jenkinsci/remoting/pull/378	1	readability	2020-04-21 16:11:54	Additional updates to RemoteClassLoading	It's probably easiest to review this PR by commit. If it helps I can split it into separate PRs.    The first PR extracts a few methods for improved readability. This makes it easier to isolate the different operations and see what is going on.    The second PR makes block bracket usage consistent, i.e., it uses brackets always, even for simple one line changes.
https://github.com/jenkinsci/subversion-plugin/pull/213	12	readability	2018-04-20 08:11:01	Minor enhancements in readability	I would like to participate in this plugin and I thought I could start by improving some unit tests. So this is just a very simple pull request to kindly ask if improving the unit tests is a good starting point at all.
https://github.com/jhipster/jhipster-online/pull/358	1	readability	2023-08-24 14:35:13	improve readability of syncUserProjects method	extract additional private methods to improve readability and reduce method length
https://github.com/jMonkeyEngine/jmonkeyengine/pull/1594	36	readability	2021-08-13 18:10:01	clarify comments	This PR improves the readability of some comments in the source code, mostly in Java source. It corrects a few typos, but mostly it adds hyphens or blanks or camelCase to emphasize word boundaries.    Because it affects only javadoc and inline comments, this is a low-risk PR.
https://github.com/jobrunr/jobrunr/pull/1078	1	readability	2024-07-31 07:52:13	Improve readability and performance when comparing instants in ServerZookeeper	I run perfomance & validation tests. Both methods produce the same output.  The proposed method is slightly more perfomant.
https://github.com/junit-team/junit5/pull/928	1	readability	2017-07-11 14:02:26	Improve readability of getTags()	## Overview    Improve readability of getTags()    ---    I hereby agree to the terms of the JUnit Contributor License Agreement.    ---    ### Definition of Done    - [x] There are no TODOs left in the code  - [ ] Method [preconditions](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc  - [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed  - [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests)  - [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](http://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/meta/API.html)  - [ ] Change is documented in the [User Guide](http://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](http://junit.org/junit5/docs/snapshot/user-guide/#release-notes)  - [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass  
https://github.com/kestra-io/kestra/pull/1754	4	readability	2023-07-17 07:15:02	doc: Improve readability of the OpenAPI spec	* Fixed mismatched tags  * Fixed minor issues with the schema    Micronaut OpenAPI doesn't handle multipart/form-data params (`@Part`) :(
https://github.com/KeYProject/key/pull/3012	15	readability	2023-02-11 15:29:37	Proof tree view: Multiple small changes for readability	I've digged these changes up from my main branch from over a year ago and made them cleaner.    * Cleanup some of the code  * Speed up ProofTreeSearchBar by caching the search strings (Makes a huge difference for large proofs)  * Fix example dialog loading previously hidden example on double-click on a folder    ### Elide long rule app names and move them to the tooltip    ![grafik](https://user-images.githubusercontent.com/23399687/216086114-a5e442db-c30d-4e66-9b28-a192ab4f79b7.png)    ### Normalize whitespace in rule names  After: ![grafik](https://user-images.githubusercontent.com/23399687/216086358-e2badf5a-f3f6-424e-b867-eaba872f0470.png)    Before: ![grafik](https://user-images.githubusercontent.com/23399687/216086390-50dad39f-1c74-4300-bab2-d7b6f2c73fa4.png)    ### Move applied on term of OSS nodes to the tooltip    After:   ![grafik](https://user-images.githubusercontent.com/23399687/216086641-7e7ec221-0130-4edd-aa53-dfa0104e6132.png)    Before:   ![grafik](https://user-images.githubusercontent.com/23399687/216086660-d1521c1b-bd57-404a-a297-45a4afb4f7de.png)    
https://github.com/kiegroup/jbpm/pull/1287	5	readability	2018-08-01 06:37:44	JBPM-7469 - Improve CaseData expression readability (auto import)	
https://github.com/kiegroup/kie-wb-common/pull/2060	46	readability	2018-08-29 17:01:48	[AF-1254]: Examples Import and Project import logic split to improve readability and to remove unwanted behavior	Created ProjectImportService to separate behavior from ExampleService. Also importProject from LibraryService moved to ProjectImportService    Related to:  * https://github.com/kiegroup/jbpm-wb/pull/1190
https://github.com/kolmafia/kolmafia/pull/1506	5	readability	2023-02-07 14:46:39	refactor: small readability improvements for maximizer constraints	1. Rename `checkEffectConstraints` to what it does  2. Make `checkConstraints` return an enum describing what each number means
https://github.com/linkedin/ambry/pull/2363	2	readability	2023-02-14 19:45:07	[DR] Convert millisec to DateTime for readability	Convert a few millisec timestamps to human-readable format
https://github.com/linkedin/coral/pull/343	34	readability	2023-01-20 02:41:37	Coral-Trino: Improve readability of TrinoToRelConverterTest	
https://github.com/liquibase/liquibase/pull/3047	2	readability	2022-08-09 19:42:30	Add support for `AS <dataType>` clause for H2 since version 2.0	## Impact      - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [ ] Bug fix (non-breaking change which fixes expected existing functionality)  - [X] Enhancement/New feature (adds functionality without impacting existing logic)  - [X] Breaking change (fix or feature that would cause existing functionality to change)     ## Description    Currently Liquibase explicitly excludes H2 when emitting the `AS  dataType>` clause. However, H2 has support for this feature since version 2.0. This effect of this change is that the CreateSequenceGenerator will only omit the clause for versions before that.    ## Things to be aware of    I also extended the existing unit test to verify the new behavior. In the process I also attempted to improve the code   for better readability and consistency. For example, I used the generatorUnderTest field instead of creating a new CreateSequenceGenerator instance.    This also fixes the issue of an unsupported "dataType" on old h2 versions being ignored instead of failing validation like it should have. This will impact on old versions of h2 using dataType as an attribute.    ## Things to worry about    n/a    ## Additional Context    n/a  
https://github.com/liquibase/liquibase/pull/3316	1	readability	2022-11-17 20:38:34	Improved readability in the createCDILiquibaseConfig method.	## Impact      - What types of changes does your code introduce? Put an `x` in all the boxes that apply:    - [x] Bug fix (non-breaking change which fixes expected existing functionality)  - [ ] Enhancement/New feature (adds functionality without impacting existing logic)  - [ ] Breaking change (fix or feature that would cause existing functionality to change)     ## Description    Adds new line breaks to a code that seems packed up. No functionality change, just code readability.    ## Things to be aware of  None    ## Things to worry about  None    ## Additional Context  None
https://github.com/luchob/softuni-sep-2023/pull/15	4	readability	2023-10-03 15:25:58	Readability improvements@i18n and BrandServiceImpl.getAllBrands()@mobilele refactored to one functional call 	
https://github.com/luna-rs/luna/pull/174	62	readability	2019-11-13 23:42:14	Improve readability by using Java 9+ methods.	
https://github.com/mars-sim/mars-sim/pull/1404	1	readability	2024-09-07 10:14:56	Extract new method from duplicate, introduce boolean for more readability	PR refactors duplicate code by extracting a new method and introduces a boolean to improve readability.
https://github.com/mdgspace/flasto/pull/3	8	readability	2017-06-09 15:48:06	Implement floating view with an expanded layout and enhance the readability of the code.	
https://github.com/MegaMek/megamek/pull/3296	357	readability	2021-12-10 14:40:35	Code Readability 'Fast Fixes'	This PR is primarily fixing code readability issues, but also some other (largely IDE automated) fixes.    To review:  Whitespace differences off. These changes are the bulk of this PR, as a lot of the fixes are for missing or tab spacing.
https://github.com/MegaMek/megamek/pull/3583	1	readability	2022-04-20 16:11:54	XML Util Methods: Write Performance and Read Readability Improvements	This is a XML enhancement to make things run better. It's a slight performance improvement when it comes to file writing for large saves, and improves array parsing readability.
https://github.com/MegaMek/megameklab/pull/1510	5	readability	2024-05-22 21:17:40	Improve readability of tables	Adds shading to every other row of many of the harder to read tables to make them easier to scan horizontally.  In order to not affect official record sheets, shading must be enabled from an option in the Configuration menu.    An example of the shaded tables:   ![image](https://github.com/MegaMek/megameklab/assets/29113974/2742562d-316e-451d-a300-f0f1c7a723bc)  See here for an example of every covered unit type: [testsheets.pdf](https://github.com/MegaMek/megameklab/files/15407987/testsheets.pdf)    ### Problems  Enabling the option slows export/print of record sheets significantly, from 1-2 seconds to around half a minute per sheet. Since this doesn't affect users not using the option, which is the default, I don't think this is a blocker. I have no idea why this happens, and could use some insight.    The additional tables from *Print reference tables* and the fluff-image-replacement tables aren't shaded, and it would be nice if they were. These tables aren't in SVGs and would need a different, programmatic approach in order to be shaded. 
https://github.com/MegaMek/mekhq/pull/6138	1	readability	2025-03-04 19:10:12	 Refactored `updatePartInUseData` For Improved Readability and Logic Flow	- Cleaned up `updatePartInUseData` method by restructuring conditional logic for better readability.  - Added specific handling for ignoring parts from units marked as salvage.  - Added specific handling for ignoring parts from conventional infantry units.  - Separated distinct cases (e.g., unit-specific parts, present spares, and transfer counts) for clarity.  - Reduced nesting and eliminated redundant checks to streamline execution.  - Enabled 'ignore mothballed units' by default    Fix #5973  Fix #6036    ### Dev Notes  Enabling 'ignore mothball' by default will mean the player is not considered to have any part-in-use if they accept the free mothballing at the start of a contract. Despite this, I think having autoLogistics only pick up units that are being fielded is the better approach. And, should players want to change the behavior, they can from within the parts-in-use dialog.
https://github.com/mfvanek/pg-index-health/pull/31	13	readability	2020-02-10 06:34:35	Renamed some members for better readability. Added more javadoc comments	
https://github.com/microsoft/typespec/pull/6497	13	readability	2025-03-21 04:55:47	[Java] improve readability of ProxyMethodMapper type	This pull request focuses on enhancing the readability of `ProxyMethodMapper` by refactoring but without altering overall behavior.    * Added `ProxyMethod.newBuilder()` to ensure immutability.  * Added `CollectionUtil`, with utility methods to create immutable list/set/map.  * Extracted and simplified the logic that create async and sync response method return type into a utility class - `ResponseTypeFactory`, so this can be reused across `ProxyMethodMapper` and `ClientMethodMapper`.  * Extracted the logic that reads exception configurations from settings in to a standalone type - `ExceptionSettingsUtil`  * Added `ProxyMethodParameterProcessor` type responsible for resolving all `ProxyMethodParameter`, so we can simplify the `ProxyMethodMapper` internals.  * Added `UniqueProxyMethodNameGenerator` type so we can isolate the logic that generate unique method names, which again  simplifies the `ProxyMethodMapper` internals.    The auto-rest.java test run for this commit passed the CI - [CI run pr](https://github.com/Azure/autorest.java/pull/3048)
https://github.com/microsoft/typespec/pull/6679	1	readability	2025-03-26 02:48:50	[Java] Renaming ProxyMethodMapper::createCustomHeaderMethod to createNoCustomHeaderMethod, improve readability and add doc	
https://github.com/minecraft-access/minecraft-access/pull/172	1	readability	2023-09-17 12:17:16	Rewrite big README into manual structure for better readability	## Pull Request Checklist    (Use `~~ -[ ] ... ~~` markdown deletion syntax to cross out unrelated entries.)    - [x] A new entry is added in `CHANGELOG.md` that describes what is changed.  - [x] The unit test suite passes at the latest commit of this PR branch.    ## Describe what you have changed in this PR    * Solve #134   * Update `lang` version
https://github.com/minecraft-access/minecraft-access/pull/173	1	readability	2023-09-17 12:17:54	Rewrite big README into manual structure for better readability 	## Pull Request Checklist    (Use `~~ -[ ] ... ~~` markdown deletion syntax to cross out unrelated entries.)    - [x] A new entry is added in `CHANGELOG.md` that describes what is changed.  - [x] The unit test suite passes at the latest commit of this PR branch.    ## Describe what you have changed in this PR    Same as #172 
https://github.com/MockBukkit/MockBukkit/pull/1232	3	readability	2024-12-16 11:44:32	Refactor WorldMock code to improve code readability	# Description  This PR refactors the logic to create the entity, and moves the creation logic to `EntitTypes` class.  This make the behaviour more close to what Paper implements, and also makes it easier to work on.    # Checklist  The following items should be checked before the pull request can be merged.  - [X] Code follows existing style.  - [X] Unit tests added (if applicable).  
https://github.com/mockito/mockito/pull/907	7	readability	2017-01-27 21:58:30	Unified all number of invocations checker in NumberOfInvocationsChecker	fixes #426    This PR unifies the functionality of `NonGreedyNumberOfInvocationsChecker`, `NumberOfInvocationsCheckerInOrder `and `NumberOfInvocationsChecker `in static methods of the type `NumberOfInvocationsChecker`.     This saves ~50 lines of code and increases readability on the call sides.
https://github.com/MovingBlocks/Terasology/pull/4132	8	readability	2020-08-29 07:29:27	chore: Extract relevance code for ChunkProvider's to RelevanceSystem	### Contains    First part of ChunkProviders refactoring - extract releveance system code.  It is must improve readability.     ### How to test    Teleportation, moving, world purging and respawn must work as usual.  
https://github.com/MovingBlocks/Terasology/pull/4867	7	readability	2021-10-30 22:54:57	chore: remove SubmersibleCamera abstraction	This SubmsersibleCamera abstraction seems to complicate things a lot so I just did away with the abstraction. I think this should help with readability. the use case is limited and the abstract is backward since it goes from camera   submersible but all cameras are considered submersible cameras just simpler to do away with this. submersible is pretty limited in its use case so I just moved that logic to CoreRendering.   you need to merge this PR: https://github.com/Terasology/CoreRendering/pull/71 before this one. the PR in core rendering can be merged without this once since I just swap the base class to Camera.     Not sure I agree with the propertychange stuff from cameraconfig not all cameras are dependent on the resolution nor are all cameras dependent on the view distance or LOD. for the variance shadow maps I would like to tune the z-distance to best fit the camera frustrum.     
https://github.com/mulesoft/mule/pull/12863	1	readability	2023-09-29 01:07:12	W-13718989: Fixing modules readability to sun.misc.Unsafe (required by Caffeine and Disruptor)	
https://github.com/nacos-group/nacos-spring-boot-project/pull/243	1	readability	2022-04-30 03:25:46	Increase method readability	Increase method readability in NacosPropertiesBuilder class
https://github.com/naver/fixture-monkey/pull/312	1	readability	2022-05-11 08:17:01	Refactor apply for better readability	builderManipulators                       `fixed`              (apply)       .
https://github.com/neo4j/neo4j/pull/9460	251	readability	2017-06-15 18:56:52	3.3 graph values applied	Apply the new Values module to the kernel.    With this work we remove the *Property classes and replace them with their Value equivalents. Also places where property values were typed as Object have been changed to Value, with exceptions in some surfaces and tools close to the surface, and tests where that would just introduce a lot of boilerplate and reduce readability.     Some places could be improved, like `PropertyStore.encodeValue`, but we felt too uncertain on this part of the kernel to make bigger changes.    [Core API benchmarks](http://jmh-benchmarks.neohq.net/?tab=compareVersions&benchmarkGroup=Core%2520API&neo4jVersion=3.3.0&neo4jVersion=fickludd%25203.3-graph-values-applied&date=10-5-2017) show identical performance as far as I can tell.
https://github.com/neoforged/NeoForge/pull/1479	1	readability	2024-08-27 15:55:22	Enhance readability of mod loading crash reports	This PR enhances the readability of mod loading crash reports (as dumped by `CrashReportExtender#dumpModLoadingCrashReport`) by doing the following set of cleanups:    - The 'root' exception of the crash report, which is a mere dummy that has no bearing on the actual contents of the report since the issues are added as categories ("issue-category", for the sake of discussion), was changed to have no stacktrace.  - The stacktrace in each issue-category will now only appear if the loading issue itself contains a stacktrace.  - The detail messages and title of the issue-categories were changed to remove the use of all-caps and be more sentence-like in form. To avoid confusion with actual information from the loading issue, the placeholders are surrounded in angle brackets ` like so>`.  - The failure message is now translated (into English, since crash reports are unlocalized) from the original translation key to an actual human-readable message. The previous behavior (of using the translation key as-is and the translation arguments) are kept as a fallback if translation should fail due to some kind of exception.    For comparison, here are two crash reports, one made without this PR's changes and one made with this PR's changes:    - [crash-before-pr.txt](https://github.com/user-attachments/files/16715806/crash-before-pr.txt)  - [crash-after-pr.txt](https://github.com/user-attachments/files/16715807/crash-after-pr.txt)    For a quick visual demonstration, here's the two reports side-by-side (left being the old, right being the new), with the first 78 lines visible: (Notice how the System Details is actually visible in the new crash report.)    ![Screenshot of the two crash reports visible side-by-side](https://github.com/user-attachments/assets/3564e155-a2dc-4663-8b6c-56678bd138d7)    > The following was the code inserted into `ClientModLoader#completeModLoading` to induce the creation of those crash reports:  ```java  error = new ModLoadingException(List.of(                  ModLoadingIssue.error("Something terrible happened.").withAffectedMod(ModList.get().getModContainerById("minecraft").get().getModInfo()),                  ModLoadingIssue.error("fml.modloadingissue.discouragedmod", "beep", "boop", "", "reason", "test"),                  ModLoadingIssue.warning("An issue with an exception")                          .withCause(new Exception("Dummy exception"))));  ```
https://github.com/Netflix/archaius/pull/688	3	readability	2023-10-26 17:51:34	Readability refactor	Refactored code for readability. Split out most sections into self-contained methods with a single objective. Code is now longer, but less convoluted and with less anonymous nested things.    Cleaned up compiler warnings in main class and in the corresponding unit tests.
https://github.com/netty/netty/pull/8720	1	readability	2019-01-16 09:56:08	cleanup: extract duplicate code into method	Motivation:    Clean up code to increase readability.    Modification:    Extract duplicate code blocks into method.    
https://github.com/netty/netty/pull/8732	1	readability	2019-01-18 18:44:48	enhancement: extract duplicate code	Motivation:    Clean up code to increase readability.    Modification:    Extract duplicate code and remove unnecessary throws
https://github.com/netty/netty/pull/12869	30	readability	2022-10-06 20:57:38	Apply 'VisibleForTesting', 'TestOnly' annotations	Motivation:    Start to use `@VisibleForTesting` in Netty 5 to make it easier to users to understand what to expect.    Modification:    Applied `@VisibleForTesting`    Added Notice    Result:    Better code readability & IDE support
https://github.com/NightscoutFoundation/xDrip/pull/1205	3	readability	2020-01-26 20:44:05	minor code cleanup and easier readability for the sharefollow package	Added _ separator in numbers to ease reading    @jamorham there are no functional changes in this commit, only better readability
https://github.com/NRG948/NRGRobot2025/pull/163	2	readability	2025-03-01 18:39:01	Improves swerve variable naming and method order for better readability.	
https://github.com/odpi/egeria/pull/6339	38	readability	2022-03-31 11:42:37	Refactor JanusGraph to improve code readability 	   SPDX-License-Identifier: CC-BY-4.0       Copyright Contributors to the Egeria project.    # Description    Refactored the connector to improve the code readability and the way that transactions/errors are handled.   Fixes # (issue)    
https://github.com/open-telemetry/opentelemetry-java-examples/pull/527	1	readability	2024-11-14 23:57:53	Rename variable for improved readability	From PR feedback: https://github.com/open-telemetry/opentelemetry.io/pull/5610#discussion_r1843007447
https://github.com/opencast/opencast/pull/6097	2	readability	2024-08-20 19:04:57	Code readability improvements	This patch simplifies the search service code a bit and hopefully makes it easier to read.    ### Your pull request should     * [x] have a concise title  * [x] [close an accompanying issue](https://docs.opencast.org/develop/developer/#participate/development-process/#automatically-closing-issues-when-a-pr-is-merged) if one exists  * [x] [be against the correct branch](https://docs.opencast.org/develop/developer/development-process#acceptance-criteria-for-patches-in-different-versions)  * [x] include migration scripts and documentation, if appropriate  * [x] pass automated tests  * [x] have a clean commit history  * [x] [have proper commit messages (title and body) for all commits](https://medium.com/@steveamaza/e028865e5791)  
https://github.com/openhab/openhab-addons/pull/10610	1	readability	2021-05-01 13:35:08	[miio] update & improve readability value mappings for readme	Signed-off-by: Marcel Verpaalen  marcel@verpaalen.com>  
https://github.com/openhab/org.openhab.binding.zigbee/pull/287	2	readability	2018-11-12 13:24:11	Fix and improve readability of Mired/Kelvin conversion in color converter	ZigBee devices return the color temperature measured in Mired, while the color temperature converter internally uses Kelvin.    This PR introduces some methods for converting between Mired, Kelvin, and percentages to make more explicit where the corresponding conversions happen in the converter.    Moreover, this PR fixes #267 by computing the maximal Kelvin value based on the minimal Mired value and vice versa (as small Mired values correspond to large Kelvin values and vice versa).
https://github.com/OpenLiberty/liberty-tools-intellij/pull/1318	1	readability	2025-03-24 15:26:31	Fix paragraphing for readability	Noticed this paragraphing problem and I found it confusing. Just fixed it up for readability.    Fixes #1317
https://github.com/openmrs/openmrs-module-fhir2/pull/123	7	readability	2020-03-23 15:45:26	FM2-117 : Convert test assertion methods to assertThat() to improve code readability	  - Add a pull request title above in this format      - real example: 'FM2-8 Implement the Person Resource'      - 'FM2-JiraIssueNumber JiraIssueTitle'    ## Description of what I changed    - Describe your changes in detail    Converted test assertion methods to assertThat() to improve code readability    - It can simply be your commit message, which you must have        ## Issue I worked on    - This project only accepts pull requests related to open issues      - Want a new feature or change? Discuss it in an issue first      - Found a bug? Point us to the issue/or create one so we can reproduce it      - Just add the issue number at the end:    see https://issues.openmrs.org/browse/FM2-117    ## Checklist: I completed these to help reviewers :)    - Put an `x` in the box if you did the task      - If you forgot a task please follow the instructions below    - [x] My pull request only contains **ONE single commit**.      No? -> [read here](https://wiki.openmrs.org/display/docs/Pull+Request+Tips) on how to squash multiple commits into one    - [x] My IDE is configured to follow the [**code style**](https://wiki.openmrs.org/display/docs/Java+Conventions) of this project.      No? Unsure? -> [configure your IDE](https://wiki.openmrs.org/display/docs/How-To+Setup+And+Use+Your+IDE), format the code and add the changes with `git add . && git commit --amend`    - [ ] I have **added tests** to cover my changes. (If you refactored    existing code that was well tested you do not have to add tests)      No? -> write tests and add them to this commit `git add . && git commit --amend`    - [x] I ran `mvn clean package` right before creating this pull request and    added all formatting changes to my commit.      No? -> execute above command    - [x] All new and existing **tests passed**.      No? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.    - [x] My pull request is **based on the latest changes** of the master branch.      No? Unsure? -> execute command `git pull --rebase upstream master`  
https://github.com/opensearch-project/flow-framework/pull/943	25	readability	2024-11-11 18:54:50	Replace String concatenation with Log4j ParameterizedMessage for readability	### Description  I have replaced string concatenation with Log4j ParameterizedMessage in 40 files.    ### Related Issues  Resolves #905     ### Check List  - [x] Commits are signed per the DCO using `--signoff`.      By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.  For more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/flow-framework/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).  
https://github.com/opensearch-project/k-NN/pull/1931	16	readability	2024-08-05 22:25:01	Refactor KNNVectorFieldType from KNNVectorFieldMapper to a separate class for better readability.	### Description  Refactor KNNVectorFieldType from KNNVectorFieldMapper to a separate class for better readability. This change doesn't change any functionality, it's just Mapper class was becoming too big and refactoring this class out helps reducing the size of the file and things to look at once.    ### Related Issues  NA    ### Check List  - [X] Commits are signed per the DCO using `--signoff`.    By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.  For more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/k-NN/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).  
https://github.com/opensearch-project/k-NN/pull/1935	16	readability	2024-08-05 23:30:02	[Backport 2.x] Refactor KNNVectorFieldType from KNNVectorFieldMapper to a separate class for better readability.	Backport 967b21129121535f1f0b5d7268d2810b5d82fc47 from #1931
https://github.com/opensearch-project/OpenSearch/pull/2503	1	readability	2022-03-19 08:22:04	Use Hamcrest matchers and assertThat() in ReindexRenamedSettingTests to improve readability	### Description    - Use Hamcrest matchers and `assertThat()` in `ReindexRenamedSettingTests` to improve the readability.    Reason:  The order of the `assertEquals()` arguments in `ReindexRenamedSettingTests` class is reversed.    The unit test class `ReindexRenamedSettingTests` were added in PR https://github.com/opensearch-project/OpenSearch/pull/2221 / commit https://github.com/opensearch-project/OpenSearch/commit/63c75d1b1d188a4bc3917169001aa8711ad702ef    According to the comment in https://github.com/opensearch-project/OpenSearch/pull/2463#discussion_r827424263:    > The first argument of the `assert` is the _expected_ value, and the second is the _actual_ value.    ### Issues Resolved  Related to issue https://github.com/opensearch-project/OpenSearch/issues/1547     ### Check List  - [ ] New functionality includes testing.    - [x] All tests pass  - [ ] New functionality has been documented.    - [ ] New functionality has javadoc added  - [x] Commits are signed per the DCO using --signoff     By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.  For more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/OpenSearch/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).  
https://github.com/opensearch-project/opensearch-migrations/pull/1103	12	readability	2024-10-24 17:55:32	DataGenerator readability improvements	### Description    Rewrite the workload classes to use a fluent style w/ mixins so that the structure of what's being cons'ed together is much more immediately clear.  Case in point, making the conversion took hours because 1) there weren't unit tests on the generator itself and 2) the one test that was there didn't have suitable logging - requests weren't printed out (which is probably why there what looked to be a bug in the docIds).    This also maintains the previous status-quo of the codebase in how to eschew static imports and shows how to favor mixins and for DSL-like (DSL-lite) applications.    * Category Refactoring  * Why these changes are required? First, to find out why there was pushback to [removing static imports](https://github.com/opensearch-project/opensearch-migrations/pull/1076#discussion_r1808796774).  Then I realized that I couldn't understand the code & decided that if this was going to be used more often, we needed it to be clearer and to have better patterns in place.  * What is the old behavior before changes and new behavior after changes? docIds no longer contain a space.    ### Issues Resolved  Same sonar cleanup as [this PR](https://github.com/opensearch-project/opensearch-migrations/pull/1076), which was merged before this one was opened for review.    ### Testing  gradle testing    ### Check List  - [ ] New functionality includes testing    - [x] All tests pass, including unit test, integration test and doctest  - [ ] New functionality has been documented  - [x] Commits are signed per the DCO using --signoff    By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.  For more information on following Developer Certificate of Origin and signing off your commits, please check [here](https://github.com/opensearch-project/OpenSearch/blob/main/CONTRIBUTING.md#developer-certificate-of-origin).  
https://github.com/operator-framework/java-operator-sdk/pull/1771	19	readability	2023-02-21 08:44:17	refactor: Webpage sample better readability	
https://github.com/oracle/tribuo/pull/336	8	readability	2023-04-28 16:00:32	Refactor changes to improve code readability	### Description  Removed  null checks before checking instanceof as null case is handled.  Reorder Access modifiers as per JSR standard  Use of lambda expression to improve readability.    ### Motivation  Refactor changes to improve code readability.  
https://github.com/orientechnologies/orientdb/pull/9246	15	readability	2020-05-12 14:54:16	minor lucene analyzer, builder changes for readability	Mainly changes to analyzer, builder et al. for readability and some tests added.
https://github.com/palantir/tritium/pull/490	1	readability	2019-11-08 22:25:10	Update InvocationEventProxy for readability	This makes it clear that `InvocationTargetException` thrown by  `Method.invoke` is always handled properly.    ## After this PR  ==COMMIT_MSG==  Update InvocationEventProxy for readability  ==COMMIT_MSG==  
https://github.com/PANTHEONtech/lighty/pull/1534	3	readability	2023-09-25 06:27:45	Refactor code to improve readability and maintainability	This also resolves bugs reported by sonarcloud.    JIRA: LIGHTY-235
https://github.com/payara/ecosystem-maven/pull/285	5	readability	2024-01-18 19:28:07	FISH-8150 Micro Maven - Devmode - Refactor Payara Micro Log Format for Improved Readability	This pull request introduces the trimLog property to the Payara Micro Maven plugin. When enabled (default for dev mojo, disabled for start mojo), it refactors the log format for improved readability. The `trimLog` property can be disabled in `dev` mojo if Maven is started with `-X`.    - Added trimLogs property to plugin configuration.  - Implemented logic to adjust log format based on the value of trimLogs.  - Tested compatibility with both dev and start mojo.    ## Log Entry Examples:    ### Original Log Entries:  ```  [2024-01-18T17:22:14.559+0530] [] [INFO] [] [fish.payara.nucleus.hazelcast.HazelcastCore] [tid: _ThreadID=32 _ThreadName=RunLevelControllerThread-1705578730178] [timeMillis: 1705578734559] [levelValue: 800] JSR107 Default Cache Manager Bound to JNDI at payara/CacheManager    [2024-01-18T17:22:14.734+0530] [] [INFO] [NCLS-CORE-00101] [javax.enterprise.system.core] [tid: _ThreadID=32 _ThreadName=RunLevelControllerThread-1705578730178] [timeMillis: 1705578734734] [levelValue: 800] Network Listener http-listener started in: 18ms - bound to [/0.0.0.0:8080]    [2024-01-18T17:22:14.734+0530] [] [INFO] [NCLS-CORE-00058] [javax.enterprise.system.core] [tid: _ThreadID=32 _ThreadName=RunLevelControllerThread-1705578730178] [timeMillis: 1705578734734] [levelValue: 800] Network listener https-listener on port 8443 disabled per domain.xml    [2024-01-18T17:22:14.734+0530] [] [INFO] [NCLS-CORE-00087] [javax.enterprise.system.core] [tid: _ThreadID=32 _ThreadName=RunLevelControllerThread-1705578730178] [timeMillis: 1705578734734] [levelValue: 800] Grizzly 2.4.4 started in: 4,141ms - bound to [http-listener:8080]  ```  ### With `trimLog` enabled:  ```  [17:22:14.559] JSR107 Default Cache Manager Bound to JNDI at payara/CacheManager    [17:22:14.734] Network Listener http-listener started in: 18ms - bound to [/0.0.0.0:8080]    [17:22:14.734] Network listener https-listener on port 8443 disabled per domain.xml    [17:22:14.734] Grizzly 2.4.4 started in: 4,141ms - bound to [http-listener:8080]  ```  
https://github.com/payara/Payara/pull/4463	14	readability	2020-02-05 11:55:38	APPSERV-47 Adds Custom Watches to Monitoring Console	### Summary  Adds custom watches to client. In contrast to watches collected from `MonitoringWatchSource`s a custom watch is a user defined `Watch` instance. The monitoring client is used to compose such a watch. This can be done in the new page _Watches_ that also lists all watches and allows to edit, delete or disable and enable them.    A disabled watch is simply not actively evaluating data, it is ignored but it will show in the graphs as a outline box instead of a filled one. All watches can be disabled and enabled. This is stored in the added configuration so that the disabled state can be recreated on server startup.    Only custom watches can be delete. Collected (or programmatic) watches cannot be deleted as they originate from the server's code.    Custom watches can be edited. Programmatic watches can be duplicated, which changes the name of the duplicate to _Copy of {Name}_. So this becomes another watch but allows to use the programmatic watch as a template.    To recreate the custom watches on server-startup the watches need to be stored in some form.  I decided to write custom to and from JSON methods for the affected classes. This will allow to put in the proper code that can handle changes to the data structure. The strategy here is to be able to handle missing fields (that would be added) and ignore fields (that would be removed).  The conversion is covered with unit tests.    On server side:  * adds monitoring console configuration to store disabled watches as well as custom watch data  * REST and service API to enable/disable watches  * distinction between custom watches and programmatic watches  * watch states are shared when deriving a watch  * REST and service API to create custom watches  * REST and service API to delete custom watches  * `WatchData` REST API class is not writable to receive custom watch data send by client     On client side:  * adds a _Watches_ configuration page that lists existing watches, allows to edit, delete or disable/enable them.  * extracts model constants to a separate file for better readability and clarity  * extracts a controller file that encapsulation the client-server communication on client side for better readability and clarity  * fixes/updates formatting of watch conditions (e.g. in alert tables) and watch lists  * uses payara design system colors with better contrast  * fixes alignment of indicator (text message above graph)  * uses configured colours for status messages  * now also triggers status messages from alerts (red=critical, amber=alerting)  * adds new colour defaults for _error_ and _missing_ status  * use of `const` instead of `let` (TLDR; `const` should be default, `let` only when variable is actually changed, `var` is basically never needed or better suited in our "non-legacy" codebase)  * watch indicator at right side of the graph now shows the indicator as outline if the watch is disabled  * `Setting` input with `unit` now can use a function to provide a changing unit.      ### `WriteableView` and `ProtectedList`  Tried to improve it to make it more usable. Code also could do with some cleanup.  * added generics  * added missing `@Override` annoations  * removed unnecessary `else` nesting  * made static helpers `static`  * added some `List` methods that would otherwise throw a `UnsupportedOperationException` on the basis of existing method (so no actual transaction management was needed)    As mentioned some of the existing methods of the `ProtectedList` still show some odd behaviour.  When using `set(int, E)` the value at the index would be null next time I loaded the list.    ### Tests  Unit tests were added to verify the correctness of the to/from JSON conversion of the `Watch` class and all classes involved.    General information can be taken from the documentation https://github.com/payara/Payara-Server-Documentation/pull/705.    The custom watches feature was tested manually following the steps below:    #### General Setup:  1. build, install and start the server  2. use `set-monitoring-console-configuration --enabled=true` to deploy MC  3. open MC at http://localhost:8080/monitoring-console/  4. make sure browser cache for JS/CSS is cleared for MC's domain  5. check that following pages do exist: _Watches_ (if not most likely a browser cache issue - or get in touch)    #### Testing Disabling Existing Watches  1. Open page _Watches_ in MC  2. click checkbox of one of the listed watches to disable it, e.g. _Metric Collection Duration_  3. for _Metric Collection Duration_ watch open page _Monitoring_ and check the watch indicator on right side of the graph is now drawn as outline instead of filled  4. restart the server, e.g. using asadmin commands  5. refresh page _Watches_ in MC and check disabled watch is still disabled  6. enable the watch again  7. for _Metric Collection Duration_ watch open page _Monitoring_ again and check the indicator is now drawn filled    #### Testing Disabling Custom Watches  1. Open page _Watches_ in MC  2. create a new watch named _Heap Check_ by checking _Unhealthy_, filling in: _If_ `ns:jvm HeapUsage` _in_ `Percent` _is_ `>` _(some value clearly below your current heap usage, see _Core_ page)_, and press _Save or Update_  3. goto _Core_ page and check that the graph shows an alert because heap usage is above the watch level  4. go back to _Watches_ page and disable the created watch by clicking the checkbox on the left or using the cogs menu  5. go back to _Core_ and check that alert is gone (and that indicator is now as outline)  6. go to _Alerts_ page and check the alert is shown in _Past Unacknowledged Alerts_  7. go to _Watches_ page again an enable the watch once more, check on _Core_ page that an alert is triggered again    #### Testing Custom Watches  1. create a custom watch as given in steps for _Testing Disabling Custom Watches_  2. restart the server  3. open _Watches_ page and check the custom watch created is still there    #### Testing Listing of collected Watches  1. open _Watches_ page of MC, with default settings two watches should be listed  2. open admin console and browse to _Configurations_ => _server-config_ => HealthCheck_ tab _CPU Usage_ and check _Enabled_  3. go back to _Watches_ page and check a new watch _CPU Usage_ is listed now    #### Testing new admin command parameters are hidden  run:  ```  asadmin> set-monitoring-console-configuration --help  NAME       set-monitoring-console-configuration    SYNOPSIS       Usage: set-monitoring-console-configuration [--enabled=true|       false]     OPTIONS       --enabled    Command set-monitoring-console-configuration executed successfully.  ```
https://github.com/payara/Payara/pull/4602	6	readability	2020-04-22 10:10:15	APPSERV-114 Addresses possible sources of Race Conditions in InvocationManager	### Background  Running FT TCK strongly suggested that a race condition in or around the `InvocationManger` leads to inconsistent context when trying to derive the _current_ application like shown below:  ```java   ComponentInvocation current = invocationManager.getCurrentInvocation();   if (current == null) {       return invocationManager.peekAppEnvironment().getName();   }   String appName = current.getAppName();   if (appName == null) {       appName = current.getModuleName();   }   if (appName == null) {       appName = current.getComponentId();   }  return appName;  ```  The issue observed was that different application names were returned in a non deterministic manner for the actual same application processing tests.    ### Summary  The most likely cause is related to the frames that push and pop the stack which is peeked by `getCurrentInvocation()`. But it could also be related to application environment stack peeked by `peekAppEnvironment()` for case that not `ComponentInvocation` was on the stack.  The issue can either be within the implementation of the `InvocationMangerImpl` but also on the outside as the  `ComponentInvocation` is essentially managed from the outside by calling `preInvoke` and `postInvoke`.    Changes:  * removes the unnecessary generic of the `InvocationArray` / `InvocationFrames` (renamed) inner class  * replaces use of `Stack` with `ConcurrentLinkedDeque` (`synchronized` vs. CAS based synchronisation)  * replaces `ArrayList` as bases of frames stack with `ConcurrentLinkedDeque` (as this is only used via thread local non synchronised should not be an issue but to be sure and to provide better readability of the base class was changed)  * replaces `ComponentInvocationHandler[]` handlers with a single `ComponentInvocationHandler` that is initialised with `ListComponentInvocationHandler` in case multiple handlers are actually needed. The underlying `List` uses `ArrayList` as it is read-only after being initialised. This allows to simplify the rest of the implementation that only has to assume a single handler.  * uses `ListComponentInvocationHandler` to manage `RegisteredComponentInvocationHandler`. In this case the underlying `List` uses a `CopyOnWriteArrayList` as multiple threads might register handlers concurrently.   * replaces the `Map` for `RegisteredComponentInvocationHandler` (that are per type) with a thread-safe `ConcurrentHashMap` as multiple threads can register handlers concurrently.  * adds `try-finally` to `preInvoke` to make sure that any exception thrown by handlers does not prevent adding of the invocation instance (I'd say this is the best candidate for the observed issue)    ### Testing  The implementation of `InvocationMangerImpl` got covered with unit tests to a coverage > 95%.  This mostly intends to make sure the changes in the implementation do not cause unexpected behaviour, in particular throwing exceptions when it should not. The tests do include a few tests that include multiple threads to verify the thread parent-child stack inheritance behaviour, not to show that the class is thread-safe. To allow better reasoning about thread safety the implementation was cleaned and simplified so the use of collection becomes more clear.     #### Testing Performed  The unit tests were added mostly to make sure changes did not introduce new bugs like NPEs and alike and that the implementation does behave as expected from reading the code.    In addition I ran the FT TCK as that had shown issues before and since it deploying lots of applications. 
https://github.com/PEC-CSS/acm-website-backend/pull/110	1	readability	2023-12-11 06:47:29	Refactor endEvent method for improved performance and readability	Solves: https://github.com/PEC-CSS/acm-website-backend/issues/109
https://github.com/Pi4J/pi4j/pull/254	2	readability	2022-11-28 10:46:30	Improve the readability of PiGpioNativeImpl#gpioInitialise and make it more robust	While trying to read and understand `PiGpioNativeImpl#gpioInitialise` I struggled quite a bit to understand what the parameter value `3` of the `gpioCfgInterfaces` call actually means. So in my [first commit](4e24214a71448e6e61d808b400e895a497509b5c) I m suggesting to dissolve the magic value `3` by using new constants that I m adding to `PiGpioConst`. I ve taken the constants from https://github.com/joan2937/pigpio/blob/master/pigpio.h.    In my [second commit](e953d99aad1ef403a9ba2af67fa8d8b1c39dcaf9) I m suggesting to also validate the return value of the call to `gpioCfgInterfaces`. Currently Pi4J wouldn t notice when pigpio returns an error in the `gpioCfgInterfaces` call.    Let me know what you think about my suggested improvements.    In a potential follow-up improvement, users could also be allowed to add the `PI_DISABLE_ALERT` flag . This was actually the triggering reason for my research since I saw about 5-7% CPU load on idle on my Raspberry Pi 3. Apparently it s a known behavior of pigpio which is discussed in https://github.com/joan2937/pigpio/issues/29. Users who don t need to wait for input events might want to add the `PI_DISABLE_ALERT` flag to shave off some unnecessary CPU load.      _It is the same as adding the `-m` parameter to [`pigpiod`](https://abyz.me.uk/rpi/pigpio/pigpiod.html)_
https://github.com/prestodb/presto/pull/9539	3	readability	2017-12-12 22:31:27	Improve readability of LocalExchange.LocalExchangeFactory	Add GuardedBy and make synchronization more obviously correct
https://github.com/prestodb/presto/pull/11610	7	readability	2018-10-01 22:39:42	Improve readability of Thrift handles in explain plan	Fixes #11456
https://github.com/prestodb/presto/pull/13780	1	readability	2019-12-02 22:28:55	Invert if condition for better readability	This refactoring inverts the if condition in removeDuplicates() method  for better readability of code and aligns with the intent described in  the javadoc for the method    ```  == NO RELEASE NOTE ==  ```
https://github.com/prestodb/presto/pull/18313	18	readability	2022-09-12 14:55:52	Refactor to improve readability of QueryRunners	1. Removed dir abbreviation and replaced with directory.  2. Dropped the base from the data directory name since it is implied from  the context.    Test plan - Unit and Integration tests      ```  == NO RELEASE NOTE ==  ```  
https://github.com/prestodb/presto/pull/19028	1	readability	2023-02-08 21:52:18	Refactor SqlQueryExecution for readability	Test plan - Readability changes. No logic changed  ```  == NO RELEASE NOTE ==  ```  
https://github.com/prestodb/presto/pull/20460	3	readability	2023-08-02 17:55:34	Refactor Execution code for readability	- Refactor StateMachine to remove redundant wording  - Refactor SessionTransactionControlTask for readability  - Refactor UseTask for readability    ## Description  Readability changes    ## Motivation and Context  Readability changes  ## Impact  Readability changes    ## Test Plan  Unit Tests  ```  == NO RELEASE NOTE ==  ```    
https://github.com/prestodb/presto/pull/20895	1	readability	2023-09-20 18:29:25	Refactor ConnectorNodePartitioningProvider for readability	## Description  Refactor ConnectorNodePartitioningProvider for readability    ## Motivation and Context  Improving Readability.    ## Test Plan  Existing unit tests    ## Contributor checklist    - [x] Please make sure your submission complies with our [development](https://github.com/prestodb/presto/wiki/Presto-Development-Guidelines#development), [formatting](https://github.com/prestodb/presto/wiki/Presto-Development-Guidelines#formatting), [commit message](https://github.com/prestodb/presto/wiki/Review-and-Commit-guidelines#commit-formatting-and-pull-requests), and [attribution guidelines](https://github.com/prestodb/presto/wiki/Review-and-Commit-guidelines#attribution).  - [x] PR description addresses the issue accurately and concisely.  If the change is non-trivial, a GitHub Issue is referenced.  - [x] Documented new properties (with its default value), SQL syntax, functions, or other functionality.  - [x] If release notes are required, they follow the [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines).  - [x] Adequate tests were added if applicable.  - [x] CI passed.    ```  == NO RELEASE NOTE ==  ```    
https://github.com/prestodb/presto/pull/21398	2	readability	2023-11-16 21:41:21	Refactor Hive Split classes for readability	## Description  Refactor Hive Split classes for readability    ## Motivation and Context  Readability changes    ## Test Plan  Unit tests    ## Contributor checklist    - [x] Please make sure your submission complies with our [development](https://github.com/prestodb/presto/wiki/Presto-Development-Guidelines#development), [formatting](https://github.com/prestodb/presto/wiki/Presto-Development-Guidelines#formatting), [commit message](https://github.com/prestodb/presto/wiki/Review-and-Commit-guidelines#commit-formatting-and-pull-requests), and [attribution guidelines](https://github.com/prestodb/presto/wiki/Review-and-Commit-guidelines#attribution).  - [x] PR description addresses the issue accurately and concisely.  If the change is non-trivial, a GitHub Issue is referenced.  - [x] Documented new properties (with its default value), SQL syntax, functions, or other functionality.  - [x] If release notes are required, they follow the [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines).  - [x] Adequate tests were added if applicable.  - [x] CI passed.    ```  == NO RELEASE NOTE ==  ```    
https://github.com/prestodb/presto/pull/24710	2	readability	2025-03-12 04:57:17	Ensure readability of plan printer and add test	## Description  1. Make sure the printout from plan printer is easy to read  2. Add test    ## Motivation and Context  1. Make sure the printout from plan printer is easy to read    ## Impact    -Describe any public API or user-facing feature change or any performance impact     ## Test Plan  1. passed the verifier test  https://our.internmc.facebook.com/intern/presto/verifier/results/?test_id=213849   img width="1082" alt="Screenshot 2025-03-11 at 15 34 14" src="https://github.com/user-attachments/assets/c31e04d3-1dca-4f15-a9ff-020cdcdd150f" />    ## Contributor checklist    - [ ] Please make sure your submission complies with our [contributing guide](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md), in particular [code style](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md#code-style) and [commit standards](https://github.com/prestodb/presto/blob/master/CONTRIBUTING.md#commit-standards).  - [ ] PR description addresses the issue accurately and concisely.  If the change is non-trivial, a GitHub Issue is referenced.  - [ ] Documented new properties (with its default value), SQL syntax, functions, or other functionality.  - [ ] If release notes are required, they follow the [release notes guidelines](https://github.com/prestodb/presto/wiki/Release-Notes-Guidelines).  - [ ] Adequate tests were added if applicable.  - [ ] CI passed.    ## Release Notes    ```  == NO RELEASE NOTE ==  ```    
https://github.com/projectnessie/nessie/pull/1271	18	readability	2021-05-21 15:58:17	Introduce AssertJ for better test code readability	I've had really good experiences in the past with [AssertJ](https://assertj.github.io/doc/) when it comes to testing as it's very expressive and makes the code easy to read.    I figured that I'll introduce it and rewrite a bunch of Test classes to show how it makes certain things easier to test.     Reviewable:start   --- This change is [ img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/projectnessie/nessie/1271)    Reviewable:end   
https://github.com/PTCInc/thingworx-gitbackup-extension/pull/56	1	readability	2024-03-30 09:55:08	Improved Readability and appropriate punctuations	I have added proper indentations and organized the code to improve the readability
https://github.com/qbicsoftware/data-manager-app/pull/370	1	readability	2023-09-19 12:19:54	Ensure sample table readability on smaller screens 	**What was changed **   1.) Change Sample Overview Grid to wrap cell content on whitespace as a default behaviour.   2.) Introduce tooltips since some values can overflow  3.) Enforce that Sample Id and conditions are always visible and not changed due to grid sizing 
https://github.com/quarkus-qe/quarkus-test-suite/pull/492	10	readability	2022-01-21 11:42:11	Rename some customer cases test names in order to improve readability	
https://github.com/apache/accumulo/pull/1590	159	readable	2020-04-21 11:39:57	Use isEmpty() rather than size()/length() checks.	Per SonarQube recommendations:  Using Collection.size() to test for emptiness works, but using Collection.isEmpty() makes the code more readable and can be more performant. The time complexity of any isEmpty() method implementation should be O(1) whereas some implementations of size() can be O(n).
https://github.com/azkaban/azkaban/pull/2849	4	readable	2021-05-04 06:05:19	Make VersionSet readable in the logs.	Make VersionSet readable in the logs.  Move the formatting logic to ServerUtils.
https://github.com/cgeo/cgeo/pull/7431	4	readable	2019-03-30 22:12:31	use assertj	* more readable (left to right)  * more expressive (hasSize(), contains(), isEmpty()...)  * better error messages  * junit assert is deprecated    Really please don't introduce new assertions using plain junit assert.
https://github.com/crate/crate/pull/4076	11	readable	2016-09-16 13:55:04	Use Enum as mode for ReplacingSymbolVisitor	In order to make it more readable 
https://github.com/crate/crate/pull/7300	6	readable	2018-05-23 10:10:06	use consistent, human readable context names	
https://github.com/crate/crate/pull/9687	4	readable	2020-02-18 14:01:11	Make aggregation and group by semantic validation more readable	## Summary of the changes / Why this improves CrateDB  This should clarify a bit what constitutes valid semantic for expressions in the select list / group by.   ## Checklist   - [x] User relevant changes are recorded in ``CHANGES.txt``  - [x] Touched code is covered by tests  - [x] Documentation has been updated if necessary  - [x] [CLA](https://crate.io/community/contribute/cla/) is signed  - [x] This does not contain breaking changes, or if it does:     - It is released within a major release     - It is recorded in ``CHANGES.txt``     - It was marked as deprecated in an earlier release if possible     - You've thought about the consequences and other components are adapted       (E.g. AdminUI)
https://github.com/gradle/gradle/pull/11892	66	readable	2020-01-15 08:59:26	Lambdification of the dependency management project	This makes the code base easier to read: I was working on understanding artifact cache locking and friends, and code is definitely much more readable without all the anonymous inner class boilerplate.
https://github.com/magefree/mage/pull/9574	3	readable	2022-09-26 13:48:14	Refactored CardPanelRenderModes to make them more readable	This PR makes no functional changes to any of the files modified. It simply flattens the functions, simplifies them when possible, and reorders them to group similar pieces (e.g. all of the inner classes, or all of the static methods) together.    This is cleanup in preparation for working on several of the card rendering issues (e.g. #7422 and the issues linked in there)    Render modes in debug menu to show it still works:  ![MTGO](https://user-images.githubusercontent.com/48962821/192167066-a168e7a7-6d81-4767-9684-7d38f51a8a73.jpg)  ![Image](https://user-images.githubusercontent.com/48962821/192167067-85fb83f8-704c-4b9f-8af4-5fd41d22df88.jpg)  
https://github.com/mapstruct/mapstruct/pull/2998	4	readable	2022-09-02 15:24:37	#2895 Generate more readable annotations	Fixes #2895     This is a try at improving the generated annotations as explained in the issue.    What do you think @Zegveld?
https://github.com/MovingBlocks/Terasology/pull/4725	2	readable	2021-05-29 20:28:52	fix: ensure absolute path in PathManager	This fixes the discovery of duplicate modules, such as ``` 22:16:12.763 [main] ERROR o.t.g.module.TableModuleRegistry - Duplicate module CoreAdvancedAssets-1.3.0-SNAPSHOT discovered 22:16:12.763 [main] INFO  o.t.gestalt.module.ModulePathScanner - Discovered duplicate module: CoreAdvancedAssets-1.3.0-SNAPSHOT, skipping ```  This also makes sure to compare the paths with `.equals` instead of checking for reference equality with `==`.  Plus, small style change to make stream operations more readable in `ModuleManager`.  
https://github.com/netty/netty/pull/12388	11	readable	2022-05-12 12:37:36	Add method to get read-only Buffer copy without offsets	Motivation:  It seems to be the common case that when we want a read-only copy of a buffer, we want a copy of the readable byte range.    Modification:  Add a method specifically for this use case, where we can request a read-only copy, without having to specify the readable byte range explicitly.  Also update every relevant usage site.    Result:  Cleaner code, and easier access to the structural-sharing copy optimisation.
https://github.com/elastic/elasticsearch/pull/59951	34	understandability	2020-07-21 12:27:58	Rename binary_soft_classification evaluation to outlier_detection	This PR renames `binary_soft_classification` to `outlier_detection` in order to avoid confusion between `classification` and `binary_soft_classification` terms (the user may be confused which one of these two should they be using in a particular case).  After the change the evaluations names (`classification`, `regression`, `outlier_detection`) will match the analysis names which should increase understandability of the Evaluate API.    Relates https://github.com/elastic/elasticsearch/issues/59947
https://github.com/ihmcrobotics/ihmc-ros2-library/pull/14	1	understandability	2024-05-07 16:53:00	Improve understandability of participant transport setup.	
https://github.com/broadinstitute/picard/pull/1589	2	understandable	2020-10-02 21:35:01	MBA deletion edge case alternate solution	This is the alternate solution discuss in #1581.  I think it makes the code a bit cleaner and more understandable.    ### Checklist (never delete this)    Never delete this, it is our record that procedure was followed. If you find that for whatever reason one of the checklist points doesn't apply to your PR, you can leave it unchecked but please add an explanation below.    #### Content  - [ ] Added or modified tests to cover changes and any new functionality  - [ ] Edited the README / documentation (if applicable)  - [ ] All tests passing on Travis    #### Review  - [ ] Final thumbs-up from reviewer  - [ ] Rebase, squash and reword as applicable    For more detailed guidelines, see https://github.com/broadinstitute/picard/wiki/Guidelines-for-pull-requests    
https://github.com/JabRef/jabref/pull/8002	27	understandable	2021-08-21 12:43:47	Preferences for Grobid	Implements two new preferences in ImportSettingsPreferences:  - grobidEnabled  - grobidURL    The preferences are used in the Fetchers and Importers that use Grobid. Creating a GrobidService while grobidEnabled is false will result in an UnsupportedOperationException.    Fixes #8000         Describe the changes you have made here: what, why, ...   Link issues that are fixed, e.g. "Fixes JabRef/jabref-koppor#333".  If you fixed a koppor issue, link it, e.g. "Fixes https://github.com/koppor/jabref/issues/47".  The title of the PR must not reference an issue, because GitHub does not support autolinking there.     ![image](https://user-images.githubusercontent.com/10479048/130053320-1203cb06-4e37-4291-a4d1-e888ebf6b114.png)           - Go through the list below. Please don't remove any items.  - [x] done; [ ] not done / not applicable       - [] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)  - [x] Tests created for changes (if applicable)  - [x] Manually tested changed features in running JabRef (always required)  - [x] Screenshots added in PR description (for UI changes)  - [] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not created an issue at  https://github.com/JabRef/user-documentation/issues> or, even better, submitted a pull request to the documentation repository.  
https://github.com/JabRef/jabref/pull/9135	25	understandable	2022-09-05 08:52:34	Observable Preferences N (PushToApplicationPreferences, ExternalApplicationPreferences)	Follow up to #9126     - [ ] Change in `CHANGELOG.md` described in a way that is understandable for the average user (if applicable)  - [ ] Tests created for changes (if applicable)  - [x] Manually tested changed features in running JabRef (always required)  - [ ] Screenshots added in PR description (for UI changes)  - [ ] [Checked developer's documentation](https://devdocs.jabref.org/): Is the information available and up to date? If not, I outlined it in this pull request.  - [ ] [Checked documentation](https://docs.jabref.org/): Is the information available and up to date? If not, I created an issue at  https://github.com/JabRef/user-documentation/issues> or, even better, I submitted a pull request to the documentation repository.  
