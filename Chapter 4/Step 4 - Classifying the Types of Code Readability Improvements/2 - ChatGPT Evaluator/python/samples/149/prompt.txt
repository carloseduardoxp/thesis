Based on this pull request with the developer description: Hypothetically, an object with any type passed to this function with an encode, or a decode method could return True instead of raising a TypeError. This may never happen in real life, but still I feel it can be written in a different way.  I've refactored the function to make it more readable, and safer by using the isinstance function in Python., the code was changed by the developer from try:         if hasattr(s, 'decode'):             s.decode('utf-8')         elif hasattr(s, 'encode'):             s.encode('utf-8')         else:             unexpected = type(s).__name__             raise TypeError(                 f'Expected str/unicode/bytes, not {unexpected}') (if dont have code before, the code wasnt exist yet) to if not isinstance(s, (bytes, str)):         unexpected = type(s).__name__         raise TypeError(f'Expected str/bytes, not {unexpected}')      try: if isinstance(s, bytes):
             s.decode('utf-8'), (if dont have code after, the code was removed) please, provide the appropriate label that represents the code readability improvement described and performed by the developer. No explanations, only the name of the appropriate label.